
lab05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004080  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08004280  08004280  00005280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042d8  080042d8  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080042d8  080042d8  000052d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042e0  080042e0  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042e0  080042e0  000052e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080042e4  080042e4  000052e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080042e8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  2000005c  08004344  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000314  08004344  00006314  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b0a4  00000000  00000000  0000608a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cbb  00000000  00000000  0001112e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000848  00000000  00000000  00012df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000649  00000000  00000000  00013638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000279b1  00000000  00000000  00013c81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c17b  00000000  00000000  0003b632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6420  00000000  00000000  000477ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013dbcd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002548  00000000  00000000  0013dc10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  00140158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000005c 	.word	0x2000005c
 800021c:	00000000 	.word	0x00000000
 8000220:	08004268 	.word	0x08004268

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000060 	.word	0x20000060
 800023c:	08004268 	.word	0x08004268

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000612:	463b      	mov	r3, r7
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800061e:	4b21      	ldr	r3, [pc, #132]	@ (80006a4 <MX_ADC1_Init+0x98>)
 8000620:	4a21      	ldr	r2, [pc, #132]	@ (80006a8 <MX_ADC1_Init+0x9c>)
 8000622:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000624:	4b1f      	ldr	r3, [pc, #124]	@ (80006a4 <MX_ADC1_Init+0x98>)
 8000626:	2200      	movs	r2, #0
 8000628:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800062a:	4b1e      	ldr	r3, [pc, #120]	@ (80006a4 <MX_ADC1_Init+0x98>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000630:	4b1c      	ldr	r3, [pc, #112]	@ (80006a4 <MX_ADC1_Init+0x98>)
 8000632:	2200      	movs	r2, #0
 8000634:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000636:	4b1b      	ldr	r3, [pc, #108]	@ (80006a4 <MX_ADC1_Init+0x98>)
 8000638:	2201      	movs	r2, #1
 800063a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063c:	4b19      	ldr	r3, [pc, #100]	@ (80006a4 <MX_ADC1_Init+0x98>)
 800063e:	2200      	movs	r2, #0
 8000640:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000644:	4b17      	ldr	r3, [pc, #92]	@ (80006a4 <MX_ADC1_Init+0x98>)
 8000646:	2200      	movs	r2, #0
 8000648:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800064a:	4b16      	ldr	r3, [pc, #88]	@ (80006a4 <MX_ADC1_Init+0x98>)
 800064c:	4a17      	ldr	r2, [pc, #92]	@ (80006ac <MX_ADC1_Init+0xa0>)
 800064e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000650:	4b14      	ldr	r3, [pc, #80]	@ (80006a4 <MX_ADC1_Init+0x98>)
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000656:	4b13      	ldr	r3, [pc, #76]	@ (80006a4 <MX_ADC1_Init+0x98>)
 8000658:	2201      	movs	r2, #1
 800065a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800065c:	4b11      	ldr	r3, [pc, #68]	@ (80006a4 <MX_ADC1_Init+0x98>)
 800065e:	2200      	movs	r2, #0
 8000660:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000664:	4b0f      	ldr	r3, [pc, #60]	@ (80006a4 <MX_ADC1_Init+0x98>)
 8000666:	2200      	movs	r2, #0
 8000668:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800066a:	480e      	ldr	r0, [pc, #56]	@ (80006a4 <MX_ADC1_Init+0x98>)
 800066c:	f000 fc26 	bl	8000ebc <HAL_ADC_Init>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000676:	f000 fa45 	bl	8000b04 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800067a:	230a      	movs	r3, #10
 800067c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800067e:	2301      	movs	r3, #1
 8000680:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000682:	2300      	movs	r3, #0
 8000684:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000686:	463b      	mov	r3, r7
 8000688:	4619      	mov	r1, r3
 800068a:	4806      	ldr	r0, [pc, #24]	@ (80006a4 <MX_ADC1_Init+0x98>)
 800068c:	f000 fdc0 	bl	8001210 <HAL_ADC_ConfigChannel>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000696:	f000 fa35 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	3710      	adds	r7, #16
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000078 	.word	0x20000078
 80006a8:	40012000 	.word	0x40012000
 80006ac:	0f000001 	.word	0x0f000001

080006b0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08a      	sub	sp, #40	@ 0x28
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b8:	f107 0314 	add.w	r3, r7, #20
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a15      	ldr	r2, [pc, #84]	@ (8000724 <HAL_ADC_MspInit+0x74>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d123      	bne.n	800071a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006d2:	4b15      	ldr	r3, [pc, #84]	@ (8000728 <HAL_ADC_MspInit+0x78>)
 80006d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006d6:	4a14      	ldr	r2, [pc, #80]	@ (8000728 <HAL_ADC_MspInit+0x78>)
 80006d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80006de:	4b12      	ldr	r3, [pc, #72]	@ (8000728 <HAL_ADC_MspInit+0x78>)
 80006e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006e6:	613b      	str	r3, [r7, #16]
 80006e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000728 <HAL_ADC_MspInit+0x78>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ee:	4a0e      	ldr	r2, [pc, #56]	@ (8000728 <HAL_ADC_MspInit+0x78>)
 80006f0:	f043 0304 	orr.w	r3, r3, #4
 80006f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000728 <HAL_ADC_MspInit+0x78>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	f003 0304 	and.w	r3, r3, #4
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000702:	2301      	movs	r3, #1
 8000704:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000706:	2303      	movs	r3, #3
 8000708:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800070e:	f107 0314 	add.w	r3, r7, #20
 8000712:	4619      	mov	r1, r3
 8000714:	4805      	ldr	r0, [pc, #20]	@ (800072c <HAL_ADC_MspInit+0x7c>)
 8000716:	f001 f92d 	bl	8001974 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800071a:	bf00      	nop
 800071c:	3728      	adds	r7, #40	@ 0x28
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40012000 	.word	0x40012000
 8000728:	40023800 	.word	0x40023800
 800072c:	40020800 	.word	0x40020800

08000730 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b088      	sub	sp, #32
 8000734:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 030c 	add.w	r3, r7, #12
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000746:	4b1d      	ldr	r3, [pc, #116]	@ (80007bc <MX_GPIO_Init+0x8c>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	4a1c      	ldr	r2, [pc, #112]	@ (80007bc <MX_GPIO_Init+0x8c>)
 800074c:	f043 0310 	orr.w	r3, r3, #16
 8000750:	6313      	str	r3, [r2, #48]	@ 0x30
 8000752:	4b1a      	ldr	r3, [pc, #104]	@ (80007bc <MX_GPIO_Init+0x8c>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	f003 0310 	and.w	r3, r3, #16
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075e:	4b17      	ldr	r3, [pc, #92]	@ (80007bc <MX_GPIO_Init+0x8c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	4a16      	ldr	r2, [pc, #88]	@ (80007bc <MX_GPIO_Init+0x8c>)
 8000764:	f043 0304 	orr.w	r3, r3, #4
 8000768:	6313      	str	r3, [r2, #48]	@ 0x30
 800076a:	4b14      	ldr	r3, [pc, #80]	@ (80007bc <MX_GPIO_Init+0x8c>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	f003 0304 	and.w	r3, r3, #4
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000776:	4b11      	ldr	r3, [pc, #68]	@ (80007bc <MX_GPIO_Init+0x8c>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	4a10      	ldr	r2, [pc, #64]	@ (80007bc <MX_GPIO_Init+0x8c>)
 800077c:	f043 0308 	orr.w	r3, r3, #8
 8000780:	6313      	str	r3, [r2, #48]	@ 0x30
 8000782:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <MX_GPIO_Init+0x8c>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	f003 0308 	and.w	r3, r3, #8
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	2174      	movs	r1, #116	@ 0x74
 8000792:	480b      	ldr	r0, [pc, #44]	@ (80007c0 <MX_GPIO_Init+0x90>)
 8000794:	f001 fa9a 	bl	8001ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE4 PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000798:	2374      	movs	r3, #116	@ 0x74
 800079a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079c:	2301      	movs	r3, #1
 800079e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	4619      	mov	r1, r3
 80007ae:	4804      	ldr	r0, [pc, #16]	@ (80007c0 <MX_GPIO_Init+0x90>)
 80007b0:	f001 f8e0 	bl	8001974 <HAL_GPIO_Init>

}
 80007b4:	bf00      	nop
 80007b6:	3720      	adds	r7, #32
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40021000 	.word	0x40021000

080007c4 <average_8.0>:
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_ADC1_Init();
  MX_USART3_UART_Init();
  /* USER CODE BEGIN 2 */
  uint32_t average_8(uint32_t x){
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	f8c7 c000 	str.w	ip, [r7]
	static uint32_t samples[8];
	static uint32_t i = 0;
	static uint32_t total = 0;

	total += x - samples[i];
 80007d0:	4b12      	ldr	r3, [pc, #72]	@ (800081c <average_8.0+0x58>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a12      	ldr	r2, [pc, #72]	@ (8000820 <average_8.0+0x5c>)
 80007d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	1ad2      	subs	r2, r2, r3
 80007de:	4b11      	ldr	r3, [pc, #68]	@ (8000824 <average_8.0+0x60>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4413      	add	r3, r2
 80007e4:	4a0f      	ldr	r2, [pc, #60]	@ (8000824 <average_8.0+0x60>)
 80007e6:	6013      	str	r3, [r2, #0]
	samples[i] = x;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	@ (800081c <average_8.0+0x58>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	490c      	ldr	r1, [pc, #48]	@ (8000820 <average_8.0+0x5c>)
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	i = (i==7 ? 0 : i+1);
 80007f4:	4b09      	ldr	r3, [pc, #36]	@ (800081c <average_8.0+0x58>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2b07      	cmp	r3, #7
 80007fa:	d003      	beq.n	8000804 <average_8.0+0x40>
 80007fc:	4b07      	ldr	r3, [pc, #28]	@ (800081c <average_8.0+0x58>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	3301      	adds	r3, #1
 8000802:	e000      	b.n	8000806 <average_8.0+0x42>
 8000804:	2300      	movs	r3, #0
 8000806:	4a05      	ldr	r2, [pc, #20]	@ (800081c <average_8.0+0x58>)
 8000808:	6013      	str	r3, [r2, #0]

	return total>>3;
 800080a:	4b06      	ldr	r3, [pc, #24]	@ (8000824 <average_8.0+0x60>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	08db      	lsrs	r3, r3, #3
}
 8000810:	4618      	mov	r0, r3
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	200000cc 	.word	0x200000cc
 8000820:	200000d0 	.word	0x200000d0
 8000824:	200000f0 	.word	0x200000f0

08000828 <main>:
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
int main(void)
 800082e:	f107 0310 	add.w	r3, r7, #16
 8000832:	607b      	str	r3, [r7, #4]
  MPU_Config();
 8000834:	f000 f93a 	bl	8000aac <MPU_Config>
  HAL_Init();
 8000838:	f000 fabf 	bl	8000dba <HAL_Init>
  SystemClock_Config();
 800083c:	f000 f8da 	bl	80009f4 <SystemClock_Config>
  MX_GPIO_Init();
 8000840:	f7ff ff76 	bl	8000730 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000844:	f7ff fee2 	bl	800060c <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000848:	f000 f9fe 	bl	8000c48 <MX_USART3_UART_Init>
	{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, SET);
	}
}

HAL_ADC_Start(&hadc1);
 800084c:	481b      	ldr	r0, [pc, #108]	@ (80008bc <main+0x94>)
 800084e:	f000 fb79 	bl	8000f44 <HAL_ADC_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  while(HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK){}
 8000852:	bf00      	nop
 8000854:	2164      	movs	r1, #100	@ 0x64
 8000856:	4819      	ldr	r0, [pc, #100]	@ (80008bc <main+0x94>)
 8000858:	f000 fc42 	bl	80010e0 <HAL_ADC_PollForConversion>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d1f8      	bne.n	8000854 <main+0x2c>
	  adc_val = HAL_ADC_GetValue(&hadc1);
 8000862:	4816      	ldr	r0, [pc, #88]	@ (80008bc <main+0x94>)
 8000864:	f000 fcc7 	bl	80011f6 <HAL_ADC_GetValue>
 8000868:	4603      	mov	r3, r0
 800086a:	4a15      	ldr	r2, [pc, #84]	@ (80008c0 <main+0x98>)
 800086c:	6013      	str	r3, [r2, #0]
	  adc_avg_8 = average_8(adc_val);
 800086e:	4b14      	ldr	r3, [pc, #80]	@ (80008c0 <main+0x98>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	1d3a      	adds	r2, r7, #4
 8000874:	4694      	mov	ip, r2
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff ffa4 	bl	80007c4 <average_8.0>
 800087c:	4603      	mov	r3, r0
 800087e:	4a11      	ldr	r2, [pc, #68]	@ (80008c4 <main+0x9c>)
 8000880:	6013      	str	r3, [r2, #0]
	  adc_avg_16 = average_16(adc_val);
 8000882:	4b0f      	ldr	r3, [pc, #60]	@ (80008c0 <main+0x98>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	1d3a      	adds	r2, r7, #4
 8000888:	4694      	mov	ip, r2
 800088a:	4618      	mov	r0, r3
 800088c:	f000 f81e 	bl	80008cc <average_16.1>
 8000890:	4603      	mov	r3, r0
 8000892:	4a0d      	ldr	r2, [pc, #52]	@ (80008c8 <main+0xa0>)
 8000894:	6013      	str	r3, [r2, #0]
	  displayHEX(adc_val);
 8000896:	4b0a      	ldr	r3, [pc, #40]	@ (80008c0 <main+0x98>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	1d3a      	adds	r2, r7, #4
 800089c:	4694      	mov	ip, r2
 800089e:	4618      	mov	r0, r3
 80008a0:	f000 f846 	bl	8000930 <displayHEX.2>
	  displayLED(adc_val);
 80008a4:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <main+0x98>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	1d3a      	adds	r2, r7, #4
 80008aa:	4694      	mov	ip, r2
 80008ac:	4618      	mov	r0, r3
 80008ae:	f000 f85d 	bl	800096c <displayLED.3>
	  HAL_Delay(400);
 80008b2:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80008b6:	f000 fadd 	bl	8000e74 <HAL_Delay>
	  while(HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK){}
 80008ba:	e7ca      	b.n	8000852 <main+0x2a>
 80008bc:	20000078 	.word	0x20000078
 80008c0:	200000c0 	.word	0x200000c0
 80008c4:	200000c4 	.word	0x200000c4
 80008c8:	200000c8 	.word	0x200000c8

080008cc <average_16.1>:
 uint32_t average_16(uint32_t x){
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	f8c7 c000 	str.w	ip, [r7]
	total += x - samples[i];
 80008d8:	4b12      	ldr	r3, [pc, #72]	@ (8000924 <average_16.1+0x58>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a12      	ldr	r2, [pc, #72]	@ (8000928 <average_16.1+0x5c>)
 80008de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008e2:	687a      	ldr	r2, [r7, #4]
 80008e4:	1ad2      	subs	r2, r2, r3
 80008e6:	4b11      	ldr	r3, [pc, #68]	@ (800092c <average_16.1+0x60>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4413      	add	r3, r2
 80008ec:	4a0f      	ldr	r2, [pc, #60]	@ (800092c <average_16.1+0x60>)
 80008ee:	6013      	str	r3, [r2, #0]
	samples[i] = x;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000924 <average_16.1+0x58>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	490c      	ldr	r1, [pc, #48]	@ (8000928 <average_16.1+0x5c>)
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	i = (i==15 ? 0 : i+1);
 80008fc:	4b09      	ldr	r3, [pc, #36]	@ (8000924 <average_16.1+0x58>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2b0f      	cmp	r3, #15
 8000902:	d003      	beq.n	800090c <average_16.1+0x40>
 8000904:	4b07      	ldr	r3, [pc, #28]	@ (8000924 <average_16.1+0x58>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	3301      	adds	r3, #1
 800090a:	e000      	b.n	800090e <average_16.1+0x42>
 800090c:	2300      	movs	r3, #0
 800090e:	4a05      	ldr	r2, [pc, #20]	@ (8000924 <average_16.1+0x58>)
 8000910:	6013      	str	r3, [r2, #0]
	return total>>4;
 8000912:	4b06      	ldr	r3, [pc, #24]	@ (800092c <average_16.1+0x60>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	091b      	lsrs	r3, r3, #4
}
 8000918:	4618      	mov	r0, r3
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	200000f4 	.word	0x200000f4
 8000928:	200000f8 	.word	0x200000f8
 800092c:	20000138 	.word	0x20000138

08000930 <displayHEX.2>:
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b088      	sub	sp, #32
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	f8c7 c000 	str.w	ip, [r7]
    int len = sprintf(buffer, "0x%08lX\r\n", (unsigned long)value);
 800093c:	f107 030c 	add.w	r3, r7, #12
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	4908      	ldr	r1, [pc, #32]	@ (8000964 <displayHEX.2+0x34>)
 8000944:	4618      	mov	r0, r3
 8000946:	f002 ffef 	bl	8003928 <siprintf>
 800094a:	61f8      	str	r0, [r7, #28]
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, len, 100);
 800094c:	69fb      	ldr	r3, [r7, #28]
 800094e:	b29a      	uxth	r2, r3
 8000950:	f107 010c 	add.w	r1, r7, #12
 8000954:	2364      	movs	r3, #100	@ 0x64
 8000956:	4804      	ldr	r0, [pc, #16]	@ (8000968 <displayHEX.2+0x38>)
 8000958:	f002 fadc 	bl	8002f14 <HAL_UART_Transmit>
}
 800095c:	bf00      	nop
 800095e:	3720      	adds	r7, #32
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	08004280 	.word	0x08004280
 8000968:	20000140 	.word	0x20000140

0800096c <displayLED.3>:
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	f8c7 c000 	str.w	ip, [r7]
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, RESET);
 8000978:	2200      	movs	r2, #0
 800097a:	2104      	movs	r1, #4
 800097c:	481c      	ldr	r0, [pc, #112]	@ (80009f0 <displayLED.3+0x84>)
 800097e:	f001 f9a5 	bl	8001ccc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	2110      	movs	r1, #16
 8000986:	481a      	ldr	r0, [pc, #104]	@ (80009f0 <displayLED.3+0x84>)
 8000988:	f001 f9a0 	bl	8001ccc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	2120      	movs	r1, #32
 8000990:	4817      	ldr	r0, [pc, #92]	@ (80009f0 <displayLED.3+0x84>)
 8000992:	f001 f99b 	bl	8001ccc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	2140      	movs	r1, #64	@ 0x40
 800099a:	4815      	ldr	r0, [pc, #84]	@ (80009f0 <displayLED.3+0x84>)
 800099c:	f001 f996 	bl	8001ccc <HAL_GPIO_WritePin>
	if(value > 100)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2b64      	cmp	r3, #100	@ 0x64
 80009a4:	d904      	bls.n	80009b0 <displayLED.3+0x44>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, SET);
 80009a6:	2201      	movs	r2, #1
 80009a8:	2104      	movs	r1, #4
 80009aa:	4811      	ldr	r0, [pc, #68]	@ (80009f0 <displayLED.3+0x84>)
 80009ac:	f001 f98e 	bl	8001ccc <HAL_GPIO_WritePin>
	if(value > 1000)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80009b6:	d904      	bls.n	80009c2 <displayLED.3+0x56>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, SET);
 80009b8:	2201      	movs	r2, #1
 80009ba:	2110      	movs	r1, #16
 80009bc:	480c      	ldr	r0, [pc, #48]	@ (80009f0 <displayLED.3+0x84>)
 80009be:	f001 f985 	bl	8001ccc <HAL_GPIO_WritePin>
	if(value > 2000)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80009c8:	d904      	bls.n	80009d4 <displayLED.3+0x68>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, SET);
 80009ca:	2201      	movs	r2, #1
 80009cc:	2120      	movs	r1, #32
 80009ce:	4808      	ldr	r0, [pc, #32]	@ (80009f0 <displayLED.3+0x84>)
 80009d0:	f001 f97c 	bl	8001ccc <HAL_GPIO_WritePin>
	if(value > 3000)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80009da:	4293      	cmp	r3, r2
 80009dc:	d904      	bls.n	80009e8 <displayLED.3+0x7c>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, SET);
 80009de:	2201      	movs	r2, #1
 80009e0:	2140      	movs	r1, #64	@ 0x40
 80009e2:	4803      	ldr	r0, [pc, #12]	@ (80009f0 <displayLED.3+0x84>)
 80009e4:	f001 f972 	bl	8001ccc <HAL_GPIO_WritePin>
}
 80009e8:	bf00      	nop
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40021000 	.word	0x40021000

080009f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b094      	sub	sp, #80	@ 0x50
 80009f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	2234      	movs	r2, #52	@ 0x34
 8000a00:	2100      	movs	r1, #0
 8000a02:	4618      	mov	r0, r3
 8000a04:	f002 ffb2 	bl	800396c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a08:	f107 0308 	add.w	r3, r7, #8
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a18:	4b22      	ldr	r3, [pc, #136]	@ (8000aa4 <SystemClock_Config+0xb0>)
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1c:	4a21      	ldr	r2, [pc, #132]	@ (8000aa4 <SystemClock_Config+0xb0>)
 8000a1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a22:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a24:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa4 <SystemClock_Config+0xb0>)
 8000a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a30:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa8 <SystemClock_Config+0xb4>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a38:	4a1b      	ldr	r2, [pc, #108]	@ (8000aa8 <SystemClock_Config+0xb4>)
 8000a3a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a3e:	6013      	str	r3, [r2, #0]
 8000a40:	4b19      	ldr	r3, [pc, #100]	@ (8000aa8 <SystemClock_Config+0xb4>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a50:	2301      	movs	r3, #1
 8000a52:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a54:	2310      	movs	r3, #16
 8000a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5c:	f107 031c 	add.w	r3, r7, #28
 8000a60:	4618      	mov	r0, r3
 8000a62:	f001 f94d 	bl	8001d00 <HAL_RCC_OscConfig>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000a6c:	f000 f84a 	bl	8000b04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a70:	230f      	movs	r3, #15
 8000a72:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a84:	f107 0308 	add.w	r3, r7, #8
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f001 fbe6 	bl	800225c <HAL_RCC_ClockConfig>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a96:	f000 f835 	bl	8000b04 <Error_Handler>
  }
}
 8000a9a:	bf00      	nop
 8000a9c:	3750      	adds	r7, #80	@ 0x50
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40007000 	.word	0x40007000

08000aac <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ab2:	463b      	mov	r3, r7
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000abe:	f000 fee1 	bl	8001884 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000ace:	231f      	movs	r3, #31
 8000ad0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000ad2:	2387      	movs	r3, #135	@ 0x87
 8000ad4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000ada:	2300      	movs	r3, #0
 8000adc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000aea:	2300      	movs	r3, #0
 8000aec:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000aee:	463b      	mov	r3, r7
 8000af0:	4618      	mov	r0, r3
 8000af2:	f000 feff 	bl	80018f4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000af6:	2004      	movs	r0, #4
 8000af8:	f000 fedc 	bl	80018b4 <HAL_MPU_Enable>

}
 8000afc:	bf00      	nop
 8000afe:	3710      	adds	r7, #16
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b08:	b672      	cpsid	i
}
 8000b0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <Error_Handler+0x8>

08000b10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b16:	4b0f      	ldr	r3, [pc, #60]	@ (8000b54 <HAL_MspInit+0x44>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1a:	4a0e      	ldr	r2, [pc, #56]	@ (8000b54 <HAL_MspInit+0x44>)
 8000b1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b20:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b22:	4b0c      	ldr	r3, [pc, #48]	@ (8000b54 <HAL_MspInit+0x44>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2e:	4b09      	ldr	r3, [pc, #36]	@ (8000b54 <HAL_MspInit+0x44>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b32:	4a08      	ldr	r2, [pc, #32]	@ (8000b54 <HAL_MspInit+0x44>)
 8000b34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b38:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b3a:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <HAL_MspInit+0x44>)
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	40023800 	.word	0x40023800

08000b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <NMI_Handler+0x4>

08000b60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <HardFault_Handler+0x4>

08000b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <MemManage_Handler+0x4>

08000b70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <BusFault_Handler+0x4>

08000b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <UsageFault_Handler+0x4>

08000b80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bae:	f000 f941 	bl	8000e34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bc0:	4a14      	ldr	r2, [pc, #80]	@ (8000c14 <_sbrk+0x5c>)
 8000bc2:	4b15      	ldr	r3, [pc, #84]	@ (8000c18 <_sbrk+0x60>)
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bcc:	4b13      	ldr	r3, [pc, #76]	@ (8000c1c <_sbrk+0x64>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d102      	bne.n	8000bda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bd4:	4b11      	ldr	r3, [pc, #68]	@ (8000c1c <_sbrk+0x64>)
 8000bd6:	4a12      	ldr	r2, [pc, #72]	@ (8000c20 <_sbrk+0x68>)
 8000bd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bda:	4b10      	ldr	r3, [pc, #64]	@ (8000c1c <_sbrk+0x64>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4413      	add	r3, r2
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d207      	bcs.n	8000bf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000be8:	f002 fec8 	bl	800397c <__errno>
 8000bec:	4603      	mov	r3, r0
 8000bee:	220c      	movs	r2, #12
 8000bf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf6:	e009      	b.n	8000c0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bf8:	4b08      	ldr	r3, [pc, #32]	@ (8000c1c <_sbrk+0x64>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bfe:	4b07      	ldr	r3, [pc, #28]	@ (8000c1c <_sbrk+0x64>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4413      	add	r3, r2
 8000c06:	4a05      	ldr	r2, [pc, #20]	@ (8000c1c <_sbrk+0x64>)
 8000c08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3718      	adds	r7, #24
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20080000 	.word	0x20080000
 8000c18:	00000400 	.word	0x00000400
 8000c1c:	2000013c 	.word	0x2000013c
 8000c20:	20000318 	.word	0x20000318

08000c24 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c28:	4b06      	ldr	r3, [pc, #24]	@ (8000c44 <SystemInit+0x20>)
 8000c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c2e:	4a05      	ldr	r2, [pc, #20]	@ (8000c44 <SystemInit+0x20>)
 8000c30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c4c:	4b14      	ldr	r3, [pc, #80]	@ (8000ca0 <MX_USART3_UART_Init+0x58>)
 8000c4e:	4a15      	ldr	r2, [pc, #84]	@ (8000ca4 <MX_USART3_UART_Init+0x5c>)
 8000c50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c52:	4b13      	ldr	r3, [pc, #76]	@ (8000ca0 <MX_USART3_UART_Init+0x58>)
 8000c54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ca0 <MX_USART3_UART_Init+0x58>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c60:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca0 <MX_USART3_UART_Init+0x58>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca0 <MX_USART3_UART_Init+0x58>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca0 <MX_USART3_UART_Init+0x58>)
 8000c6e:	220c      	movs	r2, #12
 8000c70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c72:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca0 <MX_USART3_UART_Init+0x58>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c78:	4b09      	ldr	r3, [pc, #36]	@ (8000ca0 <MX_USART3_UART_Init+0x58>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c7e:	4b08      	ldr	r3, [pc, #32]	@ (8000ca0 <MX_USART3_UART_Init+0x58>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c84:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <MX_USART3_UART_Init+0x58>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c8a:	4805      	ldr	r0, [pc, #20]	@ (8000ca0 <MX_USART3_UART_Init+0x58>)
 8000c8c:	f002 f8f4 	bl	8002e78 <HAL_UART_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c96:	f7ff ff35 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000140 	.word	0x20000140
 8000ca4:	40004800 	.word	0x40004800

08000ca8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b0ae      	sub	sp, #184	@ 0xb8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	2290      	movs	r2, #144	@ 0x90
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f002 fe4f 	bl	800396c <memset>
  if(uartHandle->Instance==USART3)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a22      	ldr	r2, [pc, #136]	@ (8000d5c <HAL_UART_MspInit+0xb4>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d13c      	bne.n	8000d52 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cd8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cdc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ce2:	f107 0314 	add.w	r3, r7, #20
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f001 fc9e 	bl	8002628 <HAL_RCCEx_PeriphCLKConfig>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cf2:	f7ff ff07 	bl	8000b04 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cf6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d60 <HAL_UART_MspInit+0xb8>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfa:	4a19      	ldr	r2, [pc, #100]	@ (8000d60 <HAL_UART_MspInit+0xb8>)
 8000cfc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d00:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d02:	4b17      	ldr	r3, [pc, #92]	@ (8000d60 <HAL_UART_MspInit+0xb8>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d0e:	4b14      	ldr	r3, [pc, #80]	@ (8000d60 <HAL_UART_MspInit+0xb8>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	4a13      	ldr	r2, [pc, #76]	@ (8000d60 <HAL_UART_MspInit+0xb8>)
 8000d14:	f043 0308 	orr.w	r3, r3, #8
 8000d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1a:	4b11      	ldr	r3, [pc, #68]	@ (8000d60 <HAL_UART_MspInit+0xb8>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1e:	f003 0308 	and.w	r3, r3, #8
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d26:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d40:	2307      	movs	r3, #7
 8000d42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d46:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4805      	ldr	r0, [pc, #20]	@ (8000d64 <HAL_UART_MspInit+0xbc>)
 8000d4e:	f000 fe11 	bl	8001974 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000d52:	bf00      	nop
 8000d54:	37b8      	adds	r7, #184	@ 0xb8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40004800 	.word	0x40004800
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40020c00 	.word	0x40020c00

08000d68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000da0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d6c:	f7ff ff5a 	bl	8000c24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d70:	480c      	ldr	r0, [pc, #48]	@ (8000da4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d72:	490d      	ldr	r1, [pc, #52]	@ (8000da8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d74:	4a0d      	ldr	r2, [pc, #52]	@ (8000dac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d78:	e002      	b.n	8000d80 <LoopCopyDataInit>

08000d7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7e:	3304      	adds	r3, #4

08000d80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d84:	d3f9      	bcc.n	8000d7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d86:	4a0a      	ldr	r2, [pc, #40]	@ (8000db0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d88:	4c0a      	ldr	r4, [pc, #40]	@ (8000db4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d8c:	e001      	b.n	8000d92 <LoopFillZerobss>

08000d8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d90:	3204      	adds	r2, #4

08000d92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d94:	d3fb      	bcc.n	8000d8e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d96:	f002 fdf7 	bl	8003988 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d9a:	f7ff fd45 	bl	8000828 <main>
  bx  lr    
 8000d9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000da0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000da4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000dac:	080042e8 	.word	0x080042e8
  ldr r2, =_sbss
 8000db0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000db4:	20000314 	.word	0x20000314

08000db8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000db8:	e7fe      	b.n	8000db8 <ADC_IRQHandler>

08000dba <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dbe:	2003      	movs	r0, #3
 8000dc0:	f000 fd2c 	bl	800181c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dc4:	200f      	movs	r0, #15
 8000dc6:	f000 f805 	bl	8000dd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dca:	f7ff fea1 	bl	8000b10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dce:	2300      	movs	r3, #0
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ddc:	4b12      	ldr	r3, [pc, #72]	@ (8000e28 <HAL_InitTick+0x54>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4b12      	ldr	r3, [pc, #72]	@ (8000e2c <HAL_InitTick+0x58>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	4619      	mov	r1, r3
 8000de6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 fd39 	bl	800186a <HAL_SYSTICK_Config>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e00e      	b.n	8000e20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2b0f      	cmp	r3, #15
 8000e06:	d80a      	bhi.n	8000e1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	6879      	ldr	r1, [r7, #4]
 8000e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e10:	f000 fd0f 	bl	8001832 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e14:	4a06      	ldr	r2, [pc, #24]	@ (8000e30 <HAL_InitTick+0x5c>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e000      	b.n	8000e20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000000 	.word	0x20000000
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	20000004 	.word	0x20000004

08000e34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e38:	4b06      	ldr	r3, [pc, #24]	@ (8000e54 <HAL_IncTick+0x20>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <HAL_IncTick+0x24>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4413      	add	r3, r2
 8000e44:	4a04      	ldr	r2, [pc, #16]	@ (8000e58 <HAL_IncTick+0x24>)
 8000e46:	6013      	str	r3, [r2, #0]
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	20000008 	.word	0x20000008
 8000e58:	200001c8 	.word	0x200001c8

08000e5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e60:	4b03      	ldr	r3, [pc, #12]	@ (8000e70 <HAL_GetTick+0x14>)
 8000e62:	681b      	ldr	r3, [r3, #0]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	200001c8 	.word	0x200001c8

08000e74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e7c:	f7ff ffee 	bl	8000e5c <HAL_GetTick>
 8000e80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e8c:	d005      	beq.n	8000e9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb8 <HAL_Delay+0x44>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	461a      	mov	r2, r3
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	4413      	add	r3, r2
 8000e98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e9a:	bf00      	nop
 8000e9c:	f7ff ffde 	bl	8000e5c <HAL_GetTick>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d8f7      	bhi.n	8000e9c <HAL_Delay+0x28>
  {
  }
}
 8000eac:	bf00      	nop
 8000eae:	bf00      	nop
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000008 	.word	0x20000008

08000ebc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d101      	bne.n	8000ed2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e031      	b.n	8000f36 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d109      	bne.n	8000eee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f7ff fbe8 	bl	80006b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef2:	f003 0310 	and.w	r3, r3, #16
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d116      	bne.n	8000f28 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000efe:	4b10      	ldr	r3, [pc, #64]	@ (8000f40 <HAL_ADC_Init+0x84>)
 8000f00:	4013      	ands	r3, r2
 8000f02:	f043 0202 	orr.w	r2, r3, #2
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f000 fada 	bl	80014c4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2200      	movs	r2, #0
 8000f14:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1a:	f023 0303 	bic.w	r3, r3, #3
 8000f1e:	f043 0201 	orr.w	r2, r3, #1
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f26:	e001      	b.n	8000f2c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	ffffeefd 	.word	0xffffeefd

08000f44 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d101      	bne.n	8000f5e <HAL_ADC_Start+0x1a>
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	e0ad      	b.n	80010ba <HAL_ADC_Start+0x176>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2201      	movs	r2, #1
 8000f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	f003 0301 	and.w	r3, r3, #1
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d018      	beq.n	8000fa6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	689a      	ldr	r2, [r3, #8]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f042 0201 	orr.w	r2, r2, #1
 8000f82:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000f84:	4b50      	ldr	r3, [pc, #320]	@ (80010c8 <HAL_ADC_Start+0x184>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a50      	ldr	r2, [pc, #320]	@ (80010cc <HAL_ADC_Start+0x188>)
 8000f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f8e:	0c9a      	lsrs	r2, r3, #18
 8000f90:	4613      	mov	r3, r2
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	4413      	add	r3, r2
 8000f96:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8000f98:	e002      	b.n	8000fa0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d1f9      	bne.n	8000f9a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	f003 0301 	and.w	r3, r3, #1
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d175      	bne.n	80010a0 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fb8:	4b45      	ldr	r3, [pc, #276]	@ (80010d0 <HAL_ADC_Start+0x18c>)
 8000fba:	4013      	ands	r3, r2
 8000fbc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d007      	beq.n	8000fe2 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000fda:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000fee:	d106      	bne.n	8000ffe <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff4:	f023 0206 	bic.w	r2, r3, #6
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	645a      	str	r2, [r3, #68]	@ 0x44
 8000ffc:	e002      	b.n	8001004 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2200      	movs	r2, #0
 8001002:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001014:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001016:	4b2f      	ldr	r3, [pc, #188]	@ (80010d4 <HAL_ADC_Start+0x190>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f003 031f 	and.w	r3, r3, #31
 800101e:	2b00      	cmp	r3, #0
 8001020:	d10f      	bne.n	8001042 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800102c:	2b00      	cmp	r3, #0
 800102e:	d143      	bne.n	80010b8 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	689a      	ldr	r2, [r3, #8]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	e03a      	b.n	80010b8 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a24      	ldr	r2, [pc, #144]	@ (80010d8 <HAL_ADC_Start+0x194>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d10e      	bne.n	800106a <HAL_ADC_Start+0x126>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d107      	bne.n	800106a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	689a      	ldr	r2, [r3, #8]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001068:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800106a:	4b1a      	ldr	r3, [pc, #104]	@ (80010d4 <HAL_ADC_Start+0x190>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f003 0310 	and.w	r3, r3, #16
 8001072:	2b00      	cmp	r3, #0
 8001074:	d120      	bne.n	80010b8 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a18      	ldr	r2, [pc, #96]	@ (80010dc <HAL_ADC_Start+0x198>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d11b      	bne.n	80010b8 <HAL_ADC_Start+0x174>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d114      	bne.n	80010b8 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	689a      	ldr	r2, [r3, #8]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	e00b      	b.n	80010b8 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a4:	f043 0210 	orr.w	r2, r3, #16
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010b0:	f043 0201 	orr.w	r2, r3, #1
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3714      	adds	r7, #20
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	20000000 	.word	0x20000000
 80010cc:	431bde83 	.word	0x431bde83
 80010d0:	fffff8fe 	.word	0xfffff8fe
 80010d4:	40012300 	.word	0x40012300
 80010d8:	40012000 	.word	0x40012000
 80010dc:	40012200 	.word	0x40012200

080010e0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010fc:	d113      	bne.n	8001126 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001108:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800110c:	d10b      	bne.n	8001126 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001112:	f043 0220 	orr.w	r2, r3, #32
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e063      	b.n	80011ee <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001126:	f7ff fe99 	bl	8000e5c <HAL_GetTick>
 800112a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800112c:	e021      	b.n	8001172 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001134:	d01d      	beq.n	8001172 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d007      	beq.n	800114c <HAL_ADC_PollForConversion+0x6c>
 800113c:	f7ff fe8e 	bl	8000e5c <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	683a      	ldr	r2, [r7, #0]
 8001148:	429a      	cmp	r2, r3
 800114a:	d212      	bcs.n	8001172 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	2b02      	cmp	r3, #2
 8001158:	d00b      	beq.n	8001172 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115e:	f043 0204 	orr.w	r2, r3, #4
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2200      	movs	r2, #0
 800116a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e03d      	b.n	80011ee <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 0302 	and.w	r3, r3, #2
 800117c:	2b02      	cmp	r3, #2
 800117e:	d1d6      	bne.n	800112e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f06f 0212 	mvn.w	r2, #18
 8001188:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d123      	bne.n	80011ec <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d11f      	bne.n	80011ec <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011b2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d006      	beq.n	80011c8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d111      	bne.n	80011ec <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d105      	bne.n	80011ec <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e4:	f043 0201 	orr.w	r2, r3, #1
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80011f6:	b480      	push	{r7}
 80011f8:	b083      	sub	sp, #12
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001204:	4618      	mov	r0, r3
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001224:	2b01      	cmp	r3, #1
 8001226:	d101      	bne.n	800122c <HAL_ADC_ConfigChannel+0x1c>
 8001228:	2302      	movs	r3, #2
 800122a:	e13a      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x292>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2201      	movs	r2, #1
 8001230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2b09      	cmp	r3, #9
 800123a:	d93a      	bls.n	80012b2 <HAL_ADC_ConfigChannel+0xa2>
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001244:	d035      	beq.n	80012b2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	68d9      	ldr	r1, [r3, #12]
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	b29b      	uxth	r3, r3
 8001252:	461a      	mov	r2, r3
 8001254:	4613      	mov	r3, r2
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	4413      	add	r3, r2
 800125a:	3b1e      	subs	r3, #30
 800125c:	2207      	movs	r2, #7
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43da      	mvns	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	400a      	ands	r2, r1
 800126a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a8f      	ldr	r2, [pc, #572]	@ (80014b0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d10a      	bne.n	800128c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	68d9      	ldr	r1, [r3, #12]
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	061a      	lsls	r2, r3, #24
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	430a      	orrs	r2, r1
 8001288:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800128a:	e039      	b.n	8001300 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	68d9      	ldr	r1, [r3, #12]
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	689a      	ldr	r2, [r3, #8]
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	b29b      	uxth	r3, r3
 800129c:	4618      	mov	r0, r3
 800129e:	4603      	mov	r3, r0
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	4403      	add	r3, r0
 80012a4:	3b1e      	subs	r3, #30
 80012a6:	409a      	lsls	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	430a      	orrs	r2, r1
 80012ae:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012b0:	e026      	b.n	8001300 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	6919      	ldr	r1, [r3, #16]
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	b29b      	uxth	r3, r3
 80012be:	461a      	mov	r2, r3
 80012c0:	4613      	mov	r3, r2
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	4413      	add	r3, r2
 80012c6:	f003 031f 	and.w	r3, r3, #31
 80012ca:	2207      	movs	r2, #7
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43da      	mvns	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	400a      	ands	r2, r1
 80012d8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	6919      	ldr	r1, [r3, #16]
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	4618      	mov	r0, r3
 80012ec:	4603      	mov	r3, r0
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	4403      	add	r3, r0
 80012f2:	f003 031f 	and.w	r3, r3, #31
 80012f6:	409a      	lsls	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	430a      	orrs	r2, r1
 80012fe:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	2b06      	cmp	r3, #6
 8001306:	d824      	bhi.n	8001352 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685a      	ldr	r2, [r3, #4]
 8001312:	4613      	mov	r3, r2
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	4413      	add	r3, r2
 8001318:	3b05      	subs	r3, #5
 800131a:	221f      	movs	r2, #31
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	43da      	mvns	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	400a      	ands	r2, r1
 8001328:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	b29b      	uxth	r3, r3
 8001336:	4618      	mov	r0, r3
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685a      	ldr	r2, [r3, #4]
 800133c:	4613      	mov	r3, r2
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	4413      	add	r3, r2
 8001342:	3b05      	subs	r3, #5
 8001344:	fa00 f203 	lsl.w	r2, r0, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	430a      	orrs	r2, r1
 800134e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001350:	e04c      	b.n	80013ec <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	2b0c      	cmp	r3, #12
 8001358:	d824      	bhi.n	80013a4 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685a      	ldr	r2, [r3, #4]
 8001364:	4613      	mov	r3, r2
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	4413      	add	r3, r2
 800136a:	3b23      	subs	r3, #35	@ 0x23
 800136c:	221f      	movs	r2, #31
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	43da      	mvns	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	400a      	ands	r2, r1
 800137a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	b29b      	uxth	r3, r3
 8001388:	4618      	mov	r0, r3
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685a      	ldr	r2, [r3, #4]
 800138e:	4613      	mov	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	4413      	add	r3, r2
 8001394:	3b23      	subs	r3, #35	@ 0x23
 8001396:	fa00 f203 	lsl.w	r2, r0, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	430a      	orrs	r2, r1
 80013a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80013a2:	e023      	b.n	80013ec <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685a      	ldr	r2, [r3, #4]
 80013ae:	4613      	mov	r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	4413      	add	r3, r2
 80013b4:	3b41      	subs	r3, #65	@ 0x41
 80013b6:	221f      	movs	r2, #31
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	43da      	mvns	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	400a      	ands	r2, r1
 80013c4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	4618      	mov	r0, r3
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	4613      	mov	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	3b41      	subs	r3, #65	@ 0x41
 80013e0:	fa00 f203 	lsl.w	r2, r0, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	430a      	orrs	r2, r1
 80013ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a30      	ldr	r2, [pc, #192]	@ (80014b4 <HAL_ADC_ConfigChannel+0x2a4>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d10a      	bne.n	800140c <HAL_ADC_ConfigChannel+0x1fc>
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80013fe:	d105      	bne.n	800140c <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001400:	4b2d      	ldr	r3, [pc, #180]	@ (80014b8 <HAL_ADC_ConfigChannel+0x2a8>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	4a2c      	ldr	r2, [pc, #176]	@ (80014b8 <HAL_ADC_ConfigChannel+0x2a8>)
 8001406:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800140a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a28      	ldr	r2, [pc, #160]	@ (80014b4 <HAL_ADC_ConfigChannel+0x2a4>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d10f      	bne.n	8001436 <HAL_ADC_ConfigChannel+0x226>
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b12      	cmp	r3, #18
 800141c:	d10b      	bne.n	8001436 <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800141e:	4b26      	ldr	r3, [pc, #152]	@ (80014b8 <HAL_ADC_ConfigChannel+0x2a8>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	4a25      	ldr	r2, [pc, #148]	@ (80014b8 <HAL_ADC_ConfigChannel+0x2a8>)
 8001424:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001428:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800142a:	4b23      	ldr	r3, [pc, #140]	@ (80014b8 <HAL_ADC_ConfigChannel+0x2a8>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	4a22      	ldr	r2, [pc, #136]	@ (80014b8 <HAL_ADC_ConfigChannel+0x2a8>)
 8001430:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001434:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a1e      	ldr	r2, [pc, #120]	@ (80014b4 <HAL_ADC_ConfigChannel+0x2a4>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d12b      	bne.n	8001498 <HAL_ADC_ConfigChannel+0x288>
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a1a      	ldr	r2, [pc, #104]	@ (80014b0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d003      	beq.n	8001452 <HAL_ADC_ConfigChannel+0x242>
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2b11      	cmp	r3, #17
 8001450:	d122      	bne.n	8001498 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001452:	4b19      	ldr	r3, [pc, #100]	@ (80014b8 <HAL_ADC_ConfigChannel+0x2a8>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	4a18      	ldr	r2, [pc, #96]	@ (80014b8 <HAL_ADC_ConfigChannel+0x2a8>)
 8001458:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800145c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800145e:	4b16      	ldr	r3, [pc, #88]	@ (80014b8 <HAL_ADC_ConfigChannel+0x2a8>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	4a15      	ldr	r2, [pc, #84]	@ (80014b8 <HAL_ADC_ConfigChannel+0x2a8>)
 8001464:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001468:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a10      	ldr	r2, [pc, #64]	@ (80014b0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d111      	bne.n	8001498 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001474:	4b11      	ldr	r3, [pc, #68]	@ (80014bc <HAL_ADC_ConfigChannel+0x2ac>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a11      	ldr	r2, [pc, #68]	@ (80014c0 <HAL_ADC_ConfigChannel+0x2b0>)
 800147a:	fba2 2303 	umull	r2, r3, r2, r3
 800147e:	0c9a      	lsrs	r2, r3, #18
 8001480:	4613      	mov	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4413      	add	r3, r2
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800148a:	e002      	b.n	8001492 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	3b01      	subs	r3, #1
 8001490:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1f9      	bne.n	800148c <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	10000012 	.word	0x10000012
 80014b4:	40012000 	.word	0x40012000
 80014b8:	40012300 	.word	0x40012300
 80014bc:	20000000 	.word	0x20000000
 80014c0:	431bde83 	.word	0x431bde83

080014c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80014cc:	4b78      	ldr	r3, [pc, #480]	@ (80016b0 <ADC_Init+0x1ec>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	4a77      	ldr	r2, [pc, #476]	@ (80016b0 <ADC_Init+0x1ec>)
 80014d2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80014d6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80014d8:	4b75      	ldr	r3, [pc, #468]	@ (80016b0 <ADC_Init+0x1ec>)
 80014da:	685a      	ldr	r2, [r3, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	4973      	ldr	r1, [pc, #460]	@ (80016b0 <ADC_Init+0x1ec>)
 80014e2:	4313      	orrs	r3, r2
 80014e4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80014f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6859      	ldr	r1, [r3, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	691b      	ldr	r3, [r3, #16]
 8001500:	021a      	lsls	r2, r3, #8
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	430a      	orrs	r2, r1
 8001508:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	685a      	ldr	r2, [r3, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001518:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	6859      	ldr	r1, [r3, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689a      	ldr	r2, [r3, #8]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	430a      	orrs	r2, r1
 800152a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	689a      	ldr	r2, [r3, #8]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800153a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6899      	ldr	r1, [r3, #8]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	68da      	ldr	r2, [r3, #12]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	430a      	orrs	r2, r1
 800154c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001552:	4a58      	ldr	r2, [pc, #352]	@ (80016b4 <ADC_Init+0x1f0>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d022      	beq.n	800159e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	689a      	ldr	r2, [r3, #8]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001566:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6899      	ldr	r1, [r3, #8]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	430a      	orrs	r2, r1
 8001578:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	689a      	ldr	r2, [r3, #8]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001588:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	6899      	ldr	r1, [r3, #8]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	430a      	orrs	r2, r1
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	e00f      	b.n	80015be <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	689a      	ldr	r2, [r3, #8]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80015ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	689a      	ldr	r2, [r3, #8]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80015bc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f022 0202 	bic.w	r2, r2, #2
 80015cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6899      	ldr	r1, [r3, #8]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	005a      	lsls	r2, r3, #1
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	430a      	orrs	r2, r1
 80015e0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d01b      	beq.n	8001624 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80015fa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	685a      	ldr	r2, [r3, #4]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800160a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6859      	ldr	r1, [r3, #4]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001616:	3b01      	subs	r3, #1
 8001618:	035a      	lsls	r2, r3, #13
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	430a      	orrs	r2, r1
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	e007      	b.n	8001634 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	685a      	ldr	r2, [r3, #4]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001632:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001642:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	3b01      	subs	r3, #1
 8001650:	051a      	lsls	r2, r3, #20
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	430a      	orrs	r2, r1
 8001658:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001668:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	6899      	ldr	r1, [r3, #8]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001676:	025a      	lsls	r2, r3, #9
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	430a      	orrs	r2, r1
 800167e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	689a      	ldr	r2, [r3, #8]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800168e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6899      	ldr	r1, [r3, #8]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	029a      	lsls	r2, r3, #10
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	430a      	orrs	r2, r1
 80016a2:	609a      	str	r2, [r3, #8]
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	40012300 	.word	0x40012300
 80016b4:	0f000001 	.word	0x0f000001

080016b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c8:	4b0b      	ldr	r3, [pc, #44]	@ (80016f8 <__NVIC_SetPriorityGrouping+0x40>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ce:	68ba      	ldr	r2, [r7, #8]
 80016d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016d4:	4013      	ands	r3, r2
 80016d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016e0:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <__NVIC_SetPriorityGrouping+0x44>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016e6:	4a04      	ldr	r2, [pc, #16]	@ (80016f8 <__NVIC_SetPriorityGrouping+0x40>)
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	60d3      	str	r3, [r2, #12]
}
 80016ec:	bf00      	nop
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	e000ed00 	.word	0xe000ed00
 80016fc:	05fa0000 	.word	0x05fa0000

08001700 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001704:	4b04      	ldr	r3, [pc, #16]	@ (8001718 <__NVIC_GetPriorityGrouping+0x18>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	0a1b      	lsrs	r3, r3, #8
 800170a:	f003 0307 	and.w	r3, r3, #7
}
 800170e:	4618      	mov	r0, r3
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	6039      	str	r1, [r7, #0]
 8001726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172c:	2b00      	cmp	r3, #0
 800172e:	db0a      	blt.n	8001746 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	b2da      	uxtb	r2, r3
 8001734:	490c      	ldr	r1, [pc, #48]	@ (8001768 <__NVIC_SetPriority+0x4c>)
 8001736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173a:	0112      	lsls	r2, r2, #4
 800173c:	b2d2      	uxtb	r2, r2
 800173e:	440b      	add	r3, r1
 8001740:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001744:	e00a      	b.n	800175c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	b2da      	uxtb	r2, r3
 800174a:	4908      	ldr	r1, [pc, #32]	@ (800176c <__NVIC_SetPriority+0x50>)
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	3b04      	subs	r3, #4
 8001754:	0112      	lsls	r2, r2, #4
 8001756:	b2d2      	uxtb	r2, r2
 8001758:	440b      	add	r3, r1
 800175a:	761a      	strb	r2, [r3, #24]
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	e000e100 	.word	0xe000e100
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001770:	b480      	push	{r7}
 8001772:	b089      	sub	sp, #36	@ 0x24
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	f1c3 0307 	rsb	r3, r3, #7
 800178a:	2b04      	cmp	r3, #4
 800178c:	bf28      	it	cs
 800178e:	2304      	movcs	r3, #4
 8001790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3304      	adds	r3, #4
 8001796:	2b06      	cmp	r3, #6
 8001798:	d902      	bls.n	80017a0 <NVIC_EncodePriority+0x30>
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3b03      	subs	r3, #3
 800179e:	e000      	b.n	80017a2 <NVIC_EncodePriority+0x32>
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a4:	f04f 32ff 	mov.w	r2, #4294967295
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43da      	mvns	r2, r3
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	401a      	ands	r2, r3
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b8:	f04f 31ff 	mov.w	r1, #4294967295
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	fa01 f303 	lsl.w	r3, r1, r3
 80017c2:	43d9      	mvns	r1, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c8:	4313      	orrs	r3, r2
         );
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3724      	adds	r7, #36	@ 0x24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
	...

080017d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017e8:	d301      	bcc.n	80017ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ea:	2301      	movs	r3, #1
 80017ec:	e00f      	b.n	800180e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001818 <SysTick_Config+0x40>)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017f6:	210f      	movs	r1, #15
 80017f8:	f04f 30ff 	mov.w	r0, #4294967295
 80017fc:	f7ff ff8e 	bl	800171c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001800:	4b05      	ldr	r3, [pc, #20]	@ (8001818 <SysTick_Config+0x40>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001806:	4b04      	ldr	r3, [pc, #16]	@ (8001818 <SysTick_Config+0x40>)
 8001808:	2207      	movs	r2, #7
 800180a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	e000e010 	.word	0xe000e010

0800181c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7ff ff47 	bl	80016b8 <__NVIC_SetPriorityGrouping>
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001832:	b580      	push	{r7, lr}
 8001834:	b086      	sub	sp, #24
 8001836:	af00      	add	r7, sp, #0
 8001838:	4603      	mov	r3, r0
 800183a:	60b9      	str	r1, [r7, #8]
 800183c:	607a      	str	r2, [r7, #4]
 800183e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001844:	f7ff ff5c 	bl	8001700 <__NVIC_GetPriorityGrouping>
 8001848:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	68b9      	ldr	r1, [r7, #8]
 800184e:	6978      	ldr	r0, [r7, #20]
 8001850:	f7ff ff8e 	bl	8001770 <NVIC_EncodePriority>
 8001854:	4602      	mov	r2, r0
 8001856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185a:	4611      	mov	r1, r2
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ff5d 	bl	800171c <__NVIC_SetPriority>
}
 8001862:	bf00      	nop
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b082      	sub	sp, #8
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7ff ffb0 	bl	80017d8 <SysTick_Config>
 8001878:	4603      	mov	r3, r0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
	...

08001884 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001888:	f3bf 8f5f 	dmb	sy
}
 800188c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800188e:	4b07      	ldr	r3, [pc, #28]	@ (80018ac <HAL_MPU_Disable+0x28>)
 8001890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001892:	4a06      	ldr	r2, [pc, #24]	@ (80018ac <HAL_MPU_Disable+0x28>)
 8001894:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001898:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800189a:	4b05      	ldr	r3, [pc, #20]	@ (80018b0 <HAL_MPU_Disable+0x2c>)
 800189c:	2200      	movs	r2, #0
 800189e:	605a      	str	r2, [r3, #4]
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	e000ed00 	.word	0xe000ed00
 80018b0:	e000ed90 	.word	0xe000ed90

080018b4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80018bc:	4a0b      	ldr	r2, [pc, #44]	@ (80018ec <HAL_MPU_Enable+0x38>)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80018c6:	4b0a      	ldr	r3, [pc, #40]	@ (80018f0 <HAL_MPU_Enable+0x3c>)
 80018c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ca:	4a09      	ldr	r2, [pc, #36]	@ (80018f0 <HAL_MPU_Enable+0x3c>)
 80018cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018d0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80018d2:	f3bf 8f4f 	dsb	sy
}
 80018d6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018d8:	f3bf 8f6f 	isb	sy
}
 80018dc:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	e000ed90 	.word	0xe000ed90
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	785a      	ldrb	r2, [r3, #1]
 8001900:	4b1b      	ldr	r3, [pc, #108]	@ (8001970 <HAL_MPU_ConfigRegion+0x7c>)
 8001902:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001904:	4b1a      	ldr	r3, [pc, #104]	@ (8001970 <HAL_MPU_ConfigRegion+0x7c>)
 8001906:	691b      	ldr	r3, [r3, #16]
 8001908:	4a19      	ldr	r2, [pc, #100]	@ (8001970 <HAL_MPU_ConfigRegion+0x7c>)
 800190a:	f023 0301 	bic.w	r3, r3, #1
 800190e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001910:	4a17      	ldr	r2, [pc, #92]	@ (8001970 <HAL_MPU_ConfigRegion+0x7c>)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	7b1b      	ldrb	r3, [r3, #12]
 800191c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	7adb      	ldrb	r3, [r3, #11]
 8001922:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001924:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	7a9b      	ldrb	r3, [r3, #10]
 800192a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800192c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	7b5b      	ldrb	r3, [r3, #13]
 8001932:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001934:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	7b9b      	ldrb	r3, [r3, #14]
 800193a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800193c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	7bdb      	ldrb	r3, [r3, #15]
 8001942:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001944:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	7a5b      	ldrb	r3, [r3, #9]
 800194a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800194c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	7a1b      	ldrb	r3, [r3, #8]
 8001952:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001954:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	7812      	ldrb	r2, [r2, #0]
 800195a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800195c:	4a04      	ldr	r2, [pc, #16]	@ (8001970 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800195e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001960:	6113      	str	r3, [r2, #16]
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	e000ed90 	.word	0xe000ed90

08001974 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001974:	b480      	push	{r7}
 8001976:	b089      	sub	sp, #36	@ 0x24
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800197e:	2300      	movs	r3, #0
 8001980:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001982:	2300      	movs	r3, #0
 8001984:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001986:	2300      	movs	r3, #0
 8001988:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800198a:	2300      	movs	r3, #0
 800198c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800198e:	2300      	movs	r3, #0
 8001990:	61fb      	str	r3, [r7, #28]
 8001992:	e175      	b.n	8001c80 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001994:	2201      	movs	r2, #1
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	697a      	ldr	r2, [r7, #20]
 80019a4:	4013      	ands	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	f040 8164 	bne.w	8001c7a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f003 0303 	and.w	r3, r3, #3
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d005      	beq.n	80019ca <HAL_GPIO_Init+0x56>
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f003 0303 	and.w	r3, r3, #3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d130      	bne.n	8001a2c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	2203      	movs	r2, #3
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	43db      	mvns	r3, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4013      	ands	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	68da      	ldr	r2, [r3, #12]
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a00:	2201      	movs	r2, #1
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	091b      	lsrs	r3, r3, #4
 8001a16:	f003 0201 	and.w	r2, r3, #1
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 0303 	and.w	r3, r3, #3
 8001a34:	2b03      	cmp	r3, #3
 8001a36:	d017      	beq.n	8001a68 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	2203      	movs	r2, #3
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 0303 	and.w	r3, r3, #3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d123      	bne.n	8001abc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	08da      	lsrs	r2, r3, #3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3208      	adds	r2, #8
 8001a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	f003 0307 	and.w	r3, r3, #7
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	220f      	movs	r2, #15
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	43db      	mvns	r3, r3
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4013      	ands	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	691a      	ldr	r2, [r3, #16]
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	08da      	lsrs	r2, r3, #3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	3208      	adds	r2, #8
 8001ab6:	69b9      	ldr	r1, [r7, #24]
 8001ab8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	2203      	movs	r2, #3
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 0203 	and.w	r2, r3, #3
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	f000 80be 	beq.w	8001c7a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001afe:	4b66      	ldr	r3, [pc, #408]	@ (8001c98 <HAL_GPIO_Init+0x324>)
 8001b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b02:	4a65      	ldr	r2, [pc, #404]	@ (8001c98 <HAL_GPIO_Init+0x324>)
 8001b04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b08:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b0a:	4b63      	ldr	r3, [pc, #396]	@ (8001c98 <HAL_GPIO_Init+0x324>)
 8001b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b16:	4a61      	ldr	r2, [pc, #388]	@ (8001c9c <HAL_GPIO_Init+0x328>)
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	089b      	lsrs	r3, r3, #2
 8001b1c:	3302      	adds	r3, #2
 8001b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	f003 0303 	and.w	r3, r3, #3
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	220f      	movs	r2, #15
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	43db      	mvns	r3, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4013      	ands	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a58      	ldr	r2, [pc, #352]	@ (8001ca0 <HAL_GPIO_Init+0x32c>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d037      	beq.n	8001bb2 <HAL_GPIO_Init+0x23e>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a57      	ldr	r2, [pc, #348]	@ (8001ca4 <HAL_GPIO_Init+0x330>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d031      	beq.n	8001bae <HAL_GPIO_Init+0x23a>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a56      	ldr	r2, [pc, #344]	@ (8001ca8 <HAL_GPIO_Init+0x334>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d02b      	beq.n	8001baa <HAL_GPIO_Init+0x236>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a55      	ldr	r2, [pc, #340]	@ (8001cac <HAL_GPIO_Init+0x338>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d025      	beq.n	8001ba6 <HAL_GPIO_Init+0x232>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a54      	ldr	r2, [pc, #336]	@ (8001cb0 <HAL_GPIO_Init+0x33c>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d01f      	beq.n	8001ba2 <HAL_GPIO_Init+0x22e>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a53      	ldr	r2, [pc, #332]	@ (8001cb4 <HAL_GPIO_Init+0x340>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d019      	beq.n	8001b9e <HAL_GPIO_Init+0x22a>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a52      	ldr	r2, [pc, #328]	@ (8001cb8 <HAL_GPIO_Init+0x344>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d013      	beq.n	8001b9a <HAL_GPIO_Init+0x226>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a51      	ldr	r2, [pc, #324]	@ (8001cbc <HAL_GPIO_Init+0x348>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d00d      	beq.n	8001b96 <HAL_GPIO_Init+0x222>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a50      	ldr	r2, [pc, #320]	@ (8001cc0 <HAL_GPIO_Init+0x34c>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d007      	beq.n	8001b92 <HAL_GPIO_Init+0x21e>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a4f      	ldr	r2, [pc, #316]	@ (8001cc4 <HAL_GPIO_Init+0x350>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d101      	bne.n	8001b8e <HAL_GPIO_Init+0x21a>
 8001b8a:	2309      	movs	r3, #9
 8001b8c:	e012      	b.n	8001bb4 <HAL_GPIO_Init+0x240>
 8001b8e:	230a      	movs	r3, #10
 8001b90:	e010      	b.n	8001bb4 <HAL_GPIO_Init+0x240>
 8001b92:	2308      	movs	r3, #8
 8001b94:	e00e      	b.n	8001bb4 <HAL_GPIO_Init+0x240>
 8001b96:	2307      	movs	r3, #7
 8001b98:	e00c      	b.n	8001bb4 <HAL_GPIO_Init+0x240>
 8001b9a:	2306      	movs	r3, #6
 8001b9c:	e00a      	b.n	8001bb4 <HAL_GPIO_Init+0x240>
 8001b9e:	2305      	movs	r3, #5
 8001ba0:	e008      	b.n	8001bb4 <HAL_GPIO_Init+0x240>
 8001ba2:	2304      	movs	r3, #4
 8001ba4:	e006      	b.n	8001bb4 <HAL_GPIO_Init+0x240>
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e004      	b.n	8001bb4 <HAL_GPIO_Init+0x240>
 8001baa:	2302      	movs	r3, #2
 8001bac:	e002      	b.n	8001bb4 <HAL_GPIO_Init+0x240>
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e000      	b.n	8001bb4 <HAL_GPIO_Init+0x240>
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	69fa      	ldr	r2, [r7, #28]
 8001bb6:	f002 0203 	and.w	r2, r2, #3
 8001bba:	0092      	lsls	r2, r2, #2
 8001bbc:	4093      	lsls	r3, r2
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001bc4:	4935      	ldr	r1, [pc, #212]	@ (8001c9c <HAL_GPIO_Init+0x328>)
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	089b      	lsrs	r3, r3, #2
 8001bca:	3302      	adds	r3, #2
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bd2:	4b3d      	ldr	r3, [pc, #244]	@ (8001cc8 <HAL_GPIO_Init+0x354>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4013      	ands	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bf6:	4a34      	ldr	r2, [pc, #208]	@ (8001cc8 <HAL_GPIO_Init+0x354>)
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bfc:	4b32      	ldr	r3, [pc, #200]	@ (8001cc8 <HAL_GPIO_Init+0x354>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d003      	beq.n	8001c20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c20:	4a29      	ldr	r2, [pc, #164]	@ (8001cc8 <HAL_GPIO_Init+0x354>)
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c26:	4b28      	ldr	r3, [pc, #160]	@ (8001cc8 <HAL_GPIO_Init+0x354>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4013      	ands	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c4a:	4a1f      	ldr	r2, [pc, #124]	@ (8001cc8 <HAL_GPIO_Init+0x354>)
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c50:	4b1d      	ldr	r3, [pc, #116]	@ (8001cc8 <HAL_GPIO_Init+0x354>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d003      	beq.n	8001c74 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c74:	4a14      	ldr	r2, [pc, #80]	@ (8001cc8 <HAL_GPIO_Init+0x354>)
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	61fb      	str	r3, [r7, #28]
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	2b0f      	cmp	r3, #15
 8001c84:	f67f ae86 	bls.w	8001994 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001c88:	bf00      	nop
 8001c8a:	bf00      	nop
 8001c8c:	3724      	adds	r7, #36	@ 0x24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	40013800 	.word	0x40013800
 8001ca0:	40020000 	.word	0x40020000
 8001ca4:	40020400 	.word	0x40020400
 8001ca8:	40020800 	.word	0x40020800
 8001cac:	40020c00 	.word	0x40020c00
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	40021400 	.word	0x40021400
 8001cb8:	40021800 	.word	0x40021800
 8001cbc:	40021c00 	.word	0x40021c00
 8001cc0:	40022000 	.word	0x40022000
 8001cc4:	40022400 	.word	0x40022400
 8001cc8:	40013c00 	.word	0x40013c00

08001ccc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	807b      	strh	r3, [r7, #2]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cdc:	787b      	ldrb	r3, [r7, #1]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ce2:	887a      	ldrh	r2, [r7, #2]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001ce8:	e003      	b.n	8001cf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001cea:	887b      	ldrh	r3, [r7, #2]
 8001cec:	041a      	lsls	r2, r3, #16
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	619a      	str	r2, [r3, #24]
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
	...

08001d00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e29b      	b.n	800224e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f000 8087 	beq.w	8001e32 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d24:	4b96      	ldr	r3, [pc, #600]	@ (8001f80 <HAL_RCC_OscConfig+0x280>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f003 030c 	and.w	r3, r3, #12
 8001d2c:	2b04      	cmp	r3, #4
 8001d2e:	d00c      	beq.n	8001d4a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d30:	4b93      	ldr	r3, [pc, #588]	@ (8001f80 <HAL_RCC_OscConfig+0x280>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f003 030c 	and.w	r3, r3, #12
 8001d38:	2b08      	cmp	r3, #8
 8001d3a:	d112      	bne.n	8001d62 <HAL_RCC_OscConfig+0x62>
 8001d3c:	4b90      	ldr	r3, [pc, #576]	@ (8001f80 <HAL_RCC_OscConfig+0x280>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d48:	d10b      	bne.n	8001d62 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d4a:	4b8d      	ldr	r3, [pc, #564]	@ (8001f80 <HAL_RCC_OscConfig+0x280>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d06c      	beq.n	8001e30 <HAL_RCC_OscConfig+0x130>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d168      	bne.n	8001e30 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e275      	b.n	800224e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d6a:	d106      	bne.n	8001d7a <HAL_RCC_OscConfig+0x7a>
 8001d6c:	4b84      	ldr	r3, [pc, #528]	@ (8001f80 <HAL_RCC_OscConfig+0x280>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a83      	ldr	r2, [pc, #524]	@ (8001f80 <HAL_RCC_OscConfig+0x280>)
 8001d72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d76:	6013      	str	r3, [r2, #0]
 8001d78:	e02e      	b.n	8001dd8 <HAL_RCC_OscConfig+0xd8>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10c      	bne.n	8001d9c <HAL_RCC_OscConfig+0x9c>
 8001d82:	4b7f      	ldr	r3, [pc, #508]	@ (8001f80 <HAL_RCC_OscConfig+0x280>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a7e      	ldr	r2, [pc, #504]	@ (8001f80 <HAL_RCC_OscConfig+0x280>)
 8001d88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	4b7c      	ldr	r3, [pc, #496]	@ (8001f80 <HAL_RCC_OscConfig+0x280>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a7b      	ldr	r2, [pc, #492]	@ (8001f80 <HAL_RCC_OscConfig+0x280>)
 8001d94:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	e01d      	b.n	8001dd8 <HAL_RCC_OscConfig+0xd8>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001da4:	d10c      	bne.n	8001dc0 <HAL_RCC_OscConfig+0xc0>
 8001da6:	4b76      	ldr	r3, [pc, #472]	@ (8001f80 <HAL_RCC_OscConfig+0x280>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a75      	ldr	r2, [pc, #468]	@ (8001f80 <HAL_RCC_OscConfig+0x280>)
 8001dac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001db0:	6013      	str	r3, [r2, #0]
 8001db2:	4b73      	ldr	r3, [pc, #460]	@ (8001f80 <HAL_RCC_OscConfig+0x280>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a72      	ldr	r2, [pc, #456]	@ (8001f80 <HAL_RCC_OscConfig+0x280>)
 8001db8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	e00b      	b.n	8001dd8 <HAL_RCC_OscConfig+0xd8>
 8001dc0:	4b6f      	ldr	r3, [pc, #444]	@ (8001f80 <HAL_RCC_OscConfig+0x280>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a6e      	ldr	r2, [pc, #440]	@ (8001f80 <HAL_RCC_OscConfig+0x280>)
 8001dc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dca:	6013      	str	r3, [r2, #0]
 8001dcc:	4b6c      	ldr	r3, [pc, #432]	@ (8001f80 <HAL_RCC_OscConfig+0x280>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a6b      	ldr	r2, [pc, #428]	@ (8001f80 <HAL_RCC_OscConfig+0x280>)
 8001dd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d013      	beq.n	8001e08 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de0:	f7ff f83c 	bl	8000e5c <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001de8:	f7ff f838 	bl	8000e5c <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b64      	cmp	r3, #100	@ 0x64
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e229      	b.n	800224e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfa:	4b61      	ldr	r3, [pc, #388]	@ (8001f80 <HAL_RCC_OscConfig+0x280>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d0f0      	beq.n	8001de8 <HAL_RCC_OscConfig+0xe8>
 8001e06:	e014      	b.n	8001e32 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e08:	f7ff f828 	bl	8000e5c <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e10:	f7ff f824 	bl	8000e5c <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b64      	cmp	r3, #100	@ 0x64
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e215      	b.n	800224e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e22:	4b57      	ldr	r3, [pc, #348]	@ (8001f80 <HAL_RCC_OscConfig+0x280>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f0      	bne.n	8001e10 <HAL_RCC_OscConfig+0x110>
 8001e2e:	e000      	b.n	8001e32 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d069      	beq.n	8001f12 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e3e:	4b50      	ldr	r3, [pc, #320]	@ (8001f80 <HAL_RCC_OscConfig+0x280>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 030c 	and.w	r3, r3, #12
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00b      	beq.n	8001e62 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e4a:	4b4d      	ldr	r3, [pc, #308]	@ (8001f80 <HAL_RCC_OscConfig+0x280>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 030c 	and.w	r3, r3, #12
 8001e52:	2b08      	cmp	r3, #8
 8001e54:	d11c      	bne.n	8001e90 <HAL_RCC_OscConfig+0x190>
 8001e56:	4b4a      	ldr	r3, [pc, #296]	@ (8001f80 <HAL_RCC_OscConfig+0x280>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d116      	bne.n	8001e90 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e62:	4b47      	ldr	r3, [pc, #284]	@ (8001f80 <HAL_RCC_OscConfig+0x280>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d005      	beq.n	8001e7a <HAL_RCC_OscConfig+0x17a>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d001      	beq.n	8001e7a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e1e9      	b.n	800224e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e7a:	4b41      	ldr	r3, [pc, #260]	@ (8001f80 <HAL_RCC_OscConfig+0x280>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	493d      	ldr	r1, [pc, #244]	@ (8001f80 <HAL_RCC_OscConfig+0x280>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e8e:	e040      	b.n	8001f12 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d023      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e98:	4b39      	ldr	r3, [pc, #228]	@ (8001f80 <HAL_RCC_OscConfig+0x280>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a38      	ldr	r2, [pc, #224]	@ (8001f80 <HAL_RCC_OscConfig+0x280>)
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
 8001ea2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea4:	f7fe ffda 	bl	8000e5c <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eac:	f7fe ffd6 	bl	8000e5c <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e1c7      	b.n	800224e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ebe:	4b30      	ldr	r3, [pc, #192]	@ (8001f80 <HAL_RCC_OscConfig+0x280>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d0f0      	beq.n	8001eac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eca:	4b2d      	ldr	r3, [pc, #180]	@ (8001f80 <HAL_RCC_OscConfig+0x280>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	4929      	ldr	r1, [pc, #164]	@ (8001f80 <HAL_RCC_OscConfig+0x280>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	600b      	str	r3, [r1, #0]
 8001ede:	e018      	b.n	8001f12 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ee0:	4b27      	ldr	r3, [pc, #156]	@ (8001f80 <HAL_RCC_OscConfig+0x280>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a26      	ldr	r2, [pc, #152]	@ (8001f80 <HAL_RCC_OscConfig+0x280>)
 8001ee6:	f023 0301 	bic.w	r3, r3, #1
 8001eea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eec:	f7fe ffb6 	bl	8000e5c <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ef4:	f7fe ffb2 	bl	8000e5c <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e1a3      	b.n	800224e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f06:	4b1e      	ldr	r3, [pc, #120]	@ (8001f80 <HAL_RCC_OscConfig+0x280>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1f0      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0308 	and.w	r3, r3, #8
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d038      	beq.n	8001f90 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d019      	beq.n	8001f5a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f26:	4b16      	ldr	r3, [pc, #88]	@ (8001f80 <HAL_RCC_OscConfig+0x280>)
 8001f28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f2a:	4a15      	ldr	r2, [pc, #84]	@ (8001f80 <HAL_RCC_OscConfig+0x280>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f32:	f7fe ff93 	bl	8000e5c <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f3a:	f7fe ff8f 	bl	8000e5c <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e180      	b.n	800224e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f80 <HAL_RCC_OscConfig+0x280>)
 8001f4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0f0      	beq.n	8001f3a <HAL_RCC_OscConfig+0x23a>
 8001f58:	e01a      	b.n	8001f90 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f5a:	4b09      	ldr	r3, [pc, #36]	@ (8001f80 <HAL_RCC_OscConfig+0x280>)
 8001f5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f5e:	4a08      	ldr	r2, [pc, #32]	@ (8001f80 <HAL_RCC_OscConfig+0x280>)
 8001f60:	f023 0301 	bic.w	r3, r3, #1
 8001f64:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f66:	f7fe ff79 	bl	8000e5c <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f6c:	e00a      	b.n	8001f84 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f6e:	f7fe ff75 	bl	8000e5c <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d903      	bls.n	8001f84 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e166      	b.n	800224e <HAL_RCC_OscConfig+0x54e>
 8001f80:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f84:	4b92      	ldr	r3, [pc, #584]	@ (80021d0 <HAL_RCC_OscConfig+0x4d0>)
 8001f86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1ee      	bne.n	8001f6e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 80a4 	beq.w	80020e6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f9e:	4b8c      	ldr	r3, [pc, #560]	@ (80021d0 <HAL_RCC_OscConfig+0x4d0>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d10d      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001faa:	4b89      	ldr	r3, [pc, #548]	@ (80021d0 <HAL_RCC_OscConfig+0x4d0>)
 8001fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fae:	4a88      	ldr	r2, [pc, #544]	@ (80021d0 <HAL_RCC_OscConfig+0x4d0>)
 8001fb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fb6:	4b86      	ldr	r3, [pc, #536]	@ (80021d0 <HAL_RCC_OscConfig+0x4d0>)
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fbe:	60bb      	str	r3, [r7, #8]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fc6:	4b83      	ldr	r3, [pc, #524]	@ (80021d4 <HAL_RCC_OscConfig+0x4d4>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d118      	bne.n	8002004 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001fd2:	4b80      	ldr	r3, [pc, #512]	@ (80021d4 <HAL_RCC_OscConfig+0x4d4>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a7f      	ldr	r2, [pc, #508]	@ (80021d4 <HAL_RCC_OscConfig+0x4d4>)
 8001fd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fde:	f7fe ff3d 	bl	8000e5c <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fe6:	f7fe ff39 	bl	8000e5c <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b64      	cmp	r3, #100	@ 0x64
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e12a      	b.n	800224e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ff8:	4b76      	ldr	r3, [pc, #472]	@ (80021d4 <HAL_RCC_OscConfig+0x4d4>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002000:	2b00      	cmp	r3, #0
 8002002:	d0f0      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d106      	bne.n	800201a <HAL_RCC_OscConfig+0x31a>
 800200c:	4b70      	ldr	r3, [pc, #448]	@ (80021d0 <HAL_RCC_OscConfig+0x4d0>)
 800200e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002010:	4a6f      	ldr	r2, [pc, #444]	@ (80021d0 <HAL_RCC_OscConfig+0x4d0>)
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	6713      	str	r3, [r2, #112]	@ 0x70
 8002018:	e02d      	b.n	8002076 <HAL_RCC_OscConfig+0x376>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10c      	bne.n	800203c <HAL_RCC_OscConfig+0x33c>
 8002022:	4b6b      	ldr	r3, [pc, #428]	@ (80021d0 <HAL_RCC_OscConfig+0x4d0>)
 8002024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002026:	4a6a      	ldr	r2, [pc, #424]	@ (80021d0 <HAL_RCC_OscConfig+0x4d0>)
 8002028:	f023 0301 	bic.w	r3, r3, #1
 800202c:	6713      	str	r3, [r2, #112]	@ 0x70
 800202e:	4b68      	ldr	r3, [pc, #416]	@ (80021d0 <HAL_RCC_OscConfig+0x4d0>)
 8002030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002032:	4a67      	ldr	r2, [pc, #412]	@ (80021d0 <HAL_RCC_OscConfig+0x4d0>)
 8002034:	f023 0304 	bic.w	r3, r3, #4
 8002038:	6713      	str	r3, [r2, #112]	@ 0x70
 800203a:	e01c      	b.n	8002076 <HAL_RCC_OscConfig+0x376>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	2b05      	cmp	r3, #5
 8002042:	d10c      	bne.n	800205e <HAL_RCC_OscConfig+0x35e>
 8002044:	4b62      	ldr	r3, [pc, #392]	@ (80021d0 <HAL_RCC_OscConfig+0x4d0>)
 8002046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002048:	4a61      	ldr	r2, [pc, #388]	@ (80021d0 <HAL_RCC_OscConfig+0x4d0>)
 800204a:	f043 0304 	orr.w	r3, r3, #4
 800204e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002050:	4b5f      	ldr	r3, [pc, #380]	@ (80021d0 <HAL_RCC_OscConfig+0x4d0>)
 8002052:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002054:	4a5e      	ldr	r2, [pc, #376]	@ (80021d0 <HAL_RCC_OscConfig+0x4d0>)
 8002056:	f043 0301 	orr.w	r3, r3, #1
 800205a:	6713      	str	r3, [r2, #112]	@ 0x70
 800205c:	e00b      	b.n	8002076 <HAL_RCC_OscConfig+0x376>
 800205e:	4b5c      	ldr	r3, [pc, #368]	@ (80021d0 <HAL_RCC_OscConfig+0x4d0>)
 8002060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002062:	4a5b      	ldr	r2, [pc, #364]	@ (80021d0 <HAL_RCC_OscConfig+0x4d0>)
 8002064:	f023 0301 	bic.w	r3, r3, #1
 8002068:	6713      	str	r3, [r2, #112]	@ 0x70
 800206a:	4b59      	ldr	r3, [pc, #356]	@ (80021d0 <HAL_RCC_OscConfig+0x4d0>)
 800206c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800206e:	4a58      	ldr	r2, [pc, #352]	@ (80021d0 <HAL_RCC_OscConfig+0x4d0>)
 8002070:	f023 0304 	bic.w	r3, r3, #4
 8002074:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d015      	beq.n	80020aa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800207e:	f7fe feed 	bl	8000e5c <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002084:	e00a      	b.n	800209c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002086:	f7fe fee9 	bl	8000e5c <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002094:	4293      	cmp	r3, r2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e0d8      	b.n	800224e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800209c:	4b4c      	ldr	r3, [pc, #304]	@ (80021d0 <HAL_RCC_OscConfig+0x4d0>)
 800209e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d0ee      	beq.n	8002086 <HAL_RCC_OscConfig+0x386>
 80020a8:	e014      	b.n	80020d4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020aa:	f7fe fed7 	bl	8000e5c <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020b0:	e00a      	b.n	80020c8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020b2:	f7fe fed3 	bl	8000e5c <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d901      	bls.n	80020c8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e0c2      	b.n	800224e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020c8:	4b41      	ldr	r3, [pc, #260]	@ (80021d0 <HAL_RCC_OscConfig+0x4d0>)
 80020ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1ee      	bne.n	80020b2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020d4:	7dfb      	ldrb	r3, [r7, #23]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d105      	bne.n	80020e6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020da:	4b3d      	ldr	r3, [pc, #244]	@ (80021d0 <HAL_RCC_OscConfig+0x4d0>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020de:	4a3c      	ldr	r2, [pc, #240]	@ (80021d0 <HAL_RCC_OscConfig+0x4d0>)
 80020e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020e4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f000 80ae 	beq.w	800224c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020f0:	4b37      	ldr	r3, [pc, #220]	@ (80021d0 <HAL_RCC_OscConfig+0x4d0>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f003 030c 	and.w	r3, r3, #12
 80020f8:	2b08      	cmp	r3, #8
 80020fa:	d06d      	beq.n	80021d8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	2b02      	cmp	r3, #2
 8002102:	d14b      	bne.n	800219c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002104:	4b32      	ldr	r3, [pc, #200]	@ (80021d0 <HAL_RCC_OscConfig+0x4d0>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a31      	ldr	r2, [pc, #196]	@ (80021d0 <HAL_RCC_OscConfig+0x4d0>)
 800210a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800210e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002110:	f7fe fea4 	bl	8000e5c <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002118:	f7fe fea0 	bl	8000e5c <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e091      	b.n	800224e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800212a:	4b29      	ldr	r3, [pc, #164]	@ (80021d0 <HAL_RCC_OscConfig+0x4d0>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f0      	bne.n	8002118 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	69da      	ldr	r2, [r3, #28]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002144:	019b      	lsls	r3, r3, #6
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800214c:	085b      	lsrs	r3, r3, #1
 800214e:	3b01      	subs	r3, #1
 8002150:	041b      	lsls	r3, r3, #16
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002158:	061b      	lsls	r3, r3, #24
 800215a:	431a      	orrs	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002160:	071b      	lsls	r3, r3, #28
 8002162:	491b      	ldr	r1, [pc, #108]	@ (80021d0 <HAL_RCC_OscConfig+0x4d0>)
 8002164:	4313      	orrs	r3, r2
 8002166:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002168:	4b19      	ldr	r3, [pc, #100]	@ (80021d0 <HAL_RCC_OscConfig+0x4d0>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a18      	ldr	r2, [pc, #96]	@ (80021d0 <HAL_RCC_OscConfig+0x4d0>)
 800216e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002172:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002174:	f7fe fe72 	bl	8000e5c <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800217c:	f7fe fe6e 	bl	8000e5c <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e05f      	b.n	800224e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800218e:	4b10      	ldr	r3, [pc, #64]	@ (80021d0 <HAL_RCC_OscConfig+0x4d0>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d0f0      	beq.n	800217c <HAL_RCC_OscConfig+0x47c>
 800219a:	e057      	b.n	800224c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800219c:	4b0c      	ldr	r3, [pc, #48]	@ (80021d0 <HAL_RCC_OscConfig+0x4d0>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a0b      	ldr	r2, [pc, #44]	@ (80021d0 <HAL_RCC_OscConfig+0x4d0>)
 80021a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a8:	f7fe fe58 	bl	8000e5c <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b0:	f7fe fe54 	bl	8000e5c <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e045      	b.n	800224e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021c2:	4b03      	ldr	r3, [pc, #12]	@ (80021d0 <HAL_RCC_OscConfig+0x4d0>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f0      	bne.n	80021b0 <HAL_RCC_OscConfig+0x4b0>
 80021ce:	e03d      	b.n	800224c <HAL_RCC_OscConfig+0x54c>
 80021d0:	40023800 	.word	0x40023800
 80021d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80021d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002258 <HAL_RCC_OscConfig+0x558>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d030      	beq.n	8002248 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d129      	bne.n	8002248 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021fe:	429a      	cmp	r2, r3
 8002200:	d122      	bne.n	8002248 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002208:	4013      	ands	r3, r2
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800220e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002210:	4293      	cmp	r3, r2
 8002212:	d119      	bne.n	8002248 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800221e:	085b      	lsrs	r3, r3, #1
 8002220:	3b01      	subs	r3, #1
 8002222:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002224:	429a      	cmp	r2, r3
 8002226:	d10f      	bne.n	8002248 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002232:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002234:	429a      	cmp	r2, r3
 8002236:	d107      	bne.n	8002248 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002242:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002244:	429a      	cmp	r2, r3
 8002246:	d001      	beq.n	800224c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e000      	b.n	800224e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40023800 	.word	0x40023800

0800225c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002266:	2300      	movs	r3, #0
 8002268:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e0d0      	b.n	8002416 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002274:	4b6a      	ldr	r3, [pc, #424]	@ (8002420 <HAL_RCC_ClockConfig+0x1c4>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 030f 	and.w	r3, r3, #15
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	429a      	cmp	r2, r3
 8002280:	d910      	bls.n	80022a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002282:	4b67      	ldr	r3, [pc, #412]	@ (8002420 <HAL_RCC_ClockConfig+0x1c4>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f023 020f 	bic.w	r2, r3, #15
 800228a:	4965      	ldr	r1, [pc, #404]	@ (8002420 <HAL_RCC_ClockConfig+0x1c4>)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	4313      	orrs	r3, r2
 8002290:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002292:	4b63      	ldr	r3, [pc, #396]	@ (8002420 <HAL_RCC_ClockConfig+0x1c4>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 030f 	and.w	r3, r3, #15
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	429a      	cmp	r2, r3
 800229e:	d001      	beq.n	80022a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e0b8      	b.n	8002416 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d020      	beq.n	80022f2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0304 	and.w	r3, r3, #4
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d005      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022bc:	4b59      	ldr	r3, [pc, #356]	@ (8002424 <HAL_RCC_ClockConfig+0x1c8>)
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	4a58      	ldr	r2, [pc, #352]	@ (8002424 <HAL_RCC_ClockConfig+0x1c8>)
 80022c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80022c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0308 	and.w	r3, r3, #8
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d005      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022d4:	4b53      	ldr	r3, [pc, #332]	@ (8002424 <HAL_RCC_ClockConfig+0x1c8>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	4a52      	ldr	r2, [pc, #328]	@ (8002424 <HAL_RCC_ClockConfig+0x1c8>)
 80022da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80022de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022e0:	4b50      	ldr	r3, [pc, #320]	@ (8002424 <HAL_RCC_ClockConfig+0x1c8>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	494d      	ldr	r1, [pc, #308]	@ (8002424 <HAL_RCC_ClockConfig+0x1c8>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d040      	beq.n	8002380 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d107      	bne.n	8002316 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002306:	4b47      	ldr	r3, [pc, #284]	@ (8002424 <HAL_RCC_ClockConfig+0x1c8>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d115      	bne.n	800233e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e07f      	b.n	8002416 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	2b02      	cmp	r3, #2
 800231c:	d107      	bne.n	800232e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800231e:	4b41      	ldr	r3, [pc, #260]	@ (8002424 <HAL_RCC_ClockConfig+0x1c8>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d109      	bne.n	800233e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e073      	b.n	8002416 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800232e:	4b3d      	ldr	r3, [pc, #244]	@ (8002424 <HAL_RCC_ClockConfig+0x1c8>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e06b      	b.n	8002416 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800233e:	4b39      	ldr	r3, [pc, #228]	@ (8002424 <HAL_RCC_ClockConfig+0x1c8>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f023 0203 	bic.w	r2, r3, #3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	4936      	ldr	r1, [pc, #216]	@ (8002424 <HAL_RCC_ClockConfig+0x1c8>)
 800234c:	4313      	orrs	r3, r2
 800234e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002350:	f7fe fd84 	bl	8000e5c <HAL_GetTick>
 8002354:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002356:	e00a      	b.n	800236e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002358:	f7fe fd80 	bl	8000e5c <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002366:	4293      	cmp	r3, r2
 8002368:	d901      	bls.n	800236e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e053      	b.n	8002416 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800236e:	4b2d      	ldr	r3, [pc, #180]	@ (8002424 <HAL_RCC_ClockConfig+0x1c8>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f003 020c 	and.w	r2, r3, #12
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	429a      	cmp	r2, r3
 800237e:	d1eb      	bne.n	8002358 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002380:	4b27      	ldr	r3, [pc, #156]	@ (8002420 <HAL_RCC_ClockConfig+0x1c4>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 030f 	and.w	r3, r3, #15
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	429a      	cmp	r2, r3
 800238c:	d210      	bcs.n	80023b0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800238e:	4b24      	ldr	r3, [pc, #144]	@ (8002420 <HAL_RCC_ClockConfig+0x1c4>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f023 020f 	bic.w	r2, r3, #15
 8002396:	4922      	ldr	r1, [pc, #136]	@ (8002420 <HAL_RCC_ClockConfig+0x1c4>)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	4313      	orrs	r3, r2
 800239c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800239e:	4b20      	ldr	r3, [pc, #128]	@ (8002420 <HAL_RCC_ClockConfig+0x1c4>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d001      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e032      	b.n	8002416 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d008      	beq.n	80023ce <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023bc:	4b19      	ldr	r3, [pc, #100]	@ (8002424 <HAL_RCC_ClockConfig+0x1c8>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	4916      	ldr	r1, [pc, #88]	@ (8002424 <HAL_RCC_ClockConfig+0x1c8>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0308 	and.w	r3, r3, #8
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d009      	beq.n	80023ee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023da:	4b12      	ldr	r3, [pc, #72]	@ (8002424 <HAL_RCC_ClockConfig+0x1c8>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	490e      	ldr	r1, [pc, #56]	@ (8002424 <HAL_RCC_ClockConfig+0x1c8>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023ee:	f000 f821 	bl	8002434 <HAL_RCC_GetSysClockFreq>
 80023f2:	4602      	mov	r2, r0
 80023f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002424 <HAL_RCC_ClockConfig+0x1c8>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	091b      	lsrs	r3, r3, #4
 80023fa:	f003 030f 	and.w	r3, r3, #15
 80023fe:	490a      	ldr	r1, [pc, #40]	@ (8002428 <HAL_RCC_ClockConfig+0x1cc>)
 8002400:	5ccb      	ldrb	r3, [r1, r3]
 8002402:	fa22 f303 	lsr.w	r3, r2, r3
 8002406:	4a09      	ldr	r2, [pc, #36]	@ (800242c <HAL_RCC_ClockConfig+0x1d0>)
 8002408:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800240a:	4b09      	ldr	r3, [pc, #36]	@ (8002430 <HAL_RCC_ClockConfig+0x1d4>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f7fe fce0 	bl	8000dd4 <HAL_InitTick>

  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40023c00 	.word	0x40023c00
 8002424:	40023800 	.word	0x40023800
 8002428:	0800428c 	.word	0x0800428c
 800242c:	20000000 	.word	0x20000000
 8002430:	20000004 	.word	0x20000004

08002434 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002434:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002438:	b090      	sub	sp, #64	@ 0x40
 800243a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800243c:	2300      	movs	r3, #0
 800243e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002440:	2300      	movs	r3, #0
 8002442:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002444:	2300      	movs	r3, #0
 8002446:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002448:	2300      	movs	r3, #0
 800244a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800244c:	4b59      	ldr	r3, [pc, #356]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f003 030c 	and.w	r3, r3, #12
 8002454:	2b08      	cmp	r3, #8
 8002456:	d00d      	beq.n	8002474 <HAL_RCC_GetSysClockFreq+0x40>
 8002458:	2b08      	cmp	r3, #8
 800245a:	f200 80a1 	bhi.w	80025a0 <HAL_RCC_GetSysClockFreq+0x16c>
 800245e:	2b00      	cmp	r3, #0
 8002460:	d002      	beq.n	8002468 <HAL_RCC_GetSysClockFreq+0x34>
 8002462:	2b04      	cmp	r3, #4
 8002464:	d003      	beq.n	800246e <HAL_RCC_GetSysClockFreq+0x3a>
 8002466:	e09b      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002468:	4b53      	ldr	r3, [pc, #332]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0x184>)
 800246a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800246c:	e09b      	b.n	80025a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800246e:	4b53      	ldr	r3, [pc, #332]	@ (80025bc <HAL_RCC_GetSysClockFreq+0x188>)
 8002470:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002472:	e098      	b.n	80025a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002474:	4b4f      	ldr	r3, [pc, #316]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800247c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800247e:	4b4d      	ldr	r3, [pc, #308]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d028      	beq.n	80024dc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800248a:	4b4a      	ldr	r3, [pc, #296]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	099b      	lsrs	r3, r3, #6
 8002490:	2200      	movs	r2, #0
 8002492:	623b      	str	r3, [r7, #32]
 8002494:	627a      	str	r2, [r7, #36]	@ 0x24
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800249c:	2100      	movs	r1, #0
 800249e:	4b47      	ldr	r3, [pc, #284]	@ (80025bc <HAL_RCC_GetSysClockFreq+0x188>)
 80024a0:	fb03 f201 	mul.w	r2, r3, r1
 80024a4:	2300      	movs	r3, #0
 80024a6:	fb00 f303 	mul.w	r3, r0, r3
 80024aa:	4413      	add	r3, r2
 80024ac:	4a43      	ldr	r2, [pc, #268]	@ (80025bc <HAL_RCC_GetSysClockFreq+0x188>)
 80024ae:	fba0 1202 	umull	r1, r2, r0, r2
 80024b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80024b4:	460a      	mov	r2, r1
 80024b6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80024b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024ba:	4413      	add	r3, r2
 80024bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024c0:	2200      	movs	r2, #0
 80024c2:	61bb      	str	r3, [r7, #24]
 80024c4:	61fa      	str	r2, [r7, #28]
 80024c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80024ce:	f7fd ff07 	bl	80002e0 <__aeabi_uldivmod>
 80024d2:	4602      	mov	r2, r0
 80024d4:	460b      	mov	r3, r1
 80024d6:	4613      	mov	r3, r2
 80024d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024da:	e053      	b.n	8002584 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024dc:	4b35      	ldr	r3, [pc, #212]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0x180>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	099b      	lsrs	r3, r3, #6
 80024e2:	2200      	movs	r2, #0
 80024e4:	613b      	str	r3, [r7, #16]
 80024e6:	617a      	str	r2, [r7, #20]
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80024ee:	f04f 0b00 	mov.w	fp, #0
 80024f2:	4652      	mov	r2, sl
 80024f4:	465b      	mov	r3, fp
 80024f6:	f04f 0000 	mov.w	r0, #0
 80024fa:	f04f 0100 	mov.w	r1, #0
 80024fe:	0159      	lsls	r1, r3, #5
 8002500:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002504:	0150      	lsls	r0, r2, #5
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	ebb2 080a 	subs.w	r8, r2, sl
 800250e:	eb63 090b 	sbc.w	r9, r3, fp
 8002512:	f04f 0200 	mov.w	r2, #0
 8002516:	f04f 0300 	mov.w	r3, #0
 800251a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800251e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002522:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002526:	ebb2 0408 	subs.w	r4, r2, r8
 800252a:	eb63 0509 	sbc.w	r5, r3, r9
 800252e:	f04f 0200 	mov.w	r2, #0
 8002532:	f04f 0300 	mov.w	r3, #0
 8002536:	00eb      	lsls	r3, r5, #3
 8002538:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800253c:	00e2      	lsls	r2, r4, #3
 800253e:	4614      	mov	r4, r2
 8002540:	461d      	mov	r5, r3
 8002542:	eb14 030a 	adds.w	r3, r4, sl
 8002546:	603b      	str	r3, [r7, #0]
 8002548:	eb45 030b 	adc.w	r3, r5, fp
 800254c:	607b      	str	r3, [r7, #4]
 800254e:	f04f 0200 	mov.w	r2, #0
 8002552:	f04f 0300 	mov.w	r3, #0
 8002556:	e9d7 4500 	ldrd	r4, r5, [r7]
 800255a:	4629      	mov	r1, r5
 800255c:	028b      	lsls	r3, r1, #10
 800255e:	4621      	mov	r1, r4
 8002560:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002564:	4621      	mov	r1, r4
 8002566:	028a      	lsls	r2, r1, #10
 8002568:	4610      	mov	r0, r2
 800256a:	4619      	mov	r1, r3
 800256c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800256e:	2200      	movs	r2, #0
 8002570:	60bb      	str	r3, [r7, #8]
 8002572:	60fa      	str	r2, [r7, #12]
 8002574:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002578:	f7fd feb2 	bl	80002e0 <__aeabi_uldivmod>
 800257c:	4602      	mov	r2, r0
 800257e:	460b      	mov	r3, r1
 8002580:	4613      	mov	r3, r2
 8002582:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002584:	4b0b      	ldr	r3, [pc, #44]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	0c1b      	lsrs	r3, r3, #16
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	3301      	adds	r3, #1
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002594:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002598:	fbb2 f3f3 	udiv	r3, r2, r3
 800259c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800259e:	e002      	b.n	80025a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025a0:	4b05      	ldr	r3, [pc, #20]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0x184>)
 80025a2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80025a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3740      	adds	r7, #64	@ 0x40
 80025ac:	46bd      	mov	sp, r7
 80025ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025b2:	bf00      	nop
 80025b4:	40023800 	.word	0x40023800
 80025b8:	00f42400 	.word	0x00f42400
 80025bc:	017d7840 	.word	0x017d7840

080025c0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025c4:	4b03      	ldr	r3, [pc, #12]	@ (80025d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80025c6:	681b      	ldr	r3, [r3, #0]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	20000000 	.word	0x20000000

080025d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025dc:	f7ff fff0 	bl	80025c0 <HAL_RCC_GetHCLKFreq>
 80025e0:	4602      	mov	r2, r0
 80025e2:	4b05      	ldr	r3, [pc, #20]	@ (80025f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	0a9b      	lsrs	r3, r3, #10
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	4903      	ldr	r1, [pc, #12]	@ (80025fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ee:	5ccb      	ldrb	r3, [r1, r3]
 80025f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40023800 	.word	0x40023800
 80025fc:	0800429c 	.word	0x0800429c

08002600 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002604:	f7ff ffdc 	bl	80025c0 <HAL_RCC_GetHCLKFreq>
 8002608:	4602      	mov	r2, r0
 800260a:	4b05      	ldr	r3, [pc, #20]	@ (8002620 <HAL_RCC_GetPCLK2Freq+0x20>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	0b5b      	lsrs	r3, r3, #13
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	4903      	ldr	r1, [pc, #12]	@ (8002624 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002616:	5ccb      	ldrb	r3, [r1, r3]
 8002618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800261c:	4618      	mov	r0, r3
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40023800 	.word	0x40023800
 8002624:	0800429c 	.word	0x0800429c

08002628 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b088      	sub	sp, #32
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002630:	2300      	movs	r3, #0
 8002632:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002634:	2300      	movs	r3, #0
 8002636:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002638:	2300      	movs	r3, #0
 800263a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800263c:	2300      	movs	r3, #0
 800263e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002640:	2300      	movs	r3, #0
 8002642:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	2b00      	cmp	r3, #0
 800264e:	d012      	beq.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002650:	4b69      	ldr	r3, [pc, #420]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	4a68      	ldr	r2, [pc, #416]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002656:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800265a:	6093      	str	r3, [r2, #8]
 800265c:	4b66      	ldr	r3, [pc, #408]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002664:	4964      	ldr	r1, [pc, #400]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002666:	4313      	orrs	r3, r2
 8002668:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002672:	2301      	movs	r3, #1
 8002674:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d017      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002682:	4b5d      	ldr	r3, [pc, #372]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002684:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002688:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002690:	4959      	ldr	r1, [pc, #356]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002692:	4313      	orrs	r3, r2
 8002694:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800269c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80026a0:	d101      	bne.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80026a2:	2301      	movs	r3, #1
 80026a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80026ae:	2301      	movs	r3, #1
 80026b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d017      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026be:	4b4e      	ldr	r3, [pc, #312]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026c4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026cc:	494a      	ldr	r1, [pc, #296]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026dc:	d101      	bne.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80026de:	2301      	movs	r3, #1
 80026e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80026ea:	2301      	movs	r3, #1
 80026ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80026fa:	2301      	movs	r3, #1
 80026fc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0320 	and.w	r3, r3, #32
 8002706:	2b00      	cmp	r3, #0
 8002708:	f000 808b 	beq.w	8002822 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800270c:	4b3a      	ldr	r3, [pc, #232]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800270e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002710:	4a39      	ldr	r2, [pc, #228]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002712:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002716:	6413      	str	r3, [r2, #64]	@ 0x40
 8002718:	4b37      	ldr	r3, [pc, #220]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800271a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002724:	4b35      	ldr	r3, [pc, #212]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a34      	ldr	r2, [pc, #208]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800272a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800272e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002730:	f7fe fb94 	bl	8000e5c <HAL_GetTick>
 8002734:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002736:	e008      	b.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002738:	f7fe fb90 	bl	8000e5c <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b64      	cmp	r3, #100	@ 0x64
 8002744:	d901      	bls.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e38f      	b.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800274a:	4b2c      	ldr	r3, [pc, #176]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0f0      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002756:	4b28      	ldr	r3, [pc, #160]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800275a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800275e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d035      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800276a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	429a      	cmp	r2, r3
 8002772:	d02e      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002774:	4b20      	ldr	r3, [pc, #128]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002776:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002778:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800277c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800277e:	4b1e      	ldr	r3, [pc, #120]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002782:	4a1d      	ldr	r2, [pc, #116]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002784:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002788:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800278a:	4b1b      	ldr	r3, [pc, #108]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800278c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800278e:	4a1a      	ldr	r2, [pc, #104]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002790:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002794:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002796:	4a18      	ldr	r2, [pc, #96]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800279c:	4b16      	ldr	r3, [pc, #88]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800279e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d114      	bne.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a8:	f7fe fb58 	bl	8000e5c <HAL_GetTick>
 80027ac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ae:	e00a      	b.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027b0:	f7fe fb54 	bl	8000e5c <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027be:	4293      	cmp	r3, r2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e351      	b.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027c6:	4b0c      	ldr	r3, [pc, #48]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d0ee      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80027de:	d111      	bne.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80027e0:	4b05      	ldr	r3, [pc, #20]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80027ec:	4b04      	ldr	r3, [pc, #16]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80027ee:	400b      	ands	r3, r1
 80027f0:	4901      	ldr	r1, [pc, #4]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	608b      	str	r3, [r1, #8]
 80027f6:	e00b      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80027f8:	40023800 	.word	0x40023800
 80027fc:	40007000 	.word	0x40007000
 8002800:	0ffffcff 	.word	0x0ffffcff
 8002804:	4bac      	ldr	r3, [pc, #688]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	4aab      	ldr	r2, [pc, #684]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800280a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800280e:	6093      	str	r3, [r2, #8]
 8002810:	4ba9      	ldr	r3, [pc, #676]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002812:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002818:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800281c:	49a6      	ldr	r1, [pc, #664]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800281e:	4313      	orrs	r3, r2
 8002820:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0310 	and.w	r3, r3, #16
 800282a:	2b00      	cmp	r3, #0
 800282c:	d010      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800282e:	4ba2      	ldr	r3, [pc, #648]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002830:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002834:	4aa0      	ldr	r2, [pc, #640]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002836:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800283a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800283e:	4b9e      	ldr	r3, [pc, #632]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002840:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002848:	499b      	ldr	r1, [pc, #620]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800284a:	4313      	orrs	r3, r2
 800284c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00a      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800285c:	4b96      	ldr	r3, [pc, #600]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800285e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002862:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800286a:	4993      	ldr	r1, [pc, #588]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800286c:	4313      	orrs	r3, r2
 800286e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00a      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800287e:	4b8e      	ldr	r3, [pc, #568]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002880:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002884:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800288c:	498a      	ldr	r1, [pc, #552]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800288e:	4313      	orrs	r3, r2
 8002890:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00a      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028a0:	4b85      	ldr	r3, [pc, #532]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028ae:	4982      	ldr	r1, [pc, #520]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00a      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80028c2:	4b7d      	ldr	r3, [pc, #500]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028c8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d0:	4979      	ldr	r1, [pc, #484]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00a      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028e4:	4b74      	ldr	r3, [pc, #464]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028ea:	f023 0203 	bic.w	r2, r3, #3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f2:	4971      	ldr	r1, [pc, #452]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00a      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002906:	4b6c      	ldr	r3, [pc, #432]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002908:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800290c:	f023 020c 	bic.w	r2, r3, #12
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002914:	4968      	ldr	r1, [pc, #416]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002916:	4313      	orrs	r3, r2
 8002918:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00a      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002928:	4b63      	ldr	r3, [pc, #396]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800292a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800292e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002936:	4960      	ldr	r1, [pc, #384]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002938:	4313      	orrs	r3, r2
 800293a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00a      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800294a:	4b5b      	ldr	r3, [pc, #364]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800294c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002950:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002958:	4957      	ldr	r1, [pc, #348]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800295a:	4313      	orrs	r3, r2
 800295c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00a      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800296c:	4b52      	ldr	r3, [pc, #328]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800296e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002972:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800297a:	494f      	ldr	r1, [pc, #316]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800297c:	4313      	orrs	r3, r2
 800297e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00a      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800298e:	4b4a      	ldr	r3, [pc, #296]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002990:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002994:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800299c:	4946      	ldr	r1, [pc, #280]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00a      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80029b0:	4b41      	ldr	r3, [pc, #260]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029b6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029be:	493e      	ldr	r1, [pc, #248]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00a      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80029d2:	4b39      	ldr	r3, [pc, #228]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029d8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029e0:	4935      	ldr	r1, [pc, #212]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00a      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80029f4:	4b30      	ldr	r3, [pc, #192]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029fa:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a02:	492d      	ldr	r1, [pc, #180]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d011      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002a16:	4b28      	ldr	r3, [pc, #160]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a1c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a24:	4924      	ldr	r1, [pc, #144]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a34:	d101      	bne.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002a36:	2301      	movs	r3, #1
 8002a38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002a46:	2301      	movs	r3, #1
 8002a48:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00a      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a56:	4b18      	ldr	r3, [pc, #96]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a5c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a64:	4914      	ldr	r1, [pc, #80]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00b      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a78:	4b0f      	ldr	r3, [pc, #60]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a7e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a88:	490b      	ldr	r1, [pc, #44]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00f      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002a9c:	4b06      	ldr	r3, [pc, #24]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aa2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002aac:	4902      	ldr	r1, [pc, #8]	@ (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002ab4:	e002      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002ab6:	bf00      	nop
 8002ab8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00b      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ac8:	4b8a      	ldr	r3, [pc, #552]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002aca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ace:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ad8:	4986      	ldr	r1, [pc, #536]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00b      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002aec:	4b81      	ldr	r3, [pc, #516]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002aee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002af2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002afc:	497d      	ldr	r1, [pc, #500]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d006      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f000 80d6 	beq.w	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b18:	4b76      	ldr	r3, [pc, #472]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a75      	ldr	r2, [pc, #468]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b1e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002b22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b24:	f7fe f99a 	bl	8000e5c <HAL_GetTick>
 8002b28:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b2c:	f7fe f996 	bl	8000e5c <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b64      	cmp	r3, #100	@ 0x64
 8002b38:	d901      	bls.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e195      	b.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b3e:	4b6d      	ldr	r3, [pc, #436]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f0      	bne.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d021      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d11d      	bne.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b5e:	4b65      	ldr	r3, [pc, #404]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b64:	0c1b      	lsrs	r3, r3, #16
 8002b66:	f003 0303 	and.w	r3, r3, #3
 8002b6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b6c:	4b61      	ldr	r3, [pc, #388]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b72:	0e1b      	lsrs	r3, r3, #24
 8002b74:	f003 030f 	and.w	r3, r3, #15
 8002b78:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	019a      	lsls	r2, r3, #6
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	041b      	lsls	r3, r3, #16
 8002b84:	431a      	orrs	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	061b      	lsls	r3, r3, #24
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	071b      	lsls	r3, r3, #28
 8002b92:	4958      	ldr	r1, [pc, #352]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d004      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002baa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002bae:	d00a      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d02e      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bc4:	d129      	bne.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002bc6:	4b4b      	ldr	r3, [pc, #300]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bcc:	0c1b      	lsrs	r3, r3, #16
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002bd4:	4b47      	ldr	r3, [pc, #284]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bda:	0f1b      	lsrs	r3, r3, #28
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	019a      	lsls	r2, r3, #6
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	041b      	lsls	r3, r3, #16
 8002bec:	431a      	orrs	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	061b      	lsls	r3, r3, #24
 8002bf4:	431a      	orrs	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	071b      	lsls	r3, r3, #28
 8002bfa:	493e      	ldr	r1, [pc, #248]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002c02:	4b3c      	ldr	r3, [pc, #240]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c08:	f023 021f 	bic.w	r2, r3, #31
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c10:	3b01      	subs	r3, #1
 8002c12:	4938      	ldr	r1, [pc, #224]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d01d      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c26:	4b33      	ldr	r3, [pc, #204]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c2c:	0e1b      	lsrs	r3, r3, #24
 8002c2e:	f003 030f 	and.w	r3, r3, #15
 8002c32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c34:	4b2f      	ldr	r3, [pc, #188]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c3a:	0f1b      	lsrs	r3, r3, #28
 8002c3c:	f003 0307 	and.w	r3, r3, #7
 8002c40:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	019a      	lsls	r2, r3, #6
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	041b      	lsls	r3, r3, #16
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	061b      	lsls	r3, r3, #24
 8002c54:	431a      	orrs	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	071b      	lsls	r3, r3, #28
 8002c5a:	4926      	ldr	r1, [pc, #152]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d011      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	019a      	lsls	r2, r3, #6
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	041b      	lsls	r3, r3, #16
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	061b      	lsls	r3, r3, #24
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	071b      	lsls	r3, r3, #28
 8002c8a:	491a      	ldr	r1, [pc, #104]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002c92:	4b18      	ldr	r3, [pc, #96]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a17      	ldr	r2, [pc, #92]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c98:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002c9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c9e:	f7fe f8dd 	bl	8000e5c <HAL_GetTick>
 8002ca2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ca4:	e008      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ca6:	f7fe f8d9 	bl	8000e5c <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b64      	cmp	r3, #100	@ 0x64
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e0d8      	b.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cb8:	4b0e      	ldr	r3, [pc, #56]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0f0      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	f040 80ce 	bne.w	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002ccc:	4b09      	ldr	r3, [pc, #36]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a08      	ldr	r2, [pc, #32]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cd8:	f7fe f8c0 	bl	8000e5c <HAL_GetTick>
 8002cdc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002cde:	e00b      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ce0:	f7fe f8bc 	bl	8000e5c <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b64      	cmp	r3, #100	@ 0x64
 8002cec:	d904      	bls.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e0bb      	b.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002cf2:	bf00      	nop
 8002cf4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002cf8:	4b5e      	ldr	r3, [pc, #376]	@ (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d04:	d0ec      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d003      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d009      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d02e      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d12a      	bne.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002d2e:	4b51      	ldr	r3, [pc, #324]	@ (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d34:	0c1b      	lsrs	r3, r3, #16
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d3c:	4b4d      	ldr	r3, [pc, #308]	@ (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d42:	0f1b      	lsrs	r3, r3, #28
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	019a      	lsls	r2, r3, #6
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	041b      	lsls	r3, r3, #16
 8002d54:	431a      	orrs	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	061b      	lsls	r3, r3, #24
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	071b      	lsls	r3, r3, #28
 8002d62:	4944      	ldr	r1, [pc, #272]	@ (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002d6a:	4b42      	ldr	r3, [pc, #264]	@ (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d70:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	021b      	lsls	r3, r3, #8
 8002d7c:	493d      	ldr	r1, [pc, #244]	@ (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d022      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d98:	d11d      	bne.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d9a:	4b36      	ldr	r3, [pc, #216]	@ (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002da0:	0e1b      	lsrs	r3, r3, #24
 8002da2:	f003 030f 	and.w	r3, r3, #15
 8002da6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002da8:	4b32      	ldr	r3, [pc, #200]	@ (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dae:	0f1b      	lsrs	r3, r3, #28
 8002db0:	f003 0307 	and.w	r3, r3, #7
 8002db4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	019a      	lsls	r2, r3, #6
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	041b      	lsls	r3, r3, #16
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	061b      	lsls	r3, r3, #24
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	071b      	lsls	r3, r3, #28
 8002dce:	4929      	ldr	r1, [pc, #164]	@ (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0308 	and.w	r3, r3, #8
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d028      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002de2:	4b24      	ldr	r3, [pc, #144]	@ (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002de8:	0e1b      	lsrs	r3, r3, #24
 8002dea:	f003 030f 	and.w	r3, r3, #15
 8002dee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002df0:	4b20      	ldr	r3, [pc, #128]	@ (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002df6:	0c1b      	lsrs	r3, r3, #16
 8002df8:	f003 0303 	and.w	r3, r3, #3
 8002dfc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	019a      	lsls	r2, r3, #6
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	041b      	lsls	r3, r3, #16
 8002e08:	431a      	orrs	r2, r3
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	061b      	lsls	r3, r3, #24
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	69db      	ldr	r3, [r3, #28]
 8002e14:	071b      	lsls	r3, r3, #28
 8002e16:	4917      	ldr	r1, [pc, #92]	@ (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002e1e:	4b15      	ldr	r3, [pc, #84]	@ (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e24:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e2c:	4911      	ldr	r1, [pc, #68]	@ (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002e34:	4b0f      	ldr	r3, [pc, #60]	@ (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a0e      	ldr	r2, [pc, #56]	@ (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e40:	f7fe f80c 	bl	8000e5c <HAL_GetTick>
 8002e44:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e46:	e008      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e48:	f7fe f808 	bl	8000e5c <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b64      	cmp	r3, #100	@ 0x64
 8002e54:	d901      	bls.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e007      	b.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e5a:	4b06      	ldr	r3, [pc, #24]	@ (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e66:	d1ef      	bne.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3720      	adds	r7, #32
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	40023800 	.word	0x40023800

08002e78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e040      	b.n	8002f0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d106      	bne.n	8002ea0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7fd ff04 	bl	8000ca8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2224      	movs	r2, #36	@ 0x24
 8002ea4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0201 	bic.w	r2, r2, #1
 8002eb4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d002      	beq.n	8002ec4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 fb16 	bl	80034f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 f8af 	bl	8003028 <UART_SetConfig>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d101      	bne.n	8002ed4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e01b      	b.n	8002f0c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ee2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689a      	ldr	r2, [r3, #8]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ef2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f042 0201 	orr.w	r2, r2, #1
 8002f02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 fb95 	bl	8003634 <UART_CheckIdleState>
 8002f0a:	4603      	mov	r3, r0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b08a      	sub	sp, #40	@ 0x28
 8002f18:	af02      	add	r7, sp, #8
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	603b      	str	r3, [r7, #0]
 8002f20:	4613      	mov	r3, r2
 8002f22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f28:	2b20      	cmp	r3, #32
 8002f2a:	d177      	bne.n	800301c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d002      	beq.n	8002f38 <HAL_UART_Transmit+0x24>
 8002f32:	88fb      	ldrh	r3, [r7, #6]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e070      	b.n	800301e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2221      	movs	r2, #33	@ 0x21
 8002f48:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f4a:	f7fd ff87 	bl	8000e5c <HAL_GetTick>
 8002f4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	88fa      	ldrh	r2, [r7, #6]
 8002f54:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	88fa      	ldrh	r2, [r7, #6]
 8002f5c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f68:	d108      	bne.n	8002f7c <HAL_UART_Transmit+0x68>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d104      	bne.n	8002f7c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002f72:	2300      	movs	r3, #0
 8002f74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	61bb      	str	r3, [r7, #24]
 8002f7a:	e003      	b.n	8002f84 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f80:	2300      	movs	r3, #0
 8002f82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f84:	e02f      	b.n	8002fe6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	2180      	movs	r1, #128	@ 0x80
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f000 fbf7 	bl	8003784 <UART_WaitOnFlagUntilTimeout>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d004      	beq.n	8002fa6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e03b      	b.n	800301e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10b      	bne.n	8002fc4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	881b      	ldrh	r3, [r3, #0]
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fba:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	3302      	adds	r3, #2
 8002fc0:	61bb      	str	r3, [r7, #24]
 8002fc2:	e007      	b.n	8002fd4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	781a      	ldrb	r2, [r3, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1c9      	bne.n	8002f86 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	2140      	movs	r1, #64	@ 0x40
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f000 fbc1 	bl	8003784 <UART_WaitOnFlagUntilTimeout>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d004      	beq.n	8003012 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2220      	movs	r2, #32
 800300c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e005      	b.n	800301e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2220      	movs	r2, #32
 8003016:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003018:	2300      	movs	r3, #0
 800301a:	e000      	b.n	800301e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800301c:	2302      	movs	r3, #2
  }
}
 800301e:	4618      	mov	r0, r3
 8003020:	3720      	adds	r7, #32
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
	...

08003028 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b088      	sub	sp, #32
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003030:	2300      	movs	r3, #0
 8003032:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	431a      	orrs	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	431a      	orrs	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	69db      	ldr	r3, [r3, #28]
 8003048:	4313      	orrs	r3, r2
 800304a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	4ba6      	ldr	r3, [pc, #664]	@ (80032ec <UART_SetConfig+0x2c4>)
 8003054:	4013      	ands	r3, r2
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6812      	ldr	r2, [r2, #0]
 800305a:	6979      	ldr	r1, [r7, #20]
 800305c:	430b      	orrs	r3, r1
 800305e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68da      	ldr	r2, [r3, #12]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	430a      	orrs	r2, r1
 8003074:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	4313      	orrs	r3, r2
 8003084:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	430a      	orrs	r2, r1
 8003098:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a94      	ldr	r2, [pc, #592]	@ (80032f0 <UART_SetConfig+0x2c8>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d120      	bne.n	80030e6 <UART_SetConfig+0xbe>
 80030a4:	4b93      	ldr	r3, [pc, #588]	@ (80032f4 <UART_SetConfig+0x2cc>)
 80030a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030aa:	f003 0303 	and.w	r3, r3, #3
 80030ae:	2b03      	cmp	r3, #3
 80030b0:	d816      	bhi.n	80030e0 <UART_SetConfig+0xb8>
 80030b2:	a201      	add	r2, pc, #4	@ (adr r2, 80030b8 <UART_SetConfig+0x90>)
 80030b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b8:	080030c9 	.word	0x080030c9
 80030bc:	080030d5 	.word	0x080030d5
 80030c0:	080030cf 	.word	0x080030cf
 80030c4:	080030db 	.word	0x080030db
 80030c8:	2301      	movs	r3, #1
 80030ca:	77fb      	strb	r3, [r7, #31]
 80030cc:	e150      	b.n	8003370 <UART_SetConfig+0x348>
 80030ce:	2302      	movs	r3, #2
 80030d0:	77fb      	strb	r3, [r7, #31]
 80030d2:	e14d      	b.n	8003370 <UART_SetConfig+0x348>
 80030d4:	2304      	movs	r3, #4
 80030d6:	77fb      	strb	r3, [r7, #31]
 80030d8:	e14a      	b.n	8003370 <UART_SetConfig+0x348>
 80030da:	2308      	movs	r3, #8
 80030dc:	77fb      	strb	r3, [r7, #31]
 80030de:	e147      	b.n	8003370 <UART_SetConfig+0x348>
 80030e0:	2310      	movs	r3, #16
 80030e2:	77fb      	strb	r3, [r7, #31]
 80030e4:	e144      	b.n	8003370 <UART_SetConfig+0x348>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a83      	ldr	r2, [pc, #524]	@ (80032f8 <UART_SetConfig+0x2d0>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d132      	bne.n	8003156 <UART_SetConfig+0x12e>
 80030f0:	4b80      	ldr	r3, [pc, #512]	@ (80032f4 <UART_SetConfig+0x2cc>)
 80030f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030f6:	f003 030c 	and.w	r3, r3, #12
 80030fa:	2b0c      	cmp	r3, #12
 80030fc:	d828      	bhi.n	8003150 <UART_SetConfig+0x128>
 80030fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003104 <UART_SetConfig+0xdc>)
 8003100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003104:	08003139 	.word	0x08003139
 8003108:	08003151 	.word	0x08003151
 800310c:	08003151 	.word	0x08003151
 8003110:	08003151 	.word	0x08003151
 8003114:	08003145 	.word	0x08003145
 8003118:	08003151 	.word	0x08003151
 800311c:	08003151 	.word	0x08003151
 8003120:	08003151 	.word	0x08003151
 8003124:	0800313f 	.word	0x0800313f
 8003128:	08003151 	.word	0x08003151
 800312c:	08003151 	.word	0x08003151
 8003130:	08003151 	.word	0x08003151
 8003134:	0800314b 	.word	0x0800314b
 8003138:	2300      	movs	r3, #0
 800313a:	77fb      	strb	r3, [r7, #31]
 800313c:	e118      	b.n	8003370 <UART_SetConfig+0x348>
 800313e:	2302      	movs	r3, #2
 8003140:	77fb      	strb	r3, [r7, #31]
 8003142:	e115      	b.n	8003370 <UART_SetConfig+0x348>
 8003144:	2304      	movs	r3, #4
 8003146:	77fb      	strb	r3, [r7, #31]
 8003148:	e112      	b.n	8003370 <UART_SetConfig+0x348>
 800314a:	2308      	movs	r3, #8
 800314c:	77fb      	strb	r3, [r7, #31]
 800314e:	e10f      	b.n	8003370 <UART_SetConfig+0x348>
 8003150:	2310      	movs	r3, #16
 8003152:	77fb      	strb	r3, [r7, #31]
 8003154:	e10c      	b.n	8003370 <UART_SetConfig+0x348>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a68      	ldr	r2, [pc, #416]	@ (80032fc <UART_SetConfig+0x2d4>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d120      	bne.n	80031a2 <UART_SetConfig+0x17a>
 8003160:	4b64      	ldr	r3, [pc, #400]	@ (80032f4 <UART_SetConfig+0x2cc>)
 8003162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003166:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800316a:	2b30      	cmp	r3, #48	@ 0x30
 800316c:	d013      	beq.n	8003196 <UART_SetConfig+0x16e>
 800316e:	2b30      	cmp	r3, #48	@ 0x30
 8003170:	d814      	bhi.n	800319c <UART_SetConfig+0x174>
 8003172:	2b20      	cmp	r3, #32
 8003174:	d009      	beq.n	800318a <UART_SetConfig+0x162>
 8003176:	2b20      	cmp	r3, #32
 8003178:	d810      	bhi.n	800319c <UART_SetConfig+0x174>
 800317a:	2b00      	cmp	r3, #0
 800317c:	d002      	beq.n	8003184 <UART_SetConfig+0x15c>
 800317e:	2b10      	cmp	r3, #16
 8003180:	d006      	beq.n	8003190 <UART_SetConfig+0x168>
 8003182:	e00b      	b.n	800319c <UART_SetConfig+0x174>
 8003184:	2300      	movs	r3, #0
 8003186:	77fb      	strb	r3, [r7, #31]
 8003188:	e0f2      	b.n	8003370 <UART_SetConfig+0x348>
 800318a:	2302      	movs	r3, #2
 800318c:	77fb      	strb	r3, [r7, #31]
 800318e:	e0ef      	b.n	8003370 <UART_SetConfig+0x348>
 8003190:	2304      	movs	r3, #4
 8003192:	77fb      	strb	r3, [r7, #31]
 8003194:	e0ec      	b.n	8003370 <UART_SetConfig+0x348>
 8003196:	2308      	movs	r3, #8
 8003198:	77fb      	strb	r3, [r7, #31]
 800319a:	e0e9      	b.n	8003370 <UART_SetConfig+0x348>
 800319c:	2310      	movs	r3, #16
 800319e:	77fb      	strb	r3, [r7, #31]
 80031a0:	e0e6      	b.n	8003370 <UART_SetConfig+0x348>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a56      	ldr	r2, [pc, #344]	@ (8003300 <UART_SetConfig+0x2d8>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d120      	bne.n	80031ee <UART_SetConfig+0x1c6>
 80031ac:	4b51      	ldr	r3, [pc, #324]	@ (80032f4 <UART_SetConfig+0x2cc>)
 80031ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031b2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80031b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80031b8:	d013      	beq.n	80031e2 <UART_SetConfig+0x1ba>
 80031ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80031bc:	d814      	bhi.n	80031e8 <UART_SetConfig+0x1c0>
 80031be:	2b80      	cmp	r3, #128	@ 0x80
 80031c0:	d009      	beq.n	80031d6 <UART_SetConfig+0x1ae>
 80031c2:	2b80      	cmp	r3, #128	@ 0x80
 80031c4:	d810      	bhi.n	80031e8 <UART_SetConfig+0x1c0>
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d002      	beq.n	80031d0 <UART_SetConfig+0x1a8>
 80031ca:	2b40      	cmp	r3, #64	@ 0x40
 80031cc:	d006      	beq.n	80031dc <UART_SetConfig+0x1b4>
 80031ce:	e00b      	b.n	80031e8 <UART_SetConfig+0x1c0>
 80031d0:	2300      	movs	r3, #0
 80031d2:	77fb      	strb	r3, [r7, #31]
 80031d4:	e0cc      	b.n	8003370 <UART_SetConfig+0x348>
 80031d6:	2302      	movs	r3, #2
 80031d8:	77fb      	strb	r3, [r7, #31]
 80031da:	e0c9      	b.n	8003370 <UART_SetConfig+0x348>
 80031dc:	2304      	movs	r3, #4
 80031de:	77fb      	strb	r3, [r7, #31]
 80031e0:	e0c6      	b.n	8003370 <UART_SetConfig+0x348>
 80031e2:	2308      	movs	r3, #8
 80031e4:	77fb      	strb	r3, [r7, #31]
 80031e6:	e0c3      	b.n	8003370 <UART_SetConfig+0x348>
 80031e8:	2310      	movs	r3, #16
 80031ea:	77fb      	strb	r3, [r7, #31]
 80031ec:	e0c0      	b.n	8003370 <UART_SetConfig+0x348>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a44      	ldr	r2, [pc, #272]	@ (8003304 <UART_SetConfig+0x2dc>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d125      	bne.n	8003244 <UART_SetConfig+0x21c>
 80031f8:	4b3e      	ldr	r3, [pc, #248]	@ (80032f4 <UART_SetConfig+0x2cc>)
 80031fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003202:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003206:	d017      	beq.n	8003238 <UART_SetConfig+0x210>
 8003208:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800320c:	d817      	bhi.n	800323e <UART_SetConfig+0x216>
 800320e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003212:	d00b      	beq.n	800322c <UART_SetConfig+0x204>
 8003214:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003218:	d811      	bhi.n	800323e <UART_SetConfig+0x216>
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <UART_SetConfig+0x1fe>
 800321e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003222:	d006      	beq.n	8003232 <UART_SetConfig+0x20a>
 8003224:	e00b      	b.n	800323e <UART_SetConfig+0x216>
 8003226:	2300      	movs	r3, #0
 8003228:	77fb      	strb	r3, [r7, #31]
 800322a:	e0a1      	b.n	8003370 <UART_SetConfig+0x348>
 800322c:	2302      	movs	r3, #2
 800322e:	77fb      	strb	r3, [r7, #31]
 8003230:	e09e      	b.n	8003370 <UART_SetConfig+0x348>
 8003232:	2304      	movs	r3, #4
 8003234:	77fb      	strb	r3, [r7, #31]
 8003236:	e09b      	b.n	8003370 <UART_SetConfig+0x348>
 8003238:	2308      	movs	r3, #8
 800323a:	77fb      	strb	r3, [r7, #31]
 800323c:	e098      	b.n	8003370 <UART_SetConfig+0x348>
 800323e:	2310      	movs	r3, #16
 8003240:	77fb      	strb	r3, [r7, #31]
 8003242:	e095      	b.n	8003370 <UART_SetConfig+0x348>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a2f      	ldr	r2, [pc, #188]	@ (8003308 <UART_SetConfig+0x2e0>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d125      	bne.n	800329a <UART_SetConfig+0x272>
 800324e:	4b29      	ldr	r3, [pc, #164]	@ (80032f4 <UART_SetConfig+0x2cc>)
 8003250:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003254:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003258:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800325c:	d017      	beq.n	800328e <UART_SetConfig+0x266>
 800325e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003262:	d817      	bhi.n	8003294 <UART_SetConfig+0x26c>
 8003264:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003268:	d00b      	beq.n	8003282 <UART_SetConfig+0x25a>
 800326a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800326e:	d811      	bhi.n	8003294 <UART_SetConfig+0x26c>
 8003270:	2b00      	cmp	r3, #0
 8003272:	d003      	beq.n	800327c <UART_SetConfig+0x254>
 8003274:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003278:	d006      	beq.n	8003288 <UART_SetConfig+0x260>
 800327a:	e00b      	b.n	8003294 <UART_SetConfig+0x26c>
 800327c:	2301      	movs	r3, #1
 800327e:	77fb      	strb	r3, [r7, #31]
 8003280:	e076      	b.n	8003370 <UART_SetConfig+0x348>
 8003282:	2302      	movs	r3, #2
 8003284:	77fb      	strb	r3, [r7, #31]
 8003286:	e073      	b.n	8003370 <UART_SetConfig+0x348>
 8003288:	2304      	movs	r3, #4
 800328a:	77fb      	strb	r3, [r7, #31]
 800328c:	e070      	b.n	8003370 <UART_SetConfig+0x348>
 800328e:	2308      	movs	r3, #8
 8003290:	77fb      	strb	r3, [r7, #31]
 8003292:	e06d      	b.n	8003370 <UART_SetConfig+0x348>
 8003294:	2310      	movs	r3, #16
 8003296:	77fb      	strb	r3, [r7, #31]
 8003298:	e06a      	b.n	8003370 <UART_SetConfig+0x348>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a1b      	ldr	r2, [pc, #108]	@ (800330c <UART_SetConfig+0x2e4>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d138      	bne.n	8003316 <UART_SetConfig+0x2ee>
 80032a4:	4b13      	ldr	r3, [pc, #76]	@ (80032f4 <UART_SetConfig+0x2cc>)
 80032a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032aa:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80032ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80032b2:	d017      	beq.n	80032e4 <UART_SetConfig+0x2bc>
 80032b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80032b8:	d82a      	bhi.n	8003310 <UART_SetConfig+0x2e8>
 80032ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032be:	d00b      	beq.n	80032d8 <UART_SetConfig+0x2b0>
 80032c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032c4:	d824      	bhi.n	8003310 <UART_SetConfig+0x2e8>
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <UART_SetConfig+0x2aa>
 80032ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032ce:	d006      	beq.n	80032de <UART_SetConfig+0x2b6>
 80032d0:	e01e      	b.n	8003310 <UART_SetConfig+0x2e8>
 80032d2:	2300      	movs	r3, #0
 80032d4:	77fb      	strb	r3, [r7, #31]
 80032d6:	e04b      	b.n	8003370 <UART_SetConfig+0x348>
 80032d8:	2302      	movs	r3, #2
 80032da:	77fb      	strb	r3, [r7, #31]
 80032dc:	e048      	b.n	8003370 <UART_SetConfig+0x348>
 80032de:	2304      	movs	r3, #4
 80032e0:	77fb      	strb	r3, [r7, #31]
 80032e2:	e045      	b.n	8003370 <UART_SetConfig+0x348>
 80032e4:	2308      	movs	r3, #8
 80032e6:	77fb      	strb	r3, [r7, #31]
 80032e8:	e042      	b.n	8003370 <UART_SetConfig+0x348>
 80032ea:	bf00      	nop
 80032ec:	efff69f3 	.word	0xefff69f3
 80032f0:	40011000 	.word	0x40011000
 80032f4:	40023800 	.word	0x40023800
 80032f8:	40004400 	.word	0x40004400
 80032fc:	40004800 	.word	0x40004800
 8003300:	40004c00 	.word	0x40004c00
 8003304:	40005000 	.word	0x40005000
 8003308:	40011400 	.word	0x40011400
 800330c:	40007800 	.word	0x40007800
 8003310:	2310      	movs	r3, #16
 8003312:	77fb      	strb	r3, [r7, #31]
 8003314:	e02c      	b.n	8003370 <UART_SetConfig+0x348>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a72      	ldr	r2, [pc, #456]	@ (80034e4 <UART_SetConfig+0x4bc>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d125      	bne.n	800336c <UART_SetConfig+0x344>
 8003320:	4b71      	ldr	r3, [pc, #452]	@ (80034e8 <UART_SetConfig+0x4c0>)
 8003322:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003326:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800332a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800332e:	d017      	beq.n	8003360 <UART_SetConfig+0x338>
 8003330:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003334:	d817      	bhi.n	8003366 <UART_SetConfig+0x33e>
 8003336:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800333a:	d00b      	beq.n	8003354 <UART_SetConfig+0x32c>
 800333c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003340:	d811      	bhi.n	8003366 <UART_SetConfig+0x33e>
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <UART_SetConfig+0x326>
 8003346:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800334a:	d006      	beq.n	800335a <UART_SetConfig+0x332>
 800334c:	e00b      	b.n	8003366 <UART_SetConfig+0x33e>
 800334e:	2300      	movs	r3, #0
 8003350:	77fb      	strb	r3, [r7, #31]
 8003352:	e00d      	b.n	8003370 <UART_SetConfig+0x348>
 8003354:	2302      	movs	r3, #2
 8003356:	77fb      	strb	r3, [r7, #31]
 8003358:	e00a      	b.n	8003370 <UART_SetConfig+0x348>
 800335a:	2304      	movs	r3, #4
 800335c:	77fb      	strb	r3, [r7, #31]
 800335e:	e007      	b.n	8003370 <UART_SetConfig+0x348>
 8003360:	2308      	movs	r3, #8
 8003362:	77fb      	strb	r3, [r7, #31]
 8003364:	e004      	b.n	8003370 <UART_SetConfig+0x348>
 8003366:	2310      	movs	r3, #16
 8003368:	77fb      	strb	r3, [r7, #31]
 800336a:	e001      	b.n	8003370 <UART_SetConfig+0x348>
 800336c:	2310      	movs	r3, #16
 800336e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	69db      	ldr	r3, [r3, #28]
 8003374:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003378:	d15b      	bne.n	8003432 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800337a:	7ffb      	ldrb	r3, [r7, #31]
 800337c:	2b08      	cmp	r3, #8
 800337e:	d828      	bhi.n	80033d2 <UART_SetConfig+0x3aa>
 8003380:	a201      	add	r2, pc, #4	@ (adr r2, 8003388 <UART_SetConfig+0x360>)
 8003382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003386:	bf00      	nop
 8003388:	080033ad 	.word	0x080033ad
 800338c:	080033b5 	.word	0x080033b5
 8003390:	080033bd 	.word	0x080033bd
 8003394:	080033d3 	.word	0x080033d3
 8003398:	080033c3 	.word	0x080033c3
 800339c:	080033d3 	.word	0x080033d3
 80033a0:	080033d3 	.word	0x080033d3
 80033a4:	080033d3 	.word	0x080033d3
 80033a8:	080033cb 	.word	0x080033cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033ac:	f7ff f914 	bl	80025d8 <HAL_RCC_GetPCLK1Freq>
 80033b0:	61b8      	str	r0, [r7, #24]
        break;
 80033b2:	e013      	b.n	80033dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033b4:	f7ff f924 	bl	8002600 <HAL_RCC_GetPCLK2Freq>
 80033b8:	61b8      	str	r0, [r7, #24]
        break;
 80033ba:	e00f      	b.n	80033dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033bc:	4b4b      	ldr	r3, [pc, #300]	@ (80034ec <UART_SetConfig+0x4c4>)
 80033be:	61bb      	str	r3, [r7, #24]
        break;
 80033c0:	e00c      	b.n	80033dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033c2:	f7ff f837 	bl	8002434 <HAL_RCC_GetSysClockFreq>
 80033c6:	61b8      	str	r0, [r7, #24]
        break;
 80033c8:	e008      	b.n	80033dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033ce:	61bb      	str	r3, [r7, #24]
        break;
 80033d0:	e004      	b.n	80033dc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80033d2:	2300      	movs	r3, #0
 80033d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	77bb      	strb	r3, [r7, #30]
        break;
 80033da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d074      	beq.n	80034cc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	005a      	lsls	r2, r3, #1
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	085b      	lsrs	r3, r3, #1
 80033ec:	441a      	add	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	2b0f      	cmp	r3, #15
 80033fc:	d916      	bls.n	800342c <UART_SetConfig+0x404>
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003404:	d212      	bcs.n	800342c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	b29b      	uxth	r3, r3
 800340a:	f023 030f 	bic.w	r3, r3, #15
 800340e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	085b      	lsrs	r3, r3, #1
 8003414:	b29b      	uxth	r3, r3
 8003416:	f003 0307 	and.w	r3, r3, #7
 800341a:	b29a      	uxth	r2, r3
 800341c:	89fb      	ldrh	r3, [r7, #14]
 800341e:	4313      	orrs	r3, r2
 8003420:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	89fa      	ldrh	r2, [r7, #14]
 8003428:	60da      	str	r2, [r3, #12]
 800342a:	e04f      	b.n	80034cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	77bb      	strb	r3, [r7, #30]
 8003430:	e04c      	b.n	80034cc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003432:	7ffb      	ldrb	r3, [r7, #31]
 8003434:	2b08      	cmp	r3, #8
 8003436:	d828      	bhi.n	800348a <UART_SetConfig+0x462>
 8003438:	a201      	add	r2, pc, #4	@ (adr r2, 8003440 <UART_SetConfig+0x418>)
 800343a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800343e:	bf00      	nop
 8003440:	08003465 	.word	0x08003465
 8003444:	0800346d 	.word	0x0800346d
 8003448:	08003475 	.word	0x08003475
 800344c:	0800348b 	.word	0x0800348b
 8003450:	0800347b 	.word	0x0800347b
 8003454:	0800348b 	.word	0x0800348b
 8003458:	0800348b 	.word	0x0800348b
 800345c:	0800348b 	.word	0x0800348b
 8003460:	08003483 	.word	0x08003483
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003464:	f7ff f8b8 	bl	80025d8 <HAL_RCC_GetPCLK1Freq>
 8003468:	61b8      	str	r0, [r7, #24]
        break;
 800346a:	e013      	b.n	8003494 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800346c:	f7ff f8c8 	bl	8002600 <HAL_RCC_GetPCLK2Freq>
 8003470:	61b8      	str	r0, [r7, #24]
        break;
 8003472:	e00f      	b.n	8003494 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003474:	4b1d      	ldr	r3, [pc, #116]	@ (80034ec <UART_SetConfig+0x4c4>)
 8003476:	61bb      	str	r3, [r7, #24]
        break;
 8003478:	e00c      	b.n	8003494 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800347a:	f7fe ffdb 	bl	8002434 <HAL_RCC_GetSysClockFreq>
 800347e:	61b8      	str	r0, [r7, #24]
        break;
 8003480:	e008      	b.n	8003494 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003482:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003486:	61bb      	str	r3, [r7, #24]
        break;
 8003488:	e004      	b.n	8003494 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800348a:	2300      	movs	r3, #0
 800348c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	77bb      	strb	r3, [r7, #30]
        break;
 8003492:	bf00      	nop
    }

    if (pclk != 0U)
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d018      	beq.n	80034cc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	085a      	lsrs	r2, r3, #1
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	441a      	add	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	2b0f      	cmp	r3, #15
 80034b2:	d909      	bls.n	80034c8 <UART_SetConfig+0x4a0>
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034ba:	d205      	bcs.n	80034c8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	b29a      	uxth	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	60da      	str	r2, [r3, #12]
 80034c6:	e001      	b.n	80034cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80034d8:	7fbb      	ldrb	r3, [r7, #30]
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3720      	adds	r7, #32
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	40007c00 	.word	0x40007c00
 80034e8:	40023800 	.word	0x40023800
 80034ec:	00f42400 	.word	0x00f42400

080034f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fc:	f003 0308 	and.w	r3, r3, #8
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00a      	beq.n	800351a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00a      	beq.n	800353c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00a      	beq.n	800355e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003562:	f003 0304 	and.w	r3, r3, #4
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00a      	beq.n	8003580 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	430a      	orrs	r2, r1
 800357e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003584:	f003 0310 	and.w	r3, r3, #16
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00a      	beq.n	80035a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	430a      	orrs	r2, r1
 80035a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a6:	f003 0320 	and.w	r3, r3, #32
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00a      	beq.n	80035c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d01a      	beq.n	8003606 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035ee:	d10a      	bne.n	8003606 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00a      	beq.n	8003628 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	605a      	str	r2, [r3, #4]
  }
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b098      	sub	sp, #96	@ 0x60
 8003638:	af02      	add	r7, sp, #8
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003644:	f7fd fc0a 	bl	8000e5c <HAL_GetTick>
 8003648:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0308 	and.w	r3, r3, #8
 8003654:	2b08      	cmp	r3, #8
 8003656:	d12e      	bne.n	80036b6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003658:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003660:	2200      	movs	r2, #0
 8003662:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f88c 	bl	8003784 <UART_WaitOnFlagUntilTimeout>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d021      	beq.n	80036b6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800367a:	e853 3f00 	ldrex	r3, [r3]
 800367e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003682:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003686:	653b      	str	r3, [r7, #80]	@ 0x50
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	461a      	mov	r2, r3
 800368e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003690:	647b      	str	r3, [r7, #68]	@ 0x44
 8003692:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003694:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003696:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003698:	e841 2300 	strex	r3, r2, [r1]
 800369c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800369e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1e6      	bne.n	8003672 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2220      	movs	r2, #32
 80036a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e062      	b.n	800377c <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	d149      	bne.n	8003758 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036cc:	2200      	movs	r2, #0
 80036ce:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f856 	bl	8003784 <UART_WaitOnFlagUntilTimeout>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d03c      	beq.n	8003758 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e6:	e853 3f00 	ldrex	r3, [r3]
 80036ea:	623b      	str	r3, [r7, #32]
   return(result);
 80036ec:	6a3b      	ldr	r3, [r7, #32]
 80036ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	461a      	mov	r2, r3
 80036fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80036fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003700:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003702:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003704:	e841 2300 	strex	r3, r2, [r1]
 8003708:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800370a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1e6      	bne.n	80036de <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	3308      	adds	r3, #8
 8003716:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	e853 3f00 	ldrex	r3, [r3]
 800371e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f023 0301 	bic.w	r3, r3, #1
 8003726:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	3308      	adds	r3, #8
 800372e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003730:	61fa      	str	r2, [r7, #28]
 8003732:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003734:	69b9      	ldr	r1, [r7, #24]
 8003736:	69fa      	ldr	r2, [r7, #28]
 8003738:	e841 2300 	strex	r3, r2, [r1]
 800373c:	617b      	str	r3, [r7, #20]
   return(result);
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1e5      	bne.n	8003710 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2220      	movs	r2, #32
 8003748:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e011      	b.n	800377c <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2220      	movs	r2, #32
 800375c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2220      	movs	r2, #32
 8003762:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3758      	adds	r7, #88	@ 0x58
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	603b      	str	r3, [r7, #0]
 8003790:	4613      	mov	r3, r2
 8003792:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003794:	e04f      	b.n	8003836 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379c:	d04b      	beq.n	8003836 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800379e:	f7fd fb5d 	bl	8000e5c <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d302      	bcc.n	80037b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e04e      	b.n	8003856 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0304 	and.w	r3, r3, #4
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d037      	beq.n	8003836 <UART_WaitOnFlagUntilTimeout+0xb2>
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	2b80      	cmp	r3, #128	@ 0x80
 80037ca:	d034      	beq.n	8003836 <UART_WaitOnFlagUntilTimeout+0xb2>
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	2b40      	cmp	r3, #64	@ 0x40
 80037d0:	d031      	beq.n	8003836 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	69db      	ldr	r3, [r3, #28]
 80037d8:	f003 0308 	and.w	r3, r3, #8
 80037dc:	2b08      	cmp	r3, #8
 80037de:	d110      	bne.n	8003802 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2208      	movs	r2, #8
 80037e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f000 f838 	bl	800385e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2208      	movs	r2, #8
 80037f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e029      	b.n	8003856 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	69db      	ldr	r3, [r3, #28]
 8003808:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800380c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003810:	d111      	bne.n	8003836 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800381a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 f81e 	bl	800385e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2220      	movs	r2, #32
 8003826:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e00f      	b.n	8003856 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	69da      	ldr	r2, [r3, #28]
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	4013      	ands	r3, r2
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	429a      	cmp	r2, r3
 8003844:	bf0c      	ite	eq
 8003846:	2301      	moveq	r3, #1
 8003848:	2300      	movne	r3, #0
 800384a:	b2db      	uxtb	r3, r3
 800384c:	461a      	mov	r2, r3
 800384e:	79fb      	ldrb	r3, [r7, #7]
 8003850:	429a      	cmp	r2, r3
 8003852:	d0a0      	beq.n	8003796 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800385e:	b480      	push	{r7}
 8003860:	b095      	sub	sp, #84	@ 0x54
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800386e:	e853 3f00 	ldrex	r3, [r3]
 8003872:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003876:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800387a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	461a      	mov	r2, r3
 8003882:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003884:	643b      	str	r3, [r7, #64]	@ 0x40
 8003886:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003888:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800388a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800388c:	e841 2300 	strex	r3, r2, [r1]
 8003890:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1e6      	bne.n	8003866 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	3308      	adds	r3, #8
 800389e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a0:	6a3b      	ldr	r3, [r7, #32]
 80038a2:	e853 3f00 	ldrex	r3, [r3]
 80038a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	f023 0301 	bic.w	r3, r3, #1
 80038ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	3308      	adds	r3, #8
 80038b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038c0:	e841 2300 	strex	r3, r2, [r1]
 80038c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80038c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1e5      	bne.n	8003898 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d118      	bne.n	8003906 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	e853 3f00 	ldrex	r3, [r3]
 80038e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	f023 0310 	bic.w	r3, r3, #16
 80038e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	461a      	mov	r2, r3
 80038f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038f2:	61bb      	str	r3, [r7, #24]
 80038f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f6:	6979      	ldr	r1, [r7, #20]
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	e841 2300 	strex	r3, r2, [r1]
 80038fe:	613b      	str	r3, [r7, #16]
   return(result);
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1e6      	bne.n	80038d4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2220      	movs	r2, #32
 800390a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800391a:	bf00      	nop
 800391c:	3754      	adds	r7, #84	@ 0x54
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
	...

08003928 <siprintf>:
 8003928:	b40e      	push	{r1, r2, r3}
 800392a:	b510      	push	{r4, lr}
 800392c:	b09d      	sub	sp, #116	@ 0x74
 800392e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003930:	9002      	str	r0, [sp, #8]
 8003932:	9006      	str	r0, [sp, #24]
 8003934:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003938:	480a      	ldr	r0, [pc, #40]	@ (8003964 <siprintf+0x3c>)
 800393a:	9107      	str	r1, [sp, #28]
 800393c:	9104      	str	r1, [sp, #16]
 800393e:	490a      	ldr	r1, [pc, #40]	@ (8003968 <siprintf+0x40>)
 8003940:	f853 2b04 	ldr.w	r2, [r3], #4
 8003944:	9105      	str	r1, [sp, #20]
 8003946:	2400      	movs	r4, #0
 8003948:	a902      	add	r1, sp, #8
 800394a:	6800      	ldr	r0, [r0, #0]
 800394c:	9301      	str	r3, [sp, #4]
 800394e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003950:	f000 f994 	bl	8003c7c <_svfiprintf_r>
 8003954:	9b02      	ldr	r3, [sp, #8]
 8003956:	701c      	strb	r4, [r3, #0]
 8003958:	b01d      	add	sp, #116	@ 0x74
 800395a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800395e:	b003      	add	sp, #12
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	2000000c 	.word	0x2000000c
 8003968:	ffff0208 	.word	0xffff0208

0800396c <memset>:
 800396c:	4402      	add	r2, r0
 800396e:	4603      	mov	r3, r0
 8003970:	4293      	cmp	r3, r2
 8003972:	d100      	bne.n	8003976 <memset+0xa>
 8003974:	4770      	bx	lr
 8003976:	f803 1b01 	strb.w	r1, [r3], #1
 800397a:	e7f9      	b.n	8003970 <memset+0x4>

0800397c <__errno>:
 800397c:	4b01      	ldr	r3, [pc, #4]	@ (8003984 <__errno+0x8>)
 800397e:	6818      	ldr	r0, [r3, #0]
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	2000000c 	.word	0x2000000c

08003988 <__libc_init_array>:
 8003988:	b570      	push	{r4, r5, r6, lr}
 800398a:	4d0d      	ldr	r5, [pc, #52]	@ (80039c0 <__libc_init_array+0x38>)
 800398c:	4c0d      	ldr	r4, [pc, #52]	@ (80039c4 <__libc_init_array+0x3c>)
 800398e:	1b64      	subs	r4, r4, r5
 8003990:	10a4      	asrs	r4, r4, #2
 8003992:	2600      	movs	r6, #0
 8003994:	42a6      	cmp	r6, r4
 8003996:	d109      	bne.n	80039ac <__libc_init_array+0x24>
 8003998:	4d0b      	ldr	r5, [pc, #44]	@ (80039c8 <__libc_init_array+0x40>)
 800399a:	4c0c      	ldr	r4, [pc, #48]	@ (80039cc <__libc_init_array+0x44>)
 800399c:	f000 fc64 	bl	8004268 <_init>
 80039a0:	1b64      	subs	r4, r4, r5
 80039a2:	10a4      	asrs	r4, r4, #2
 80039a4:	2600      	movs	r6, #0
 80039a6:	42a6      	cmp	r6, r4
 80039a8:	d105      	bne.n	80039b6 <__libc_init_array+0x2e>
 80039aa:	bd70      	pop	{r4, r5, r6, pc}
 80039ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80039b0:	4798      	blx	r3
 80039b2:	3601      	adds	r6, #1
 80039b4:	e7ee      	b.n	8003994 <__libc_init_array+0xc>
 80039b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80039ba:	4798      	blx	r3
 80039bc:	3601      	adds	r6, #1
 80039be:	e7f2      	b.n	80039a6 <__libc_init_array+0x1e>
 80039c0:	080042e0 	.word	0x080042e0
 80039c4:	080042e0 	.word	0x080042e0
 80039c8:	080042e0 	.word	0x080042e0
 80039cc:	080042e4 	.word	0x080042e4

080039d0 <__retarget_lock_acquire_recursive>:
 80039d0:	4770      	bx	lr

080039d2 <__retarget_lock_release_recursive>:
 80039d2:	4770      	bx	lr

080039d4 <_free_r>:
 80039d4:	b538      	push	{r3, r4, r5, lr}
 80039d6:	4605      	mov	r5, r0
 80039d8:	2900      	cmp	r1, #0
 80039da:	d041      	beq.n	8003a60 <_free_r+0x8c>
 80039dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039e0:	1f0c      	subs	r4, r1, #4
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	bfb8      	it	lt
 80039e6:	18e4      	addlt	r4, r4, r3
 80039e8:	f000 f8e0 	bl	8003bac <__malloc_lock>
 80039ec:	4a1d      	ldr	r2, [pc, #116]	@ (8003a64 <_free_r+0x90>)
 80039ee:	6813      	ldr	r3, [r2, #0]
 80039f0:	b933      	cbnz	r3, 8003a00 <_free_r+0x2c>
 80039f2:	6063      	str	r3, [r4, #4]
 80039f4:	6014      	str	r4, [r2, #0]
 80039f6:	4628      	mov	r0, r5
 80039f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039fc:	f000 b8dc 	b.w	8003bb8 <__malloc_unlock>
 8003a00:	42a3      	cmp	r3, r4
 8003a02:	d908      	bls.n	8003a16 <_free_r+0x42>
 8003a04:	6820      	ldr	r0, [r4, #0]
 8003a06:	1821      	adds	r1, r4, r0
 8003a08:	428b      	cmp	r3, r1
 8003a0a:	bf01      	itttt	eq
 8003a0c:	6819      	ldreq	r1, [r3, #0]
 8003a0e:	685b      	ldreq	r3, [r3, #4]
 8003a10:	1809      	addeq	r1, r1, r0
 8003a12:	6021      	streq	r1, [r4, #0]
 8003a14:	e7ed      	b.n	80039f2 <_free_r+0x1e>
 8003a16:	461a      	mov	r2, r3
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	b10b      	cbz	r3, 8003a20 <_free_r+0x4c>
 8003a1c:	42a3      	cmp	r3, r4
 8003a1e:	d9fa      	bls.n	8003a16 <_free_r+0x42>
 8003a20:	6811      	ldr	r1, [r2, #0]
 8003a22:	1850      	adds	r0, r2, r1
 8003a24:	42a0      	cmp	r0, r4
 8003a26:	d10b      	bne.n	8003a40 <_free_r+0x6c>
 8003a28:	6820      	ldr	r0, [r4, #0]
 8003a2a:	4401      	add	r1, r0
 8003a2c:	1850      	adds	r0, r2, r1
 8003a2e:	4283      	cmp	r3, r0
 8003a30:	6011      	str	r1, [r2, #0]
 8003a32:	d1e0      	bne.n	80039f6 <_free_r+0x22>
 8003a34:	6818      	ldr	r0, [r3, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	6053      	str	r3, [r2, #4]
 8003a3a:	4408      	add	r0, r1
 8003a3c:	6010      	str	r0, [r2, #0]
 8003a3e:	e7da      	b.n	80039f6 <_free_r+0x22>
 8003a40:	d902      	bls.n	8003a48 <_free_r+0x74>
 8003a42:	230c      	movs	r3, #12
 8003a44:	602b      	str	r3, [r5, #0]
 8003a46:	e7d6      	b.n	80039f6 <_free_r+0x22>
 8003a48:	6820      	ldr	r0, [r4, #0]
 8003a4a:	1821      	adds	r1, r4, r0
 8003a4c:	428b      	cmp	r3, r1
 8003a4e:	bf04      	itt	eq
 8003a50:	6819      	ldreq	r1, [r3, #0]
 8003a52:	685b      	ldreq	r3, [r3, #4]
 8003a54:	6063      	str	r3, [r4, #4]
 8003a56:	bf04      	itt	eq
 8003a58:	1809      	addeq	r1, r1, r0
 8003a5a:	6021      	streq	r1, [r4, #0]
 8003a5c:	6054      	str	r4, [r2, #4]
 8003a5e:	e7ca      	b.n	80039f6 <_free_r+0x22>
 8003a60:	bd38      	pop	{r3, r4, r5, pc}
 8003a62:	bf00      	nop
 8003a64:	20000310 	.word	0x20000310

08003a68 <sbrk_aligned>:
 8003a68:	b570      	push	{r4, r5, r6, lr}
 8003a6a:	4e0f      	ldr	r6, [pc, #60]	@ (8003aa8 <sbrk_aligned+0x40>)
 8003a6c:	460c      	mov	r4, r1
 8003a6e:	6831      	ldr	r1, [r6, #0]
 8003a70:	4605      	mov	r5, r0
 8003a72:	b911      	cbnz	r1, 8003a7a <sbrk_aligned+0x12>
 8003a74:	f000 fba4 	bl	80041c0 <_sbrk_r>
 8003a78:	6030      	str	r0, [r6, #0]
 8003a7a:	4621      	mov	r1, r4
 8003a7c:	4628      	mov	r0, r5
 8003a7e:	f000 fb9f 	bl	80041c0 <_sbrk_r>
 8003a82:	1c43      	adds	r3, r0, #1
 8003a84:	d103      	bne.n	8003a8e <sbrk_aligned+0x26>
 8003a86:	f04f 34ff 	mov.w	r4, #4294967295
 8003a8a:	4620      	mov	r0, r4
 8003a8c:	bd70      	pop	{r4, r5, r6, pc}
 8003a8e:	1cc4      	adds	r4, r0, #3
 8003a90:	f024 0403 	bic.w	r4, r4, #3
 8003a94:	42a0      	cmp	r0, r4
 8003a96:	d0f8      	beq.n	8003a8a <sbrk_aligned+0x22>
 8003a98:	1a21      	subs	r1, r4, r0
 8003a9a:	4628      	mov	r0, r5
 8003a9c:	f000 fb90 	bl	80041c0 <_sbrk_r>
 8003aa0:	3001      	adds	r0, #1
 8003aa2:	d1f2      	bne.n	8003a8a <sbrk_aligned+0x22>
 8003aa4:	e7ef      	b.n	8003a86 <sbrk_aligned+0x1e>
 8003aa6:	bf00      	nop
 8003aa8:	2000030c 	.word	0x2000030c

08003aac <_malloc_r>:
 8003aac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ab0:	1ccd      	adds	r5, r1, #3
 8003ab2:	f025 0503 	bic.w	r5, r5, #3
 8003ab6:	3508      	adds	r5, #8
 8003ab8:	2d0c      	cmp	r5, #12
 8003aba:	bf38      	it	cc
 8003abc:	250c      	movcc	r5, #12
 8003abe:	2d00      	cmp	r5, #0
 8003ac0:	4606      	mov	r6, r0
 8003ac2:	db01      	blt.n	8003ac8 <_malloc_r+0x1c>
 8003ac4:	42a9      	cmp	r1, r5
 8003ac6:	d904      	bls.n	8003ad2 <_malloc_r+0x26>
 8003ac8:	230c      	movs	r3, #12
 8003aca:	6033      	str	r3, [r6, #0]
 8003acc:	2000      	movs	r0, #0
 8003ace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ad2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003ba8 <_malloc_r+0xfc>
 8003ad6:	f000 f869 	bl	8003bac <__malloc_lock>
 8003ada:	f8d8 3000 	ldr.w	r3, [r8]
 8003ade:	461c      	mov	r4, r3
 8003ae0:	bb44      	cbnz	r4, 8003b34 <_malloc_r+0x88>
 8003ae2:	4629      	mov	r1, r5
 8003ae4:	4630      	mov	r0, r6
 8003ae6:	f7ff ffbf 	bl	8003a68 <sbrk_aligned>
 8003aea:	1c43      	adds	r3, r0, #1
 8003aec:	4604      	mov	r4, r0
 8003aee:	d158      	bne.n	8003ba2 <_malloc_r+0xf6>
 8003af0:	f8d8 4000 	ldr.w	r4, [r8]
 8003af4:	4627      	mov	r7, r4
 8003af6:	2f00      	cmp	r7, #0
 8003af8:	d143      	bne.n	8003b82 <_malloc_r+0xd6>
 8003afa:	2c00      	cmp	r4, #0
 8003afc:	d04b      	beq.n	8003b96 <_malloc_r+0xea>
 8003afe:	6823      	ldr	r3, [r4, #0]
 8003b00:	4639      	mov	r1, r7
 8003b02:	4630      	mov	r0, r6
 8003b04:	eb04 0903 	add.w	r9, r4, r3
 8003b08:	f000 fb5a 	bl	80041c0 <_sbrk_r>
 8003b0c:	4581      	cmp	r9, r0
 8003b0e:	d142      	bne.n	8003b96 <_malloc_r+0xea>
 8003b10:	6821      	ldr	r1, [r4, #0]
 8003b12:	1a6d      	subs	r5, r5, r1
 8003b14:	4629      	mov	r1, r5
 8003b16:	4630      	mov	r0, r6
 8003b18:	f7ff ffa6 	bl	8003a68 <sbrk_aligned>
 8003b1c:	3001      	adds	r0, #1
 8003b1e:	d03a      	beq.n	8003b96 <_malloc_r+0xea>
 8003b20:	6823      	ldr	r3, [r4, #0]
 8003b22:	442b      	add	r3, r5
 8003b24:	6023      	str	r3, [r4, #0]
 8003b26:	f8d8 3000 	ldr.w	r3, [r8]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	bb62      	cbnz	r2, 8003b88 <_malloc_r+0xdc>
 8003b2e:	f8c8 7000 	str.w	r7, [r8]
 8003b32:	e00f      	b.n	8003b54 <_malloc_r+0xa8>
 8003b34:	6822      	ldr	r2, [r4, #0]
 8003b36:	1b52      	subs	r2, r2, r5
 8003b38:	d420      	bmi.n	8003b7c <_malloc_r+0xd0>
 8003b3a:	2a0b      	cmp	r2, #11
 8003b3c:	d917      	bls.n	8003b6e <_malloc_r+0xc2>
 8003b3e:	1961      	adds	r1, r4, r5
 8003b40:	42a3      	cmp	r3, r4
 8003b42:	6025      	str	r5, [r4, #0]
 8003b44:	bf18      	it	ne
 8003b46:	6059      	strne	r1, [r3, #4]
 8003b48:	6863      	ldr	r3, [r4, #4]
 8003b4a:	bf08      	it	eq
 8003b4c:	f8c8 1000 	streq.w	r1, [r8]
 8003b50:	5162      	str	r2, [r4, r5]
 8003b52:	604b      	str	r3, [r1, #4]
 8003b54:	4630      	mov	r0, r6
 8003b56:	f000 f82f 	bl	8003bb8 <__malloc_unlock>
 8003b5a:	f104 000b 	add.w	r0, r4, #11
 8003b5e:	1d23      	adds	r3, r4, #4
 8003b60:	f020 0007 	bic.w	r0, r0, #7
 8003b64:	1ac2      	subs	r2, r0, r3
 8003b66:	bf1c      	itt	ne
 8003b68:	1a1b      	subne	r3, r3, r0
 8003b6a:	50a3      	strne	r3, [r4, r2]
 8003b6c:	e7af      	b.n	8003ace <_malloc_r+0x22>
 8003b6e:	6862      	ldr	r2, [r4, #4]
 8003b70:	42a3      	cmp	r3, r4
 8003b72:	bf0c      	ite	eq
 8003b74:	f8c8 2000 	streq.w	r2, [r8]
 8003b78:	605a      	strne	r2, [r3, #4]
 8003b7a:	e7eb      	b.n	8003b54 <_malloc_r+0xa8>
 8003b7c:	4623      	mov	r3, r4
 8003b7e:	6864      	ldr	r4, [r4, #4]
 8003b80:	e7ae      	b.n	8003ae0 <_malloc_r+0x34>
 8003b82:	463c      	mov	r4, r7
 8003b84:	687f      	ldr	r7, [r7, #4]
 8003b86:	e7b6      	b.n	8003af6 <_malloc_r+0x4a>
 8003b88:	461a      	mov	r2, r3
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	42a3      	cmp	r3, r4
 8003b8e:	d1fb      	bne.n	8003b88 <_malloc_r+0xdc>
 8003b90:	2300      	movs	r3, #0
 8003b92:	6053      	str	r3, [r2, #4]
 8003b94:	e7de      	b.n	8003b54 <_malloc_r+0xa8>
 8003b96:	230c      	movs	r3, #12
 8003b98:	6033      	str	r3, [r6, #0]
 8003b9a:	4630      	mov	r0, r6
 8003b9c:	f000 f80c 	bl	8003bb8 <__malloc_unlock>
 8003ba0:	e794      	b.n	8003acc <_malloc_r+0x20>
 8003ba2:	6005      	str	r5, [r0, #0]
 8003ba4:	e7d6      	b.n	8003b54 <_malloc_r+0xa8>
 8003ba6:	bf00      	nop
 8003ba8:	20000310 	.word	0x20000310

08003bac <__malloc_lock>:
 8003bac:	4801      	ldr	r0, [pc, #4]	@ (8003bb4 <__malloc_lock+0x8>)
 8003bae:	f7ff bf0f 	b.w	80039d0 <__retarget_lock_acquire_recursive>
 8003bb2:	bf00      	nop
 8003bb4:	20000308 	.word	0x20000308

08003bb8 <__malloc_unlock>:
 8003bb8:	4801      	ldr	r0, [pc, #4]	@ (8003bc0 <__malloc_unlock+0x8>)
 8003bba:	f7ff bf0a 	b.w	80039d2 <__retarget_lock_release_recursive>
 8003bbe:	bf00      	nop
 8003bc0:	20000308 	.word	0x20000308

08003bc4 <__ssputs_r>:
 8003bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bc8:	688e      	ldr	r6, [r1, #8]
 8003bca:	461f      	mov	r7, r3
 8003bcc:	42be      	cmp	r6, r7
 8003bce:	680b      	ldr	r3, [r1, #0]
 8003bd0:	4682      	mov	sl, r0
 8003bd2:	460c      	mov	r4, r1
 8003bd4:	4690      	mov	r8, r2
 8003bd6:	d82d      	bhi.n	8003c34 <__ssputs_r+0x70>
 8003bd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003bdc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003be0:	d026      	beq.n	8003c30 <__ssputs_r+0x6c>
 8003be2:	6965      	ldr	r5, [r4, #20]
 8003be4:	6909      	ldr	r1, [r1, #16]
 8003be6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003bea:	eba3 0901 	sub.w	r9, r3, r1
 8003bee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003bf2:	1c7b      	adds	r3, r7, #1
 8003bf4:	444b      	add	r3, r9
 8003bf6:	106d      	asrs	r5, r5, #1
 8003bf8:	429d      	cmp	r5, r3
 8003bfa:	bf38      	it	cc
 8003bfc:	461d      	movcc	r5, r3
 8003bfe:	0553      	lsls	r3, r2, #21
 8003c00:	d527      	bpl.n	8003c52 <__ssputs_r+0x8e>
 8003c02:	4629      	mov	r1, r5
 8003c04:	f7ff ff52 	bl	8003aac <_malloc_r>
 8003c08:	4606      	mov	r6, r0
 8003c0a:	b360      	cbz	r0, 8003c66 <__ssputs_r+0xa2>
 8003c0c:	6921      	ldr	r1, [r4, #16]
 8003c0e:	464a      	mov	r2, r9
 8003c10:	f000 fae6 	bl	80041e0 <memcpy>
 8003c14:	89a3      	ldrh	r3, [r4, #12]
 8003c16:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003c1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c1e:	81a3      	strh	r3, [r4, #12]
 8003c20:	6126      	str	r6, [r4, #16]
 8003c22:	6165      	str	r5, [r4, #20]
 8003c24:	444e      	add	r6, r9
 8003c26:	eba5 0509 	sub.w	r5, r5, r9
 8003c2a:	6026      	str	r6, [r4, #0]
 8003c2c:	60a5      	str	r5, [r4, #8]
 8003c2e:	463e      	mov	r6, r7
 8003c30:	42be      	cmp	r6, r7
 8003c32:	d900      	bls.n	8003c36 <__ssputs_r+0x72>
 8003c34:	463e      	mov	r6, r7
 8003c36:	6820      	ldr	r0, [r4, #0]
 8003c38:	4632      	mov	r2, r6
 8003c3a:	4641      	mov	r1, r8
 8003c3c:	f000 faa6 	bl	800418c <memmove>
 8003c40:	68a3      	ldr	r3, [r4, #8]
 8003c42:	1b9b      	subs	r3, r3, r6
 8003c44:	60a3      	str	r3, [r4, #8]
 8003c46:	6823      	ldr	r3, [r4, #0]
 8003c48:	4433      	add	r3, r6
 8003c4a:	6023      	str	r3, [r4, #0]
 8003c4c:	2000      	movs	r0, #0
 8003c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c52:	462a      	mov	r2, r5
 8003c54:	f000 fad2 	bl	80041fc <_realloc_r>
 8003c58:	4606      	mov	r6, r0
 8003c5a:	2800      	cmp	r0, #0
 8003c5c:	d1e0      	bne.n	8003c20 <__ssputs_r+0x5c>
 8003c5e:	6921      	ldr	r1, [r4, #16]
 8003c60:	4650      	mov	r0, sl
 8003c62:	f7ff feb7 	bl	80039d4 <_free_r>
 8003c66:	230c      	movs	r3, #12
 8003c68:	f8ca 3000 	str.w	r3, [sl]
 8003c6c:	89a3      	ldrh	r3, [r4, #12]
 8003c6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c72:	81a3      	strh	r3, [r4, #12]
 8003c74:	f04f 30ff 	mov.w	r0, #4294967295
 8003c78:	e7e9      	b.n	8003c4e <__ssputs_r+0x8a>
	...

08003c7c <_svfiprintf_r>:
 8003c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c80:	4698      	mov	r8, r3
 8003c82:	898b      	ldrh	r3, [r1, #12]
 8003c84:	061b      	lsls	r3, r3, #24
 8003c86:	b09d      	sub	sp, #116	@ 0x74
 8003c88:	4607      	mov	r7, r0
 8003c8a:	460d      	mov	r5, r1
 8003c8c:	4614      	mov	r4, r2
 8003c8e:	d510      	bpl.n	8003cb2 <_svfiprintf_r+0x36>
 8003c90:	690b      	ldr	r3, [r1, #16]
 8003c92:	b973      	cbnz	r3, 8003cb2 <_svfiprintf_r+0x36>
 8003c94:	2140      	movs	r1, #64	@ 0x40
 8003c96:	f7ff ff09 	bl	8003aac <_malloc_r>
 8003c9a:	6028      	str	r0, [r5, #0]
 8003c9c:	6128      	str	r0, [r5, #16]
 8003c9e:	b930      	cbnz	r0, 8003cae <_svfiprintf_r+0x32>
 8003ca0:	230c      	movs	r3, #12
 8003ca2:	603b      	str	r3, [r7, #0]
 8003ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ca8:	b01d      	add	sp, #116	@ 0x74
 8003caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cae:	2340      	movs	r3, #64	@ 0x40
 8003cb0:	616b      	str	r3, [r5, #20]
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003cb6:	2320      	movs	r3, #32
 8003cb8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003cbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8003cc0:	2330      	movs	r3, #48	@ 0x30
 8003cc2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003e60 <_svfiprintf_r+0x1e4>
 8003cc6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003cca:	f04f 0901 	mov.w	r9, #1
 8003cce:	4623      	mov	r3, r4
 8003cd0:	469a      	mov	sl, r3
 8003cd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003cd6:	b10a      	cbz	r2, 8003cdc <_svfiprintf_r+0x60>
 8003cd8:	2a25      	cmp	r2, #37	@ 0x25
 8003cda:	d1f9      	bne.n	8003cd0 <_svfiprintf_r+0x54>
 8003cdc:	ebba 0b04 	subs.w	fp, sl, r4
 8003ce0:	d00b      	beq.n	8003cfa <_svfiprintf_r+0x7e>
 8003ce2:	465b      	mov	r3, fp
 8003ce4:	4622      	mov	r2, r4
 8003ce6:	4629      	mov	r1, r5
 8003ce8:	4638      	mov	r0, r7
 8003cea:	f7ff ff6b 	bl	8003bc4 <__ssputs_r>
 8003cee:	3001      	adds	r0, #1
 8003cf0:	f000 80a7 	beq.w	8003e42 <_svfiprintf_r+0x1c6>
 8003cf4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003cf6:	445a      	add	r2, fp
 8003cf8:	9209      	str	r2, [sp, #36]	@ 0x24
 8003cfa:	f89a 3000 	ldrb.w	r3, [sl]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f000 809f 	beq.w	8003e42 <_svfiprintf_r+0x1c6>
 8003d04:	2300      	movs	r3, #0
 8003d06:	f04f 32ff 	mov.w	r2, #4294967295
 8003d0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d0e:	f10a 0a01 	add.w	sl, sl, #1
 8003d12:	9304      	str	r3, [sp, #16]
 8003d14:	9307      	str	r3, [sp, #28]
 8003d16:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003d1a:	931a      	str	r3, [sp, #104]	@ 0x68
 8003d1c:	4654      	mov	r4, sl
 8003d1e:	2205      	movs	r2, #5
 8003d20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d24:	484e      	ldr	r0, [pc, #312]	@ (8003e60 <_svfiprintf_r+0x1e4>)
 8003d26:	f7fc fa8b 	bl	8000240 <memchr>
 8003d2a:	9a04      	ldr	r2, [sp, #16]
 8003d2c:	b9d8      	cbnz	r0, 8003d66 <_svfiprintf_r+0xea>
 8003d2e:	06d0      	lsls	r0, r2, #27
 8003d30:	bf44      	itt	mi
 8003d32:	2320      	movmi	r3, #32
 8003d34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d38:	0711      	lsls	r1, r2, #28
 8003d3a:	bf44      	itt	mi
 8003d3c:	232b      	movmi	r3, #43	@ 0x2b
 8003d3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d42:	f89a 3000 	ldrb.w	r3, [sl]
 8003d46:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d48:	d015      	beq.n	8003d76 <_svfiprintf_r+0xfa>
 8003d4a:	9a07      	ldr	r2, [sp, #28]
 8003d4c:	4654      	mov	r4, sl
 8003d4e:	2000      	movs	r0, #0
 8003d50:	f04f 0c0a 	mov.w	ip, #10
 8003d54:	4621      	mov	r1, r4
 8003d56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d5a:	3b30      	subs	r3, #48	@ 0x30
 8003d5c:	2b09      	cmp	r3, #9
 8003d5e:	d94b      	bls.n	8003df8 <_svfiprintf_r+0x17c>
 8003d60:	b1b0      	cbz	r0, 8003d90 <_svfiprintf_r+0x114>
 8003d62:	9207      	str	r2, [sp, #28]
 8003d64:	e014      	b.n	8003d90 <_svfiprintf_r+0x114>
 8003d66:	eba0 0308 	sub.w	r3, r0, r8
 8003d6a:	fa09 f303 	lsl.w	r3, r9, r3
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	9304      	str	r3, [sp, #16]
 8003d72:	46a2      	mov	sl, r4
 8003d74:	e7d2      	b.n	8003d1c <_svfiprintf_r+0xa0>
 8003d76:	9b03      	ldr	r3, [sp, #12]
 8003d78:	1d19      	adds	r1, r3, #4
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	9103      	str	r1, [sp, #12]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	bfbb      	ittet	lt
 8003d82:	425b      	neglt	r3, r3
 8003d84:	f042 0202 	orrlt.w	r2, r2, #2
 8003d88:	9307      	strge	r3, [sp, #28]
 8003d8a:	9307      	strlt	r3, [sp, #28]
 8003d8c:	bfb8      	it	lt
 8003d8e:	9204      	strlt	r2, [sp, #16]
 8003d90:	7823      	ldrb	r3, [r4, #0]
 8003d92:	2b2e      	cmp	r3, #46	@ 0x2e
 8003d94:	d10a      	bne.n	8003dac <_svfiprintf_r+0x130>
 8003d96:	7863      	ldrb	r3, [r4, #1]
 8003d98:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d9a:	d132      	bne.n	8003e02 <_svfiprintf_r+0x186>
 8003d9c:	9b03      	ldr	r3, [sp, #12]
 8003d9e:	1d1a      	adds	r2, r3, #4
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	9203      	str	r2, [sp, #12]
 8003da4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003da8:	3402      	adds	r4, #2
 8003daa:	9305      	str	r3, [sp, #20]
 8003dac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003e70 <_svfiprintf_r+0x1f4>
 8003db0:	7821      	ldrb	r1, [r4, #0]
 8003db2:	2203      	movs	r2, #3
 8003db4:	4650      	mov	r0, sl
 8003db6:	f7fc fa43 	bl	8000240 <memchr>
 8003dba:	b138      	cbz	r0, 8003dcc <_svfiprintf_r+0x150>
 8003dbc:	9b04      	ldr	r3, [sp, #16]
 8003dbe:	eba0 000a 	sub.w	r0, r0, sl
 8003dc2:	2240      	movs	r2, #64	@ 0x40
 8003dc4:	4082      	lsls	r2, r0
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	3401      	adds	r4, #1
 8003dca:	9304      	str	r3, [sp, #16]
 8003dcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dd0:	4824      	ldr	r0, [pc, #144]	@ (8003e64 <_svfiprintf_r+0x1e8>)
 8003dd2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003dd6:	2206      	movs	r2, #6
 8003dd8:	f7fc fa32 	bl	8000240 <memchr>
 8003ddc:	2800      	cmp	r0, #0
 8003dde:	d036      	beq.n	8003e4e <_svfiprintf_r+0x1d2>
 8003de0:	4b21      	ldr	r3, [pc, #132]	@ (8003e68 <_svfiprintf_r+0x1ec>)
 8003de2:	bb1b      	cbnz	r3, 8003e2c <_svfiprintf_r+0x1b0>
 8003de4:	9b03      	ldr	r3, [sp, #12]
 8003de6:	3307      	adds	r3, #7
 8003de8:	f023 0307 	bic.w	r3, r3, #7
 8003dec:	3308      	adds	r3, #8
 8003dee:	9303      	str	r3, [sp, #12]
 8003df0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003df2:	4433      	add	r3, r6
 8003df4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003df6:	e76a      	b.n	8003cce <_svfiprintf_r+0x52>
 8003df8:	fb0c 3202 	mla	r2, ip, r2, r3
 8003dfc:	460c      	mov	r4, r1
 8003dfe:	2001      	movs	r0, #1
 8003e00:	e7a8      	b.n	8003d54 <_svfiprintf_r+0xd8>
 8003e02:	2300      	movs	r3, #0
 8003e04:	3401      	adds	r4, #1
 8003e06:	9305      	str	r3, [sp, #20]
 8003e08:	4619      	mov	r1, r3
 8003e0a:	f04f 0c0a 	mov.w	ip, #10
 8003e0e:	4620      	mov	r0, r4
 8003e10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e14:	3a30      	subs	r2, #48	@ 0x30
 8003e16:	2a09      	cmp	r2, #9
 8003e18:	d903      	bls.n	8003e22 <_svfiprintf_r+0x1a6>
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d0c6      	beq.n	8003dac <_svfiprintf_r+0x130>
 8003e1e:	9105      	str	r1, [sp, #20]
 8003e20:	e7c4      	b.n	8003dac <_svfiprintf_r+0x130>
 8003e22:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e26:	4604      	mov	r4, r0
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e7f0      	b.n	8003e0e <_svfiprintf_r+0x192>
 8003e2c:	ab03      	add	r3, sp, #12
 8003e2e:	9300      	str	r3, [sp, #0]
 8003e30:	462a      	mov	r2, r5
 8003e32:	4b0e      	ldr	r3, [pc, #56]	@ (8003e6c <_svfiprintf_r+0x1f0>)
 8003e34:	a904      	add	r1, sp, #16
 8003e36:	4638      	mov	r0, r7
 8003e38:	f3af 8000 	nop.w
 8003e3c:	1c42      	adds	r2, r0, #1
 8003e3e:	4606      	mov	r6, r0
 8003e40:	d1d6      	bne.n	8003df0 <_svfiprintf_r+0x174>
 8003e42:	89ab      	ldrh	r3, [r5, #12]
 8003e44:	065b      	lsls	r3, r3, #25
 8003e46:	f53f af2d 	bmi.w	8003ca4 <_svfiprintf_r+0x28>
 8003e4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003e4c:	e72c      	b.n	8003ca8 <_svfiprintf_r+0x2c>
 8003e4e:	ab03      	add	r3, sp, #12
 8003e50:	9300      	str	r3, [sp, #0]
 8003e52:	462a      	mov	r2, r5
 8003e54:	4b05      	ldr	r3, [pc, #20]	@ (8003e6c <_svfiprintf_r+0x1f0>)
 8003e56:	a904      	add	r1, sp, #16
 8003e58:	4638      	mov	r0, r7
 8003e5a:	f000 f879 	bl	8003f50 <_printf_i>
 8003e5e:	e7ed      	b.n	8003e3c <_svfiprintf_r+0x1c0>
 8003e60:	080042a4 	.word	0x080042a4
 8003e64:	080042ae 	.word	0x080042ae
 8003e68:	00000000 	.word	0x00000000
 8003e6c:	08003bc5 	.word	0x08003bc5
 8003e70:	080042aa 	.word	0x080042aa

08003e74 <_printf_common>:
 8003e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e78:	4616      	mov	r6, r2
 8003e7a:	4698      	mov	r8, r3
 8003e7c:	688a      	ldr	r2, [r1, #8]
 8003e7e:	690b      	ldr	r3, [r1, #16]
 8003e80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003e84:	4293      	cmp	r3, r2
 8003e86:	bfb8      	it	lt
 8003e88:	4613      	movlt	r3, r2
 8003e8a:	6033      	str	r3, [r6, #0]
 8003e8c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003e90:	4607      	mov	r7, r0
 8003e92:	460c      	mov	r4, r1
 8003e94:	b10a      	cbz	r2, 8003e9a <_printf_common+0x26>
 8003e96:	3301      	adds	r3, #1
 8003e98:	6033      	str	r3, [r6, #0]
 8003e9a:	6823      	ldr	r3, [r4, #0]
 8003e9c:	0699      	lsls	r1, r3, #26
 8003e9e:	bf42      	ittt	mi
 8003ea0:	6833      	ldrmi	r3, [r6, #0]
 8003ea2:	3302      	addmi	r3, #2
 8003ea4:	6033      	strmi	r3, [r6, #0]
 8003ea6:	6825      	ldr	r5, [r4, #0]
 8003ea8:	f015 0506 	ands.w	r5, r5, #6
 8003eac:	d106      	bne.n	8003ebc <_printf_common+0x48>
 8003eae:	f104 0a19 	add.w	sl, r4, #25
 8003eb2:	68e3      	ldr	r3, [r4, #12]
 8003eb4:	6832      	ldr	r2, [r6, #0]
 8003eb6:	1a9b      	subs	r3, r3, r2
 8003eb8:	42ab      	cmp	r3, r5
 8003eba:	dc26      	bgt.n	8003f0a <_printf_common+0x96>
 8003ebc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003ec0:	6822      	ldr	r2, [r4, #0]
 8003ec2:	3b00      	subs	r3, #0
 8003ec4:	bf18      	it	ne
 8003ec6:	2301      	movne	r3, #1
 8003ec8:	0692      	lsls	r2, r2, #26
 8003eca:	d42b      	bmi.n	8003f24 <_printf_common+0xb0>
 8003ecc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003ed0:	4641      	mov	r1, r8
 8003ed2:	4638      	mov	r0, r7
 8003ed4:	47c8      	blx	r9
 8003ed6:	3001      	adds	r0, #1
 8003ed8:	d01e      	beq.n	8003f18 <_printf_common+0xa4>
 8003eda:	6823      	ldr	r3, [r4, #0]
 8003edc:	6922      	ldr	r2, [r4, #16]
 8003ede:	f003 0306 	and.w	r3, r3, #6
 8003ee2:	2b04      	cmp	r3, #4
 8003ee4:	bf02      	ittt	eq
 8003ee6:	68e5      	ldreq	r5, [r4, #12]
 8003ee8:	6833      	ldreq	r3, [r6, #0]
 8003eea:	1aed      	subeq	r5, r5, r3
 8003eec:	68a3      	ldr	r3, [r4, #8]
 8003eee:	bf0c      	ite	eq
 8003ef0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ef4:	2500      	movne	r5, #0
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	bfc4      	itt	gt
 8003efa:	1a9b      	subgt	r3, r3, r2
 8003efc:	18ed      	addgt	r5, r5, r3
 8003efe:	2600      	movs	r6, #0
 8003f00:	341a      	adds	r4, #26
 8003f02:	42b5      	cmp	r5, r6
 8003f04:	d11a      	bne.n	8003f3c <_printf_common+0xc8>
 8003f06:	2000      	movs	r0, #0
 8003f08:	e008      	b.n	8003f1c <_printf_common+0xa8>
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	4652      	mov	r2, sl
 8003f0e:	4641      	mov	r1, r8
 8003f10:	4638      	mov	r0, r7
 8003f12:	47c8      	blx	r9
 8003f14:	3001      	adds	r0, #1
 8003f16:	d103      	bne.n	8003f20 <_printf_common+0xac>
 8003f18:	f04f 30ff 	mov.w	r0, #4294967295
 8003f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f20:	3501      	adds	r5, #1
 8003f22:	e7c6      	b.n	8003eb2 <_printf_common+0x3e>
 8003f24:	18e1      	adds	r1, r4, r3
 8003f26:	1c5a      	adds	r2, r3, #1
 8003f28:	2030      	movs	r0, #48	@ 0x30
 8003f2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003f2e:	4422      	add	r2, r4
 8003f30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003f34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003f38:	3302      	adds	r3, #2
 8003f3a:	e7c7      	b.n	8003ecc <_printf_common+0x58>
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	4622      	mov	r2, r4
 8003f40:	4641      	mov	r1, r8
 8003f42:	4638      	mov	r0, r7
 8003f44:	47c8      	blx	r9
 8003f46:	3001      	adds	r0, #1
 8003f48:	d0e6      	beq.n	8003f18 <_printf_common+0xa4>
 8003f4a:	3601      	adds	r6, #1
 8003f4c:	e7d9      	b.n	8003f02 <_printf_common+0x8e>
	...

08003f50 <_printf_i>:
 8003f50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f54:	7e0f      	ldrb	r7, [r1, #24]
 8003f56:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003f58:	2f78      	cmp	r7, #120	@ 0x78
 8003f5a:	4691      	mov	r9, r2
 8003f5c:	4680      	mov	r8, r0
 8003f5e:	460c      	mov	r4, r1
 8003f60:	469a      	mov	sl, r3
 8003f62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003f66:	d807      	bhi.n	8003f78 <_printf_i+0x28>
 8003f68:	2f62      	cmp	r7, #98	@ 0x62
 8003f6a:	d80a      	bhi.n	8003f82 <_printf_i+0x32>
 8003f6c:	2f00      	cmp	r7, #0
 8003f6e:	f000 80d1 	beq.w	8004114 <_printf_i+0x1c4>
 8003f72:	2f58      	cmp	r7, #88	@ 0x58
 8003f74:	f000 80b8 	beq.w	80040e8 <_printf_i+0x198>
 8003f78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003f80:	e03a      	b.n	8003ff8 <_printf_i+0xa8>
 8003f82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003f86:	2b15      	cmp	r3, #21
 8003f88:	d8f6      	bhi.n	8003f78 <_printf_i+0x28>
 8003f8a:	a101      	add	r1, pc, #4	@ (adr r1, 8003f90 <_printf_i+0x40>)
 8003f8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f90:	08003fe9 	.word	0x08003fe9
 8003f94:	08003ffd 	.word	0x08003ffd
 8003f98:	08003f79 	.word	0x08003f79
 8003f9c:	08003f79 	.word	0x08003f79
 8003fa0:	08003f79 	.word	0x08003f79
 8003fa4:	08003f79 	.word	0x08003f79
 8003fa8:	08003ffd 	.word	0x08003ffd
 8003fac:	08003f79 	.word	0x08003f79
 8003fb0:	08003f79 	.word	0x08003f79
 8003fb4:	08003f79 	.word	0x08003f79
 8003fb8:	08003f79 	.word	0x08003f79
 8003fbc:	080040fb 	.word	0x080040fb
 8003fc0:	08004027 	.word	0x08004027
 8003fc4:	080040b5 	.word	0x080040b5
 8003fc8:	08003f79 	.word	0x08003f79
 8003fcc:	08003f79 	.word	0x08003f79
 8003fd0:	0800411d 	.word	0x0800411d
 8003fd4:	08003f79 	.word	0x08003f79
 8003fd8:	08004027 	.word	0x08004027
 8003fdc:	08003f79 	.word	0x08003f79
 8003fe0:	08003f79 	.word	0x08003f79
 8003fe4:	080040bd 	.word	0x080040bd
 8003fe8:	6833      	ldr	r3, [r6, #0]
 8003fea:	1d1a      	adds	r2, r3, #4
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6032      	str	r2, [r6, #0]
 8003ff0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ff4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e09c      	b.n	8004136 <_printf_i+0x1e6>
 8003ffc:	6833      	ldr	r3, [r6, #0]
 8003ffe:	6820      	ldr	r0, [r4, #0]
 8004000:	1d19      	adds	r1, r3, #4
 8004002:	6031      	str	r1, [r6, #0]
 8004004:	0606      	lsls	r6, r0, #24
 8004006:	d501      	bpl.n	800400c <_printf_i+0xbc>
 8004008:	681d      	ldr	r5, [r3, #0]
 800400a:	e003      	b.n	8004014 <_printf_i+0xc4>
 800400c:	0645      	lsls	r5, r0, #25
 800400e:	d5fb      	bpl.n	8004008 <_printf_i+0xb8>
 8004010:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004014:	2d00      	cmp	r5, #0
 8004016:	da03      	bge.n	8004020 <_printf_i+0xd0>
 8004018:	232d      	movs	r3, #45	@ 0x2d
 800401a:	426d      	negs	r5, r5
 800401c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004020:	4858      	ldr	r0, [pc, #352]	@ (8004184 <_printf_i+0x234>)
 8004022:	230a      	movs	r3, #10
 8004024:	e011      	b.n	800404a <_printf_i+0xfa>
 8004026:	6821      	ldr	r1, [r4, #0]
 8004028:	6833      	ldr	r3, [r6, #0]
 800402a:	0608      	lsls	r0, r1, #24
 800402c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004030:	d402      	bmi.n	8004038 <_printf_i+0xe8>
 8004032:	0649      	lsls	r1, r1, #25
 8004034:	bf48      	it	mi
 8004036:	b2ad      	uxthmi	r5, r5
 8004038:	2f6f      	cmp	r7, #111	@ 0x6f
 800403a:	4852      	ldr	r0, [pc, #328]	@ (8004184 <_printf_i+0x234>)
 800403c:	6033      	str	r3, [r6, #0]
 800403e:	bf14      	ite	ne
 8004040:	230a      	movne	r3, #10
 8004042:	2308      	moveq	r3, #8
 8004044:	2100      	movs	r1, #0
 8004046:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800404a:	6866      	ldr	r6, [r4, #4]
 800404c:	60a6      	str	r6, [r4, #8]
 800404e:	2e00      	cmp	r6, #0
 8004050:	db05      	blt.n	800405e <_printf_i+0x10e>
 8004052:	6821      	ldr	r1, [r4, #0]
 8004054:	432e      	orrs	r6, r5
 8004056:	f021 0104 	bic.w	r1, r1, #4
 800405a:	6021      	str	r1, [r4, #0]
 800405c:	d04b      	beq.n	80040f6 <_printf_i+0x1a6>
 800405e:	4616      	mov	r6, r2
 8004060:	fbb5 f1f3 	udiv	r1, r5, r3
 8004064:	fb03 5711 	mls	r7, r3, r1, r5
 8004068:	5dc7      	ldrb	r7, [r0, r7]
 800406a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800406e:	462f      	mov	r7, r5
 8004070:	42bb      	cmp	r3, r7
 8004072:	460d      	mov	r5, r1
 8004074:	d9f4      	bls.n	8004060 <_printf_i+0x110>
 8004076:	2b08      	cmp	r3, #8
 8004078:	d10b      	bne.n	8004092 <_printf_i+0x142>
 800407a:	6823      	ldr	r3, [r4, #0]
 800407c:	07df      	lsls	r7, r3, #31
 800407e:	d508      	bpl.n	8004092 <_printf_i+0x142>
 8004080:	6923      	ldr	r3, [r4, #16]
 8004082:	6861      	ldr	r1, [r4, #4]
 8004084:	4299      	cmp	r1, r3
 8004086:	bfde      	ittt	le
 8004088:	2330      	movle	r3, #48	@ 0x30
 800408a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800408e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004092:	1b92      	subs	r2, r2, r6
 8004094:	6122      	str	r2, [r4, #16]
 8004096:	f8cd a000 	str.w	sl, [sp]
 800409a:	464b      	mov	r3, r9
 800409c:	aa03      	add	r2, sp, #12
 800409e:	4621      	mov	r1, r4
 80040a0:	4640      	mov	r0, r8
 80040a2:	f7ff fee7 	bl	8003e74 <_printf_common>
 80040a6:	3001      	adds	r0, #1
 80040a8:	d14a      	bne.n	8004140 <_printf_i+0x1f0>
 80040aa:	f04f 30ff 	mov.w	r0, #4294967295
 80040ae:	b004      	add	sp, #16
 80040b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040b4:	6823      	ldr	r3, [r4, #0]
 80040b6:	f043 0320 	orr.w	r3, r3, #32
 80040ba:	6023      	str	r3, [r4, #0]
 80040bc:	4832      	ldr	r0, [pc, #200]	@ (8004188 <_printf_i+0x238>)
 80040be:	2778      	movs	r7, #120	@ 0x78
 80040c0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80040c4:	6823      	ldr	r3, [r4, #0]
 80040c6:	6831      	ldr	r1, [r6, #0]
 80040c8:	061f      	lsls	r7, r3, #24
 80040ca:	f851 5b04 	ldr.w	r5, [r1], #4
 80040ce:	d402      	bmi.n	80040d6 <_printf_i+0x186>
 80040d0:	065f      	lsls	r7, r3, #25
 80040d2:	bf48      	it	mi
 80040d4:	b2ad      	uxthmi	r5, r5
 80040d6:	6031      	str	r1, [r6, #0]
 80040d8:	07d9      	lsls	r1, r3, #31
 80040da:	bf44      	itt	mi
 80040dc:	f043 0320 	orrmi.w	r3, r3, #32
 80040e0:	6023      	strmi	r3, [r4, #0]
 80040e2:	b11d      	cbz	r5, 80040ec <_printf_i+0x19c>
 80040e4:	2310      	movs	r3, #16
 80040e6:	e7ad      	b.n	8004044 <_printf_i+0xf4>
 80040e8:	4826      	ldr	r0, [pc, #152]	@ (8004184 <_printf_i+0x234>)
 80040ea:	e7e9      	b.n	80040c0 <_printf_i+0x170>
 80040ec:	6823      	ldr	r3, [r4, #0]
 80040ee:	f023 0320 	bic.w	r3, r3, #32
 80040f2:	6023      	str	r3, [r4, #0]
 80040f4:	e7f6      	b.n	80040e4 <_printf_i+0x194>
 80040f6:	4616      	mov	r6, r2
 80040f8:	e7bd      	b.n	8004076 <_printf_i+0x126>
 80040fa:	6833      	ldr	r3, [r6, #0]
 80040fc:	6825      	ldr	r5, [r4, #0]
 80040fe:	6961      	ldr	r1, [r4, #20]
 8004100:	1d18      	adds	r0, r3, #4
 8004102:	6030      	str	r0, [r6, #0]
 8004104:	062e      	lsls	r6, r5, #24
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	d501      	bpl.n	800410e <_printf_i+0x1be>
 800410a:	6019      	str	r1, [r3, #0]
 800410c:	e002      	b.n	8004114 <_printf_i+0x1c4>
 800410e:	0668      	lsls	r0, r5, #25
 8004110:	d5fb      	bpl.n	800410a <_printf_i+0x1ba>
 8004112:	8019      	strh	r1, [r3, #0]
 8004114:	2300      	movs	r3, #0
 8004116:	6123      	str	r3, [r4, #16]
 8004118:	4616      	mov	r6, r2
 800411a:	e7bc      	b.n	8004096 <_printf_i+0x146>
 800411c:	6833      	ldr	r3, [r6, #0]
 800411e:	1d1a      	adds	r2, r3, #4
 8004120:	6032      	str	r2, [r6, #0]
 8004122:	681e      	ldr	r6, [r3, #0]
 8004124:	6862      	ldr	r2, [r4, #4]
 8004126:	2100      	movs	r1, #0
 8004128:	4630      	mov	r0, r6
 800412a:	f7fc f889 	bl	8000240 <memchr>
 800412e:	b108      	cbz	r0, 8004134 <_printf_i+0x1e4>
 8004130:	1b80      	subs	r0, r0, r6
 8004132:	6060      	str	r0, [r4, #4]
 8004134:	6863      	ldr	r3, [r4, #4]
 8004136:	6123      	str	r3, [r4, #16]
 8004138:	2300      	movs	r3, #0
 800413a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800413e:	e7aa      	b.n	8004096 <_printf_i+0x146>
 8004140:	6923      	ldr	r3, [r4, #16]
 8004142:	4632      	mov	r2, r6
 8004144:	4649      	mov	r1, r9
 8004146:	4640      	mov	r0, r8
 8004148:	47d0      	blx	sl
 800414a:	3001      	adds	r0, #1
 800414c:	d0ad      	beq.n	80040aa <_printf_i+0x15a>
 800414e:	6823      	ldr	r3, [r4, #0]
 8004150:	079b      	lsls	r3, r3, #30
 8004152:	d413      	bmi.n	800417c <_printf_i+0x22c>
 8004154:	68e0      	ldr	r0, [r4, #12]
 8004156:	9b03      	ldr	r3, [sp, #12]
 8004158:	4298      	cmp	r0, r3
 800415a:	bfb8      	it	lt
 800415c:	4618      	movlt	r0, r3
 800415e:	e7a6      	b.n	80040ae <_printf_i+0x15e>
 8004160:	2301      	movs	r3, #1
 8004162:	4632      	mov	r2, r6
 8004164:	4649      	mov	r1, r9
 8004166:	4640      	mov	r0, r8
 8004168:	47d0      	blx	sl
 800416a:	3001      	adds	r0, #1
 800416c:	d09d      	beq.n	80040aa <_printf_i+0x15a>
 800416e:	3501      	adds	r5, #1
 8004170:	68e3      	ldr	r3, [r4, #12]
 8004172:	9903      	ldr	r1, [sp, #12]
 8004174:	1a5b      	subs	r3, r3, r1
 8004176:	42ab      	cmp	r3, r5
 8004178:	dcf2      	bgt.n	8004160 <_printf_i+0x210>
 800417a:	e7eb      	b.n	8004154 <_printf_i+0x204>
 800417c:	2500      	movs	r5, #0
 800417e:	f104 0619 	add.w	r6, r4, #25
 8004182:	e7f5      	b.n	8004170 <_printf_i+0x220>
 8004184:	080042b5 	.word	0x080042b5
 8004188:	080042c6 	.word	0x080042c6

0800418c <memmove>:
 800418c:	4288      	cmp	r0, r1
 800418e:	b510      	push	{r4, lr}
 8004190:	eb01 0402 	add.w	r4, r1, r2
 8004194:	d902      	bls.n	800419c <memmove+0x10>
 8004196:	4284      	cmp	r4, r0
 8004198:	4623      	mov	r3, r4
 800419a:	d807      	bhi.n	80041ac <memmove+0x20>
 800419c:	1e43      	subs	r3, r0, #1
 800419e:	42a1      	cmp	r1, r4
 80041a0:	d008      	beq.n	80041b4 <memmove+0x28>
 80041a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80041aa:	e7f8      	b.n	800419e <memmove+0x12>
 80041ac:	4402      	add	r2, r0
 80041ae:	4601      	mov	r1, r0
 80041b0:	428a      	cmp	r2, r1
 80041b2:	d100      	bne.n	80041b6 <memmove+0x2a>
 80041b4:	bd10      	pop	{r4, pc}
 80041b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80041ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80041be:	e7f7      	b.n	80041b0 <memmove+0x24>

080041c0 <_sbrk_r>:
 80041c0:	b538      	push	{r3, r4, r5, lr}
 80041c2:	4d06      	ldr	r5, [pc, #24]	@ (80041dc <_sbrk_r+0x1c>)
 80041c4:	2300      	movs	r3, #0
 80041c6:	4604      	mov	r4, r0
 80041c8:	4608      	mov	r0, r1
 80041ca:	602b      	str	r3, [r5, #0]
 80041cc:	f7fc fcf4 	bl	8000bb8 <_sbrk>
 80041d0:	1c43      	adds	r3, r0, #1
 80041d2:	d102      	bne.n	80041da <_sbrk_r+0x1a>
 80041d4:	682b      	ldr	r3, [r5, #0]
 80041d6:	b103      	cbz	r3, 80041da <_sbrk_r+0x1a>
 80041d8:	6023      	str	r3, [r4, #0]
 80041da:	bd38      	pop	{r3, r4, r5, pc}
 80041dc:	20000304 	.word	0x20000304

080041e0 <memcpy>:
 80041e0:	440a      	add	r2, r1
 80041e2:	4291      	cmp	r1, r2
 80041e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80041e8:	d100      	bne.n	80041ec <memcpy+0xc>
 80041ea:	4770      	bx	lr
 80041ec:	b510      	push	{r4, lr}
 80041ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041f6:	4291      	cmp	r1, r2
 80041f8:	d1f9      	bne.n	80041ee <memcpy+0xe>
 80041fa:	bd10      	pop	{r4, pc}

080041fc <_realloc_r>:
 80041fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004200:	4607      	mov	r7, r0
 8004202:	4614      	mov	r4, r2
 8004204:	460d      	mov	r5, r1
 8004206:	b921      	cbnz	r1, 8004212 <_realloc_r+0x16>
 8004208:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800420c:	4611      	mov	r1, r2
 800420e:	f7ff bc4d 	b.w	8003aac <_malloc_r>
 8004212:	b92a      	cbnz	r2, 8004220 <_realloc_r+0x24>
 8004214:	f7ff fbde 	bl	80039d4 <_free_r>
 8004218:	4625      	mov	r5, r4
 800421a:	4628      	mov	r0, r5
 800421c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004220:	f000 f81a 	bl	8004258 <_malloc_usable_size_r>
 8004224:	4284      	cmp	r4, r0
 8004226:	4606      	mov	r6, r0
 8004228:	d802      	bhi.n	8004230 <_realloc_r+0x34>
 800422a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800422e:	d8f4      	bhi.n	800421a <_realloc_r+0x1e>
 8004230:	4621      	mov	r1, r4
 8004232:	4638      	mov	r0, r7
 8004234:	f7ff fc3a 	bl	8003aac <_malloc_r>
 8004238:	4680      	mov	r8, r0
 800423a:	b908      	cbnz	r0, 8004240 <_realloc_r+0x44>
 800423c:	4645      	mov	r5, r8
 800423e:	e7ec      	b.n	800421a <_realloc_r+0x1e>
 8004240:	42b4      	cmp	r4, r6
 8004242:	4622      	mov	r2, r4
 8004244:	4629      	mov	r1, r5
 8004246:	bf28      	it	cs
 8004248:	4632      	movcs	r2, r6
 800424a:	f7ff ffc9 	bl	80041e0 <memcpy>
 800424e:	4629      	mov	r1, r5
 8004250:	4638      	mov	r0, r7
 8004252:	f7ff fbbf 	bl	80039d4 <_free_r>
 8004256:	e7f1      	b.n	800423c <_realloc_r+0x40>

08004258 <_malloc_usable_size_r>:
 8004258:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800425c:	1f18      	subs	r0, r3, #4
 800425e:	2b00      	cmp	r3, #0
 8004260:	bfbc      	itt	lt
 8004262:	580b      	ldrlt	r3, [r1, r0]
 8004264:	18c0      	addlt	r0, r0, r3
 8004266:	4770      	bx	lr

08004268 <_init>:
 8004268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800426a:	bf00      	nop
 800426c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800426e:	bc08      	pop	{r3}
 8004270:	469e      	mov	lr, r3
 8004272:	4770      	bx	lr

08004274 <_fini>:
 8004274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004276:	bf00      	nop
 8004278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800427a:	bc08      	pop	{r3}
 800427c:	469e      	mov	lr, r3
 800427e:	4770      	bx	lr
