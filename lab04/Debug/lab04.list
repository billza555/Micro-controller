
lab04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e7c  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003074  08003074  00004074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800309c  0800309c  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800309c  0800309c  0000409c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080030a4  080030a4  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030a4  080030a4  000040a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080030a8  080030a8  000040a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080030ac  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  080030b8  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  080030b8  000050bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a126  00000000  00000000  0000503a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001977  00000000  00000000  0000f160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000788  00000000  00000000  00010ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005b8  00000000  00000000  00011260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026271  00000000  00000000  00011818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a80c  00000000  00000000  00037a89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed47d  00000000  00000000  00042295  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012f712  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ce0  00000000  00000000  0012f758  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  00131438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	0800305c 	.word	0x0800305c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	0800305c 	.word	0x0800305c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b988 	b.w	8000560 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	468e      	mov	lr, r1
 8000270:	4604      	mov	r4, r0
 8000272:	4688      	mov	r8, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d962      	bls.n	8000344 <__udivmoddi4+0xdc>
 800027e:	fab2 f682 	clz	r6, r2
 8000282:	b14e      	cbz	r6, 8000298 <__udivmoddi4+0x30>
 8000284:	f1c6 0320 	rsb	r3, r6, #32
 8000288:	fa01 f806 	lsl.w	r8, r1, r6
 800028c:	fa20 f303 	lsr.w	r3, r0, r3
 8000290:	40b7      	lsls	r7, r6
 8000292:	ea43 0808 	orr.w	r8, r3, r8
 8000296:	40b4      	lsls	r4, r6
 8000298:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800029c:	fa1f fc87 	uxth.w	ip, r7
 80002a0:	fbb8 f1fe 	udiv	r1, r8, lr
 80002a4:	0c23      	lsrs	r3, r4, #16
 80002a6:	fb0e 8811 	mls	r8, lr, r1, r8
 80002aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ae:	fb01 f20c 	mul.w	r2, r1, ip
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b6:	18fb      	adds	r3, r7, r3
 80002b8:	f101 30ff 	add.w	r0, r1, #4294967295
 80002bc:	f080 80ea 	bcs.w	8000494 <__udivmoddi4+0x22c>
 80002c0:	429a      	cmp	r2, r3
 80002c2:	f240 80e7 	bls.w	8000494 <__udivmoddi4+0x22c>
 80002c6:	3902      	subs	r1, #2
 80002c8:	443b      	add	r3, r7
 80002ca:	1a9a      	subs	r2, r3, r2
 80002cc:	b2a3      	uxth	r3, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002da:	fb00 fc0c 	mul.w	ip, r0, ip
 80002de:	459c      	cmp	ip, r3
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0x8e>
 80002e2:	18fb      	adds	r3, r7, r3
 80002e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e8:	f080 80d6 	bcs.w	8000498 <__udivmoddi4+0x230>
 80002ec:	459c      	cmp	ip, r3
 80002ee:	f240 80d3 	bls.w	8000498 <__udivmoddi4+0x230>
 80002f2:	443b      	add	r3, r7
 80002f4:	3802      	subs	r0, #2
 80002f6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fa:	eba3 030c 	sub.w	r3, r3, ip
 80002fe:	2100      	movs	r1, #0
 8000300:	b11d      	cbz	r5, 800030a <__udivmoddi4+0xa2>
 8000302:	40f3      	lsrs	r3, r6
 8000304:	2200      	movs	r2, #0
 8000306:	e9c5 3200 	strd	r3, r2, [r5]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d905      	bls.n	800031e <__udivmoddi4+0xb6>
 8000312:	b10d      	cbz	r5, 8000318 <__udivmoddi4+0xb0>
 8000314:	e9c5 0100 	strd	r0, r1, [r5]
 8000318:	2100      	movs	r1, #0
 800031a:	4608      	mov	r0, r1
 800031c:	e7f5      	b.n	800030a <__udivmoddi4+0xa2>
 800031e:	fab3 f183 	clz	r1, r3
 8000322:	2900      	cmp	r1, #0
 8000324:	d146      	bne.n	80003b4 <__udivmoddi4+0x14c>
 8000326:	4573      	cmp	r3, lr
 8000328:	d302      	bcc.n	8000330 <__udivmoddi4+0xc8>
 800032a:	4282      	cmp	r2, r0
 800032c:	f200 8105 	bhi.w	800053a <__udivmoddi4+0x2d2>
 8000330:	1a84      	subs	r4, r0, r2
 8000332:	eb6e 0203 	sbc.w	r2, lr, r3
 8000336:	2001      	movs	r0, #1
 8000338:	4690      	mov	r8, r2
 800033a:	2d00      	cmp	r5, #0
 800033c:	d0e5      	beq.n	800030a <__udivmoddi4+0xa2>
 800033e:	e9c5 4800 	strd	r4, r8, [r5]
 8000342:	e7e2      	b.n	800030a <__udivmoddi4+0xa2>
 8000344:	2a00      	cmp	r2, #0
 8000346:	f000 8090 	beq.w	800046a <__udivmoddi4+0x202>
 800034a:	fab2 f682 	clz	r6, r2
 800034e:	2e00      	cmp	r6, #0
 8000350:	f040 80a4 	bne.w	800049c <__udivmoddi4+0x234>
 8000354:	1a8a      	subs	r2, r1, r2
 8000356:	0c03      	lsrs	r3, r0, #16
 8000358:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035c:	b280      	uxth	r0, r0
 800035e:	b2bc      	uxth	r4, r7
 8000360:	2101      	movs	r1, #1
 8000362:	fbb2 fcfe 	udiv	ip, r2, lr
 8000366:	fb0e 221c 	mls	r2, lr, ip, r2
 800036a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800036e:	fb04 f20c 	mul.w	r2, r4, ip
 8000372:	429a      	cmp	r2, r3
 8000374:	d907      	bls.n	8000386 <__udivmoddi4+0x11e>
 8000376:	18fb      	adds	r3, r7, r3
 8000378:	f10c 38ff 	add.w	r8, ip, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x11c>
 800037e:	429a      	cmp	r2, r3
 8000380:	f200 80e0 	bhi.w	8000544 <__udivmoddi4+0x2dc>
 8000384:	46c4      	mov	ip, r8
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	fbb3 f2fe 	udiv	r2, r3, lr
 800038c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000390:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000394:	fb02 f404 	mul.w	r4, r2, r4
 8000398:	429c      	cmp	r4, r3
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x144>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f102 30ff 	add.w	r0, r2, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x142>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f200 80ca 	bhi.w	800053e <__udivmoddi4+0x2d6>
 80003aa:	4602      	mov	r2, r0
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003b2:	e7a5      	b.n	8000300 <__udivmoddi4+0x98>
 80003b4:	f1c1 0620 	rsb	r6, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 f706 	lsr.w	r7, r2, r6
 80003be:	431f      	orrs	r7, r3
 80003c0:	fa0e f401 	lsl.w	r4, lr, r1
 80003c4:	fa20 f306 	lsr.w	r3, r0, r6
 80003c8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003cc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003d0:	4323      	orrs	r3, r4
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	fa1f fc87 	uxth.w	ip, r7
 80003da:	fbbe f0f9 	udiv	r0, lr, r9
 80003de:	0c1c      	lsrs	r4, r3, #16
 80003e0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003e4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003e8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003ec:	45a6      	cmp	lr, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d909      	bls.n	8000408 <__udivmoddi4+0x1a0>
 80003f4:	193c      	adds	r4, r7, r4
 80003f6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003fa:	f080 809c 	bcs.w	8000536 <__udivmoddi4+0x2ce>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f240 8099 	bls.w	8000536 <__udivmoddi4+0x2ce>
 8000404:	3802      	subs	r0, #2
 8000406:	443c      	add	r4, r7
 8000408:	eba4 040e 	sub.w	r4, r4, lr
 800040c:	fa1f fe83 	uxth.w	lr, r3
 8000410:	fbb4 f3f9 	udiv	r3, r4, r9
 8000414:	fb09 4413 	mls	r4, r9, r3, r4
 8000418:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800041c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000420:	45a4      	cmp	ip, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1ce>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f103 3eff 	add.w	lr, r3, #4294967295
 800042a:	f080 8082 	bcs.w	8000532 <__udivmoddi4+0x2ca>
 800042e:	45a4      	cmp	ip, r4
 8000430:	d97f      	bls.n	8000532 <__udivmoddi4+0x2ca>
 8000432:	3b02      	subs	r3, #2
 8000434:	443c      	add	r4, r7
 8000436:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800043a:	eba4 040c 	sub.w	r4, r4, ip
 800043e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000442:	4564      	cmp	r4, ip
 8000444:	4673      	mov	r3, lr
 8000446:	46e1      	mov	r9, ip
 8000448:	d362      	bcc.n	8000510 <__udivmoddi4+0x2a8>
 800044a:	d05f      	beq.n	800050c <__udivmoddi4+0x2a4>
 800044c:	b15d      	cbz	r5, 8000466 <__udivmoddi4+0x1fe>
 800044e:	ebb8 0203 	subs.w	r2, r8, r3
 8000452:	eb64 0409 	sbc.w	r4, r4, r9
 8000456:	fa04 f606 	lsl.w	r6, r4, r6
 800045a:	fa22 f301 	lsr.w	r3, r2, r1
 800045e:	431e      	orrs	r6, r3
 8000460:	40cc      	lsrs	r4, r1
 8000462:	e9c5 6400 	strd	r6, r4, [r5]
 8000466:	2100      	movs	r1, #0
 8000468:	e74f      	b.n	800030a <__udivmoddi4+0xa2>
 800046a:	fbb1 fcf2 	udiv	ip, r1, r2
 800046e:	0c01      	lsrs	r1, r0, #16
 8000470:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000474:	b280      	uxth	r0, r0
 8000476:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800047a:	463b      	mov	r3, r7
 800047c:	4638      	mov	r0, r7
 800047e:	463c      	mov	r4, r7
 8000480:	46b8      	mov	r8, r7
 8000482:	46be      	mov	lr, r7
 8000484:	2620      	movs	r6, #32
 8000486:	fbb1 f1f7 	udiv	r1, r1, r7
 800048a:	eba2 0208 	sub.w	r2, r2, r8
 800048e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000492:	e766      	b.n	8000362 <__udivmoddi4+0xfa>
 8000494:	4601      	mov	r1, r0
 8000496:	e718      	b.n	80002ca <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e72c      	b.n	80002f6 <__udivmoddi4+0x8e>
 800049c:	f1c6 0220 	rsb	r2, r6, #32
 80004a0:	fa2e f302 	lsr.w	r3, lr, r2
 80004a4:	40b7      	lsls	r7, r6
 80004a6:	40b1      	lsls	r1, r6
 80004a8:	fa20 f202 	lsr.w	r2, r0, r2
 80004ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b0:	430a      	orrs	r2, r1
 80004b2:	fbb3 f8fe 	udiv	r8, r3, lr
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	fb0e 3318 	mls	r3, lr, r8, r3
 80004bc:	0c11      	lsrs	r1, r2, #16
 80004be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c2:	fb08 f904 	mul.w	r9, r8, r4
 80004c6:	40b0      	lsls	r0, r6
 80004c8:	4589      	cmp	r9, r1
 80004ca:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ce:	b280      	uxth	r0, r0
 80004d0:	d93e      	bls.n	8000550 <__udivmoddi4+0x2e8>
 80004d2:	1879      	adds	r1, r7, r1
 80004d4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004d8:	d201      	bcs.n	80004de <__udivmoddi4+0x276>
 80004da:	4589      	cmp	r9, r1
 80004dc:	d81f      	bhi.n	800051e <__udivmoddi4+0x2b6>
 80004de:	eba1 0109 	sub.w	r1, r1, r9
 80004e2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e6:	fb09 f804 	mul.w	r8, r9, r4
 80004ea:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ee:	b292      	uxth	r2, r2
 80004f0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004f4:	4542      	cmp	r2, r8
 80004f6:	d229      	bcs.n	800054c <__udivmoddi4+0x2e4>
 80004f8:	18ba      	adds	r2, r7, r2
 80004fa:	f109 31ff 	add.w	r1, r9, #4294967295
 80004fe:	d2c4      	bcs.n	800048a <__udivmoddi4+0x222>
 8000500:	4542      	cmp	r2, r8
 8000502:	d2c2      	bcs.n	800048a <__udivmoddi4+0x222>
 8000504:	f1a9 0102 	sub.w	r1, r9, #2
 8000508:	443a      	add	r2, r7
 800050a:	e7be      	b.n	800048a <__udivmoddi4+0x222>
 800050c:	45f0      	cmp	r8, lr
 800050e:	d29d      	bcs.n	800044c <__udivmoddi4+0x1e4>
 8000510:	ebbe 0302 	subs.w	r3, lr, r2
 8000514:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000518:	3801      	subs	r0, #1
 800051a:	46e1      	mov	r9, ip
 800051c:	e796      	b.n	800044c <__udivmoddi4+0x1e4>
 800051e:	eba7 0909 	sub.w	r9, r7, r9
 8000522:	4449      	add	r1, r9
 8000524:	f1a8 0c02 	sub.w	ip, r8, #2
 8000528:	fbb1 f9fe 	udiv	r9, r1, lr
 800052c:	fb09 f804 	mul.w	r8, r9, r4
 8000530:	e7db      	b.n	80004ea <__udivmoddi4+0x282>
 8000532:	4673      	mov	r3, lr
 8000534:	e77f      	b.n	8000436 <__udivmoddi4+0x1ce>
 8000536:	4650      	mov	r0, sl
 8000538:	e766      	b.n	8000408 <__udivmoddi4+0x1a0>
 800053a:	4608      	mov	r0, r1
 800053c:	e6fd      	b.n	800033a <__udivmoddi4+0xd2>
 800053e:	443b      	add	r3, r7
 8000540:	3a02      	subs	r2, #2
 8000542:	e733      	b.n	80003ac <__udivmoddi4+0x144>
 8000544:	f1ac 0c02 	sub.w	ip, ip, #2
 8000548:	443b      	add	r3, r7
 800054a:	e71c      	b.n	8000386 <__udivmoddi4+0x11e>
 800054c:	4649      	mov	r1, r9
 800054e:	e79c      	b.n	800048a <__udivmoddi4+0x222>
 8000550:	eba1 0109 	sub.w	r1, r1, r9
 8000554:	46c4      	mov	ip, r8
 8000556:	fbb1 f9fe 	udiv	r9, r1, lr
 800055a:	fb09 f804 	mul.w	r8, r9, r4
 800055e:	e7c4      	b.n	80004ea <__udivmoddi4+0x282>

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b08a      	sub	sp, #40	@ 0x28
 8000568:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056a:	f107 0314 	add.w	r3, r7, #20
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	605a      	str	r2, [r3, #4]
 8000574:	609a      	str	r2, [r3, #8]
 8000576:	60da      	str	r2, [r3, #12]
 8000578:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800057a:	4b3a      	ldr	r3, [pc, #232]	@ (8000664 <MX_GPIO_Init+0x100>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057e:	4a39      	ldr	r2, [pc, #228]	@ (8000664 <MX_GPIO_Init+0x100>)
 8000580:	f043 0304 	orr.w	r3, r3, #4
 8000584:	6313      	str	r3, [r2, #48]	@ 0x30
 8000586:	4b37      	ldr	r3, [pc, #220]	@ (8000664 <MX_GPIO_Init+0x100>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058a:	f003 0304 	and.w	r3, r3, #4
 800058e:	613b      	str	r3, [r7, #16]
 8000590:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000592:	4b34      	ldr	r3, [pc, #208]	@ (8000664 <MX_GPIO_Init+0x100>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000596:	4a33      	ldr	r2, [pc, #204]	@ (8000664 <MX_GPIO_Init+0x100>)
 8000598:	f043 0301 	orr.w	r3, r3, #1
 800059c:	6313      	str	r3, [r2, #48]	@ 0x30
 800059e:	4b31      	ldr	r3, [pc, #196]	@ (8000664 <MX_GPIO_Init+0x100>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a2:	f003 0301 	and.w	r3, r3, #1
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005aa:	4b2e      	ldr	r3, [pc, #184]	@ (8000664 <MX_GPIO_Init+0x100>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ae:	4a2d      	ldr	r2, [pc, #180]	@ (8000664 <MX_GPIO_Init+0x100>)
 80005b0:	f043 0302 	orr.w	r3, r3, #2
 80005b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005b6:	4b2b      	ldr	r3, [pc, #172]	@ (8000664 <MX_GPIO_Init+0x100>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ba:	f003 0302 	and.w	r3, r3, #2
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005c2:	4b28      	ldr	r3, [pc, #160]	@ (8000664 <MX_GPIO_Init+0x100>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c6:	4a27      	ldr	r2, [pc, #156]	@ (8000664 <MX_GPIO_Init+0x100>)
 80005c8:	f043 0308 	orr.w	r3, r3, #8
 80005cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ce:	4b25      	ldr	r3, [pc, #148]	@ (8000664 <MX_GPIO_Init+0x100>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d2:	f003 0308 	and.w	r3, r3, #8
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80005da:	2200      	movs	r2, #0
 80005dc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005e0:	4821      	ldr	r0, [pc, #132]	@ (8000668 <MX_GPIO_Init+0x104>)
 80005e2:	f000 fe5f 	bl	80012a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80005e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005ec:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80005f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005f6:	f107 0314 	add.w	r3, r7, #20
 80005fa:	4619      	mov	r1, r3
 80005fc:	481b      	ldr	r0, [pc, #108]	@ (800066c <MX_GPIO_Init+0x108>)
 80005fe:	f000 fca5 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000602:	2301      	movs	r3, #1
 8000604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000606:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800060a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000610:	f107 0314 	add.w	r3, r7, #20
 8000614:	4619      	mov	r1, r3
 8000616:	4816      	ldr	r0, [pc, #88]	@ (8000670 <MX_GPIO_Init+0x10c>)
 8000618:	f000 fc98 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800061c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000620:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000622:	2301      	movs	r3, #1
 8000624:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000626:	2300      	movs	r3, #0
 8000628:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062a:	2300      	movs	r3, #0
 800062c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	4619      	mov	r1, r3
 8000634:	480c      	ldr	r0, [pc, #48]	@ (8000668 <MX_GPIO_Init+0x104>)
 8000636:	f000 fc89 	bl	8000f4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 3);
 800063a:	2203      	movs	r2, #3
 800063c:	2102      	movs	r1, #2
 800063e:	2006      	movs	r0, #6
 8000640:	f000 fbd5 	bl	8000dee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000644:	2006      	movs	r0, #6
 8000646:	f000 fbee 	bl	8000e26 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 1);
 800064a:	2201      	movs	r2, #1
 800064c:	2103      	movs	r1, #3
 800064e:	2028      	movs	r0, #40	@ 0x28
 8000650:	f000 fbcd 	bl	8000dee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000654:	2028      	movs	r0, #40	@ 0x28
 8000656:	f000 fbe6 	bl	8000e26 <HAL_NVIC_EnableIRQ>

}
 800065a:	bf00      	nop
 800065c:	3728      	adds	r7, #40	@ 0x28
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40023800 	.word	0x40023800
 8000668:	40020400 	.word	0x40020400
 800066c:	40020800 	.word	0x40020800
 8000670:	40020000 	.word	0x40020000

08000674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000678:	f000 f8fe 	bl	8000878 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067c:	f000 fa5b 	bl	8000b36 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000680:	f000 f81c 	bl	80006bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000684:	f7ff ff6e 	bl	8000564 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000688:	f000 f99c 	bl	80009c4 <MX_USART3_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	while(__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TC) == RESET){}
 800068c:	bf00      	nop
 800068e:	4b09      	ldr	r3, [pc, #36]	@ (80006b4 <main+0x40>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	69db      	ldr	r3, [r3, #28]
 8000694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000698:	2b40      	cmp	r3, #64	@ 0x40
 800069a:	d1f8      	bne.n	800068e <main+0x1a>
	HAL_UART_Transmit(&huart3, (uint8_t *)".", 1, 100);
 800069c:	2364      	movs	r3, #100	@ 0x64
 800069e:	2201      	movs	r2, #1
 80006a0:	4905      	ldr	r1, [pc, #20]	@ (80006b8 <main+0x44>)
 80006a2:	4804      	ldr	r0, [pc, #16]	@ (80006b4 <main+0x40>)
 80006a4:	f001 ffa4 	bl	80025f0 <HAL_UART_Transmit>
	HAL_Delay(400);
 80006a8:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80006ac:	f000 faa0 	bl	8000bf0 <HAL_Delay>
	while(__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TC) == RESET){}
 80006b0:	e7ec      	b.n	800068c <main+0x18>
 80006b2:	bf00      	nop
 80006b4:	20000030 	.word	0x20000030
 80006b8:	08003074 	.word	0x08003074

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b094      	sub	sp, #80	@ 0x50
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	f107 031c 	add.w	r3, r7, #28
 80006c6:	2234      	movs	r2, #52	@ 0x34
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f002 fc99 	bl	8003002 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	f107 0308 	add.w	r3, r7, #8
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e0:	4b2b      	ldr	r3, [pc, #172]	@ (8000790 <SystemClock_Config+0xd4>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e4:	4a2a      	ldr	r2, [pc, #168]	@ (8000790 <SystemClock_Config+0xd4>)
 80006e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80006ec:	4b28      	ldr	r3, [pc, #160]	@ (8000790 <SystemClock_Config+0xd4>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f8:	4b26      	ldr	r3, [pc, #152]	@ (8000794 <SystemClock_Config+0xd8>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a25      	ldr	r2, [pc, #148]	@ (8000794 <SystemClock_Config+0xd8>)
 80006fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	4b23      	ldr	r3, [pc, #140]	@ (8000794 <SystemClock_Config+0xd8>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800070c:	603b      	str	r3, [r7, #0]
 800070e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000710:	2302      	movs	r3, #2
 8000712:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000714:	2301      	movs	r3, #1
 8000716:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000718:	2310      	movs	r3, #16
 800071a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071c:	2302      	movs	r3, #2
 800071e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000720:	2300      	movs	r3, #0
 8000722:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000724:	2308      	movs	r3, #8
 8000726:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000728:	23d8      	movs	r3, #216	@ 0xd8
 800072a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800072c:	2302      	movs	r3, #2
 800072e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000730:	2302      	movs	r3, #2
 8000732:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000734:	2302      	movs	r3, #2
 8000736:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000738:	f107 031c 	add.w	r3, r7, #28
 800073c:	4618      	mov	r0, r3
 800073e:	f000 fe4d 	bl	80013dc <HAL_RCC_OscConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000748:	f000 f8c2 	bl	80008d0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800074c:	f000 fdf6 	bl	800133c <HAL_PWREx_EnableOverDrive>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000756:	f000 f8bb 	bl	80008d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075a:	230f      	movs	r3, #15
 800075c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075e:	2302      	movs	r3, #2
 8000760:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000762:	2300      	movs	r3, #0
 8000764:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000766:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800076a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800076c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000770:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000772:	f107 0308 	add.w	r3, r7, #8
 8000776:	2107      	movs	r1, #7
 8000778:	4618      	mov	r0, r3
 800077a:	f001 f8dd 	bl	8001938 <HAL_RCC_ClockConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000784:	f000 f8a4 	bl	80008d0 <Error_Handler>
  }
}
 8000788:	bf00      	nop
 800078a:	3750      	adds	r7, #80	@ 0x50
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b086      	sub	sp, #24
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	80fb      	strh	r3, [r7, #6]
    uint32_t now = HAL_GetTick();
 80007a2:	f000 fa19 	bl	8000bd8 <HAL_GetTick>
 80007a6:	60f8      	str	r0, [r7, #12]

    if(GPIO_Pin == GPIO_PIN_13)
 80007a8:	88fb      	ldrh	r3, [r7, #6]
 80007aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007ae:	d124      	bne.n	80007fa <HAL_GPIO_EXTI_Callback+0x62>
    {
        if(now - lastTickButton13 > 200)
 80007b0:	4b2a      	ldr	r3, [pc, #168]	@ (800085c <HAL_GPIO_EXTI_Callback+0xc4>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	68fa      	ldr	r2, [r7, #12]
 80007b6:	1ad3      	subs	r3, r2, r3
 80007b8:	2bc8      	cmp	r3, #200	@ 0xc8
 80007ba:	d94a      	bls.n	8000852 <HAL_GPIO_EXTI_Callback+0xba>
        {
            lastTickButton13 = now;
 80007bc:	4a27      	ldr	r2, [pc, #156]	@ (800085c <HAL_GPIO_EXTI_Callback+0xc4>)
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	6013      	str	r3, [r2, #0]
            HAL_UART_Transmit(&huart3, (uint8_t *)"---", 3, 100);
 80007c2:	2364      	movs	r3, #100	@ 0x64
 80007c4:	2203      	movs	r2, #3
 80007c6:	4926      	ldr	r1, [pc, #152]	@ (8000860 <HAL_GPIO_EXTI_Callback+0xc8>)
 80007c8:	4826      	ldr	r0, [pc, #152]	@ (8000864 <HAL_GPIO_EXTI_Callback+0xcc>)
 80007ca:	f001 ff11 	bl	80025f0 <HAL_UART_Transmit>
            HAL_Delay(200);
 80007ce:	20c8      	movs	r0, #200	@ 0xc8
 80007d0:	f000 fa0e 	bl	8000bf0 <HAL_Delay>

            for(int i = 0; i<20; i++)
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]
 80007d8:	e00b      	b.n	80007f2 <HAL_GPIO_EXTI_Callback+0x5a>
            {
                HAL_UART_Transmit(&huart3, (uint8_t *)"B", 1, 100);
 80007da:	2364      	movs	r3, #100	@ 0x64
 80007dc:	2201      	movs	r2, #1
 80007de:	4922      	ldr	r1, [pc, #136]	@ (8000868 <HAL_GPIO_EXTI_Callback+0xd0>)
 80007e0:	4820      	ldr	r0, [pc, #128]	@ (8000864 <HAL_GPIO_EXTI_Callback+0xcc>)
 80007e2:	f001 ff05 	bl	80025f0 <HAL_UART_Transmit>
                HAL_Delay(200);
 80007e6:	20c8      	movs	r0, #200	@ 0xc8
 80007e8:	f000 fa02 	bl	8000bf0 <HAL_Delay>
            for(int i = 0; i<20; i++)
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	3301      	adds	r3, #1
 80007f0:	617b      	str	r3, [r7, #20]
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	2b13      	cmp	r3, #19
 80007f6:	ddf0      	ble.n	80007da <HAL_GPIO_EXTI_Callback+0x42>
                HAL_UART_Transmit(&huart3, (uint8_t *)"E", 1, 100);
                HAL_Delay(200);
            }
        }
    }
}
 80007f8:	e02b      	b.n	8000852 <HAL_GPIO_EXTI_Callback+0xba>
    else if(GPIO_Pin == GPIO_PIN_0)
 80007fa:	88fb      	ldrh	r3, [r7, #6]
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d128      	bne.n	8000852 <HAL_GPIO_EXTI_Callback+0xba>
        if(now - lastTickButton0 > 200)
 8000800:	4b1a      	ldr	r3, [pc, #104]	@ (800086c <HAL_GPIO_EXTI_Callback+0xd4>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	68fa      	ldr	r2, [r7, #12]
 8000806:	1ad3      	subs	r3, r2, r3
 8000808:	2bc8      	cmp	r3, #200	@ 0xc8
 800080a:	d922      	bls.n	8000852 <HAL_GPIO_EXTI_Callback+0xba>
            lastTickButton0 = now;
 800080c:	4a17      	ldr	r2, [pc, #92]	@ (800086c <HAL_GPIO_EXTI_Callback+0xd4>)
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	6013      	str	r3, [r2, #0]
            HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000812:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000816:	4816      	ldr	r0, [pc, #88]	@ (8000870 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000818:	f000 fd5d 	bl	80012d6 <HAL_GPIO_TogglePin>
            HAL_UART_Transmit(&huart3, (uint8_t *)"---", 3, 100);
 800081c:	2364      	movs	r3, #100	@ 0x64
 800081e:	2203      	movs	r2, #3
 8000820:	490f      	ldr	r1, [pc, #60]	@ (8000860 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000822:	4810      	ldr	r0, [pc, #64]	@ (8000864 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000824:	f001 fee4 	bl	80025f0 <HAL_UART_Transmit>
            HAL_Delay(200);
 8000828:	20c8      	movs	r0, #200	@ 0xc8
 800082a:	f000 f9e1 	bl	8000bf0 <HAL_Delay>
            for(int i = 0; i<20; i++)
 800082e:	2300      	movs	r3, #0
 8000830:	613b      	str	r3, [r7, #16]
 8000832:	e00b      	b.n	800084c <HAL_GPIO_EXTI_Callback+0xb4>
                HAL_UART_Transmit(&huart3, (uint8_t *)"E", 1, 100);
 8000834:	2364      	movs	r3, #100	@ 0x64
 8000836:	2201      	movs	r2, #1
 8000838:	490e      	ldr	r1, [pc, #56]	@ (8000874 <HAL_GPIO_EXTI_Callback+0xdc>)
 800083a:	480a      	ldr	r0, [pc, #40]	@ (8000864 <HAL_GPIO_EXTI_Callback+0xcc>)
 800083c:	f001 fed8 	bl	80025f0 <HAL_UART_Transmit>
                HAL_Delay(200);
 8000840:	20c8      	movs	r0, #200	@ 0xc8
 8000842:	f000 f9d5 	bl	8000bf0 <HAL_Delay>
            for(int i = 0; i<20; i++)
 8000846:	693b      	ldr	r3, [r7, #16]
 8000848:	3301      	adds	r3, #1
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]
 800084e:	2b13      	cmp	r3, #19
 8000850:	ddf0      	ble.n	8000834 <HAL_GPIO_EXTI_Callback+0x9c>
}
 8000852:	bf00      	nop
 8000854:	3718      	adds	r7, #24
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000028 	.word	0x20000028
 8000860:	08003078 	.word	0x08003078
 8000864:	20000030 	.word	0x20000030
 8000868:	0800307c 	.word	0x0800307c
 800086c:	2000002c 	.word	0x2000002c
 8000870:	40020400 	.word	0x40020400
 8000874:	08003080 	.word	0x08003080

08000878 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800087e:	463b      	mov	r3, r7
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800088a:	f000 fae7 	bl	8000e5c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800088e:	2301      	movs	r3, #1
 8000890:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000892:	2300      	movs	r3, #0
 8000894:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000896:	2300      	movs	r3, #0
 8000898:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800089a:	231f      	movs	r3, #31
 800089c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800089e:	2387      	movs	r3, #135	@ 0x87
 80008a0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80008a6:	2300      	movs	r3, #0
 80008a8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80008aa:	2301      	movs	r3, #1
 80008ac:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80008ae:	2301      	movs	r3, #1
 80008b0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80008b2:	2300      	movs	r3, #0
 80008b4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80008b6:	2300      	movs	r3, #0
 80008b8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008ba:	463b      	mov	r3, r7
 80008bc:	4618      	mov	r0, r3
 80008be:	f000 fb05 	bl	8000ecc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80008c2:	2004      	movs	r0, #4
 80008c4:	f000 fae2 	bl	8000e8c <HAL_MPU_Enable>

}
 80008c8:	bf00      	nop
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d4:	b672      	cpsid	i
}
 80008d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <Error_Handler+0x8>

080008dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80008e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000920 <HAL_MspInit+0x44>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000920 <HAL_MspInit+0x44>)
 80008e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000920 <HAL_MspInit+0x44>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fa:	4b09      	ldr	r3, [pc, #36]	@ (8000920 <HAL_MspInit+0x44>)
 80008fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008fe:	4a08      	ldr	r2, [pc, #32]	@ (8000920 <HAL_MspInit+0x44>)
 8000900:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000904:	6453      	str	r3, [r2, #68]	@ 0x44
 8000906:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <HAL_MspInit+0x44>)
 8000908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800090a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000912:	2005      	movs	r0, #5
 8000914:	f000 fa60 	bl	8000dd8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000918:	bf00      	nop
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40023800 	.word	0x40023800

08000924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000928:	bf00      	nop
 800092a:	e7fd      	b.n	8000928 <NMI_Handler+0x4>

0800092c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000930:	bf00      	nop
 8000932:	e7fd      	b.n	8000930 <HardFault_Handler+0x4>

08000934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000938:	bf00      	nop
 800093a:	e7fd      	b.n	8000938 <MemManage_Handler+0x4>

0800093c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000940:	bf00      	nop
 8000942:	e7fd      	b.n	8000940 <BusFault_Handler+0x4>

08000944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <UsageFault_Handler+0x4>

0800094c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr

0800095a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr

08000976 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800097a:	f000 f919 	bl	8000bb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}

08000982 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000986:	2001      	movs	r0, #1
 8000988:	f000 fcc0 	bl	800130c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}

08000990 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000994:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000998:	f000 fcb8 	bl	800130c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}

080009a0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009a4:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <SystemInit+0x20>)
 80009a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009aa:	4a05      	ldr	r2, [pc, #20]	@ (80009c0 <SystemInit+0x20>)
 80009ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009c8:	4b14      	ldr	r3, [pc, #80]	@ (8000a1c <MX_USART3_UART_Init+0x58>)
 80009ca:	4a15      	ldr	r2, [pc, #84]	@ (8000a20 <MX_USART3_UART_Init+0x5c>)
 80009cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009ce:	4b13      	ldr	r3, [pc, #76]	@ (8000a1c <MX_USART3_UART_Init+0x58>)
 80009d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009d6:	4b11      	ldr	r3, [pc, #68]	@ (8000a1c <MX_USART3_UART_Init+0x58>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009dc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a1c <MX_USART3_UART_Init+0x58>)
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a1c <MX_USART3_UART_Init+0x58>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a1c <MX_USART3_UART_Init+0x58>)
 80009ea:	220c      	movs	r2, #12
 80009ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ee:	4b0b      	ldr	r3, [pc, #44]	@ (8000a1c <MX_USART3_UART_Init+0x58>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f4:	4b09      	ldr	r3, [pc, #36]	@ (8000a1c <MX_USART3_UART_Init+0x58>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009fa:	4b08      	ldr	r3, [pc, #32]	@ (8000a1c <MX_USART3_UART_Init+0x58>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a00:	4b06      	ldr	r3, [pc, #24]	@ (8000a1c <MX_USART3_UART_Init+0x58>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a06:	4805      	ldr	r0, [pc, #20]	@ (8000a1c <MX_USART3_UART_Init+0x58>)
 8000a08:	f001 fda4 	bl	8002554 <HAL_UART_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a12:	f7ff ff5d 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000030 	.word	0x20000030
 8000a20:	40004800 	.word	0x40004800

08000a24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b0ae      	sub	sp, #184	@ 0xb8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	2290      	movs	r2, #144	@ 0x90
 8000a42:	2100      	movs	r1, #0
 8000a44:	4618      	mov	r0, r3
 8000a46:	f002 fadc 	bl	8003002 <memset>
  if(uartHandle->Instance==USART3)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a22      	ldr	r2, [pc, #136]	@ (8000ad8 <HAL_UART_MspInit+0xb4>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d13c      	bne.n	8000ace <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a58:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	4618      	mov	r0, r3
 8000a64:	f001 f94e 	bl	8001d04 <HAL_RCCEx_PeriphCLKConfig>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a6e:	f7ff ff2f 	bl	80008d0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a72:	4b1a      	ldr	r3, [pc, #104]	@ (8000adc <HAL_UART_MspInit+0xb8>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a76:	4a19      	ldr	r2, [pc, #100]	@ (8000adc <HAL_UART_MspInit+0xb8>)
 8000a78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a7e:	4b17      	ldr	r3, [pc, #92]	@ (8000adc <HAL_UART_MspInit+0xb8>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a86:	613b      	str	r3, [r7, #16]
 8000a88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a8a:	4b14      	ldr	r3, [pc, #80]	@ (8000adc <HAL_UART_MspInit+0xb8>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	4a13      	ldr	r2, [pc, #76]	@ (8000adc <HAL_UART_MspInit+0xb8>)
 8000a90:	f043 0308 	orr.w	r3, r3, #8
 8000a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a96:	4b11      	ldr	r3, [pc, #68]	@ (8000adc <HAL_UART_MspInit+0xb8>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	f003 0308 	and.w	r3, r3, #8
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000aa2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000aa6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000abc:	2307      	movs	r3, #7
 8000abe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ac2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4805      	ldr	r0, [pc, #20]	@ (8000ae0 <HAL_UART_MspInit+0xbc>)
 8000aca:	f000 fa3f 	bl	8000f4c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000ace:	bf00      	nop
 8000ad0:	37b8      	adds	r7, #184	@ 0xb8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40004800 	.word	0x40004800
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	40020c00 	.word	0x40020c00

08000ae4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ae4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b1c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ae8:	f7ff ff5a 	bl	80009a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000aec:	480c      	ldr	r0, [pc, #48]	@ (8000b20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aee:	490d      	ldr	r1, [pc, #52]	@ (8000b24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000af0:	4a0d      	ldr	r2, [pc, #52]	@ (8000b28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af4:	e002      	b.n	8000afc <LoopCopyDataInit>

08000af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afa:	3304      	adds	r3, #4

08000afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b00:	d3f9      	bcc.n	8000af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b02:	4a0a      	ldr	r2, [pc, #40]	@ (8000b2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b04:	4c0a      	ldr	r4, [pc, #40]	@ (8000b30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b08:	e001      	b.n	8000b0e <LoopFillZerobss>

08000b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b0c:	3204      	adds	r2, #4

08000b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b10:	d3fb      	bcc.n	8000b0a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b12:	f002 fa7f 	bl	8003014 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b16:	f7ff fdad 	bl	8000674 <main>
  bx  lr    
 8000b1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b1c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000b20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b24:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b28:	080030ac 	.word	0x080030ac
  ldr r2, =_sbss
 8000b2c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b30:	200000bc 	.word	0x200000bc

08000b34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b34:	e7fe      	b.n	8000b34 <ADC_IRQHandler>

08000b36 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b3a:	2003      	movs	r0, #3
 8000b3c:	f000 f94c 	bl	8000dd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b40:	2000      	movs	r0, #0
 8000b42:	f000 f805 	bl	8000b50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b46:	f7ff fec9 	bl	80008dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b4a:	2300      	movs	r3, #0
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b58:	4b12      	ldr	r3, [pc, #72]	@ (8000ba4 <HAL_InitTick+0x54>)
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ba8 <HAL_InitTick+0x58>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	4619      	mov	r1, r3
 8000b62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 f967 	bl	8000e42 <HAL_SYSTICK_Config>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e00e      	b.n	8000b9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2b0f      	cmp	r3, #15
 8000b82:	d80a      	bhi.n	8000b9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b84:	2200      	movs	r2, #0
 8000b86:	6879      	ldr	r1, [r7, #4]
 8000b88:	f04f 30ff 	mov.w	r0, #4294967295
 8000b8c:	f000 f92f 	bl	8000dee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b90:	4a06      	ldr	r2, [pc, #24]	@ (8000bac <HAL_InitTick+0x5c>)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b96:	2300      	movs	r3, #0
 8000b98:	e000      	b.n	8000b9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20000000 	.word	0x20000000
 8000ba8:	20000008 	.word	0x20000008
 8000bac:	20000004 	.word	0x20000004

08000bb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	@ (8000bd0 <HAL_IncTick+0x20>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <HAL_IncTick+0x24>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	4a04      	ldr	r2, [pc, #16]	@ (8000bd4 <HAL_IncTick+0x24>)
 8000bc2:	6013      	str	r3, [r2, #0]
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	20000008 	.word	0x20000008
 8000bd4:	200000b8 	.word	0x200000b8

08000bd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  return uwTick;
 8000bdc:	4b03      	ldr	r3, [pc, #12]	@ (8000bec <HAL_GetTick+0x14>)
 8000bde:	681b      	ldr	r3, [r3, #0]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	200000b8 	.word	0x200000b8

08000bf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bf8:	f7ff ffee 	bl	8000bd8 <HAL_GetTick>
 8000bfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c08:	d005      	beq.n	8000c16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c34 <HAL_Delay+0x44>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	461a      	mov	r2, r3
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	4413      	add	r3, r2
 8000c14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c16:	bf00      	nop
 8000c18:	f7ff ffde 	bl	8000bd8 <HAL_GetTick>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	68fa      	ldr	r2, [r7, #12]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d8f7      	bhi.n	8000c18 <HAL_Delay+0x28>
  {
  }
}
 8000c28:	bf00      	nop
 8000c2a:	bf00      	nop
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000008 	.word	0x20000008

08000c38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f003 0307 	and.w	r3, r3, #7
 8000c46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c48:	4b0b      	ldr	r3, [pc, #44]	@ (8000c78 <__NVIC_SetPriorityGrouping+0x40>)
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c4e:	68ba      	ldr	r2, [r7, #8]
 8000c50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c54:	4013      	ands	r3, r2
 8000c56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c60:	4b06      	ldr	r3, [pc, #24]	@ (8000c7c <__NVIC_SetPriorityGrouping+0x44>)
 8000c62:	4313      	orrs	r3, r2
 8000c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c66:	4a04      	ldr	r2, [pc, #16]	@ (8000c78 <__NVIC_SetPriorityGrouping+0x40>)
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	60d3      	str	r3, [r2, #12]
}
 8000c6c:	bf00      	nop
 8000c6e:	3714      	adds	r7, #20
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000ed00 	.word	0xe000ed00
 8000c7c:	05fa0000 	.word	0x05fa0000

08000c80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c84:	4b04      	ldr	r3, [pc, #16]	@ (8000c98 <__NVIC_GetPriorityGrouping+0x18>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	0a1b      	lsrs	r3, r3, #8
 8000c8a:	f003 0307 	and.w	r3, r3, #7
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	db0b      	blt.n	8000cc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	f003 021f 	and.w	r2, r3, #31
 8000cb4:	4907      	ldr	r1, [pc, #28]	@ (8000cd4 <__NVIC_EnableIRQ+0x38>)
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	095b      	lsrs	r3, r3, #5
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000e100 	.word	0xe000e100

08000cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	6039      	str	r1, [r7, #0]
 8000ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	db0a      	blt.n	8000d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	490c      	ldr	r1, [pc, #48]	@ (8000d24 <__NVIC_SetPriority+0x4c>)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	0112      	lsls	r2, r2, #4
 8000cf8:	b2d2      	uxtb	r2, r2
 8000cfa:	440b      	add	r3, r1
 8000cfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d00:	e00a      	b.n	8000d18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	b2da      	uxtb	r2, r3
 8000d06:	4908      	ldr	r1, [pc, #32]	@ (8000d28 <__NVIC_SetPriority+0x50>)
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	f003 030f 	and.w	r3, r3, #15
 8000d0e:	3b04      	subs	r3, #4
 8000d10:	0112      	lsls	r2, r2, #4
 8000d12:	b2d2      	uxtb	r2, r2
 8000d14:	440b      	add	r3, r1
 8000d16:	761a      	strb	r2, [r3, #24]
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	e000e100 	.word	0xe000e100
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b089      	sub	sp, #36	@ 0x24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	f1c3 0307 	rsb	r3, r3, #7
 8000d46:	2b04      	cmp	r3, #4
 8000d48:	bf28      	it	cs
 8000d4a:	2304      	movcs	r3, #4
 8000d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3304      	adds	r3, #4
 8000d52:	2b06      	cmp	r3, #6
 8000d54:	d902      	bls.n	8000d5c <NVIC_EncodePriority+0x30>
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3b03      	subs	r3, #3
 8000d5a:	e000      	b.n	8000d5e <NVIC_EncodePriority+0x32>
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	f04f 32ff 	mov.w	r2, #4294967295
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43da      	mvns	r2, r3
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	401a      	ands	r2, r3
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d74:	f04f 31ff 	mov.w	r1, #4294967295
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7e:	43d9      	mvns	r1, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d84:	4313      	orrs	r3, r2
         );
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3724      	adds	r7, #36	@ 0x24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
	...

08000d94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000da4:	d301      	bcc.n	8000daa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000da6:	2301      	movs	r3, #1
 8000da8:	e00f      	b.n	8000dca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000daa:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd4 <SysTick_Config+0x40>)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3b01      	subs	r3, #1
 8000db0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000db2:	210f      	movs	r1, #15
 8000db4:	f04f 30ff 	mov.w	r0, #4294967295
 8000db8:	f7ff ff8e 	bl	8000cd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dbc:	4b05      	ldr	r3, [pc, #20]	@ (8000dd4 <SysTick_Config+0x40>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dc2:	4b04      	ldr	r3, [pc, #16]	@ (8000dd4 <SysTick_Config+0x40>)
 8000dc4:	2207      	movs	r2, #7
 8000dc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	e000e010 	.word	0xe000e010

08000dd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f7ff ff29 	bl	8000c38 <__NVIC_SetPriorityGrouping>
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b086      	sub	sp, #24
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	4603      	mov	r3, r0
 8000df6:	60b9      	str	r1, [r7, #8]
 8000df8:	607a      	str	r2, [r7, #4]
 8000dfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e00:	f7ff ff3e 	bl	8000c80 <__NVIC_GetPriorityGrouping>
 8000e04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	68b9      	ldr	r1, [r7, #8]
 8000e0a:	6978      	ldr	r0, [r7, #20]
 8000e0c:	f7ff ff8e 	bl	8000d2c <NVIC_EncodePriority>
 8000e10:	4602      	mov	r2, r0
 8000e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e16:	4611      	mov	r1, r2
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff ff5d 	bl	8000cd8 <__NVIC_SetPriority>
}
 8000e1e:	bf00      	nop
 8000e20:	3718      	adds	r7, #24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff31 	bl	8000c9c <__NVIC_EnableIRQ>
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b082      	sub	sp, #8
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f7ff ffa2 	bl	8000d94 <SysTick_Config>
 8000e50:	4603      	mov	r3, r0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
	...

08000e5c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000e60:	f3bf 8f5f 	dmb	sy
}
 8000e64:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000e66:	4b07      	ldr	r3, [pc, #28]	@ (8000e84 <HAL_MPU_Disable+0x28>)
 8000e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e6a:	4a06      	ldr	r2, [pc, #24]	@ (8000e84 <HAL_MPU_Disable+0x28>)
 8000e6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e70:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000e72:	4b05      	ldr	r3, [pc, #20]	@ (8000e88 <HAL_MPU_Disable+0x2c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	605a      	str	r2, [r3, #4]
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	e000ed00 	.word	0xe000ed00
 8000e88:	e000ed90 	.word	0xe000ed90

08000e8c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000e94:	4a0b      	ldr	r2, [pc, #44]	@ (8000ec4 <HAL_MPU_Enable+0x38>)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec8 <HAL_MPU_Enable+0x3c>)
 8000ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ea2:	4a09      	ldr	r2, [pc, #36]	@ (8000ec8 <HAL_MPU_Enable+0x3c>)
 8000ea4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ea8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000eaa:	f3bf 8f4f 	dsb	sy
}
 8000eae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eb0:	f3bf 8f6f 	isb	sy
}
 8000eb4:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000ed90 	.word	0xe000ed90
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	785a      	ldrb	r2, [r3, #1]
 8000ed8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f48 <HAL_MPU_ConfigRegion+0x7c>)
 8000eda:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000edc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f48 <HAL_MPU_ConfigRegion+0x7c>)
 8000ede:	691b      	ldr	r3, [r3, #16]
 8000ee0:	4a19      	ldr	r2, [pc, #100]	@ (8000f48 <HAL_MPU_ConfigRegion+0x7c>)
 8000ee2:	f023 0301 	bic.w	r3, r3, #1
 8000ee6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000ee8:	4a17      	ldr	r2, [pc, #92]	@ (8000f48 <HAL_MPU_ConfigRegion+0x7c>)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	7b1b      	ldrb	r3, [r3, #12]
 8000ef4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	7adb      	ldrb	r3, [r3, #11]
 8000efa:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000efc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	7a9b      	ldrb	r3, [r3, #10]
 8000f02:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000f04:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	7b5b      	ldrb	r3, [r3, #13]
 8000f0a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000f0c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	7b9b      	ldrb	r3, [r3, #14]
 8000f12:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000f14:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	7bdb      	ldrb	r3, [r3, #15]
 8000f1a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000f1c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	7a5b      	ldrb	r3, [r3, #9]
 8000f22:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000f24:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	7a1b      	ldrb	r3, [r3, #8]
 8000f2a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000f2c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	7812      	ldrb	r2, [r2, #0]
 8000f32:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f34:	4a04      	ldr	r2, [pc, #16]	@ (8000f48 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000f36:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f38:	6113      	str	r3, [r2, #16]
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000ed90 	.word	0xe000ed90

08000f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b089      	sub	sp, #36	@ 0x24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
 8000f6a:	e175      	b.n	8001258 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	697a      	ldr	r2, [r7, #20]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	f040 8164 	bne.w	8001252 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f003 0303 	and.w	r3, r3, #3
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d005      	beq.n	8000fa2 <HAL_GPIO_Init+0x56>
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f003 0303 	and.w	r3, r3, #3
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d130      	bne.n	8001004 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	2203      	movs	r2, #3
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	68da      	ldr	r2, [r3, #12]
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fd8:	2201      	movs	r2, #1
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	091b      	lsrs	r3, r3, #4
 8000fee:	f003 0201 	and.w	r2, r3, #1
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 0303 	and.w	r3, r3, #3
 800100c:	2b03      	cmp	r3, #3
 800100e:	d017      	beq.n	8001040 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	2203      	movs	r2, #3
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	689a      	ldr	r2, [r3, #8]
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0303 	and.w	r3, r3, #3
 8001048:	2b02      	cmp	r3, #2
 800104a:	d123      	bne.n	8001094 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	08da      	lsrs	r2, r3, #3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3208      	adds	r2, #8
 8001054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	f003 0307 	and.w	r3, r3, #7
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	220f      	movs	r2, #15
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	691a      	ldr	r2, [r3, #16]
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	08da      	lsrs	r2, r3, #3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3208      	adds	r2, #8
 800108e:	69b9      	ldr	r1, [r7, #24]
 8001090:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	2203      	movs	r2, #3
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 0203 	and.w	r2, r3, #3
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	f000 80be 	beq.w	8001252 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d6:	4b66      	ldr	r3, [pc, #408]	@ (8001270 <HAL_GPIO_Init+0x324>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010da:	4a65      	ldr	r2, [pc, #404]	@ (8001270 <HAL_GPIO_Init+0x324>)
 80010dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80010e2:	4b63      	ldr	r3, [pc, #396]	@ (8001270 <HAL_GPIO_Init+0x324>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80010ee:	4a61      	ldr	r2, [pc, #388]	@ (8001274 <HAL_GPIO_Init+0x328>)
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	089b      	lsrs	r3, r3, #2
 80010f4:	3302      	adds	r3, #2
 80010f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	f003 0303 	and.w	r3, r3, #3
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	220f      	movs	r2, #15
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43db      	mvns	r3, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4013      	ands	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a58      	ldr	r2, [pc, #352]	@ (8001278 <HAL_GPIO_Init+0x32c>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d037      	beq.n	800118a <HAL_GPIO_Init+0x23e>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a57      	ldr	r2, [pc, #348]	@ (800127c <HAL_GPIO_Init+0x330>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d031      	beq.n	8001186 <HAL_GPIO_Init+0x23a>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a56      	ldr	r2, [pc, #344]	@ (8001280 <HAL_GPIO_Init+0x334>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d02b      	beq.n	8001182 <HAL_GPIO_Init+0x236>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a55      	ldr	r2, [pc, #340]	@ (8001284 <HAL_GPIO_Init+0x338>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d025      	beq.n	800117e <HAL_GPIO_Init+0x232>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a54      	ldr	r2, [pc, #336]	@ (8001288 <HAL_GPIO_Init+0x33c>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d01f      	beq.n	800117a <HAL_GPIO_Init+0x22e>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a53      	ldr	r2, [pc, #332]	@ (800128c <HAL_GPIO_Init+0x340>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d019      	beq.n	8001176 <HAL_GPIO_Init+0x22a>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a52      	ldr	r2, [pc, #328]	@ (8001290 <HAL_GPIO_Init+0x344>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d013      	beq.n	8001172 <HAL_GPIO_Init+0x226>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a51      	ldr	r2, [pc, #324]	@ (8001294 <HAL_GPIO_Init+0x348>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d00d      	beq.n	800116e <HAL_GPIO_Init+0x222>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a50      	ldr	r2, [pc, #320]	@ (8001298 <HAL_GPIO_Init+0x34c>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d007      	beq.n	800116a <HAL_GPIO_Init+0x21e>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a4f      	ldr	r2, [pc, #316]	@ (800129c <HAL_GPIO_Init+0x350>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d101      	bne.n	8001166 <HAL_GPIO_Init+0x21a>
 8001162:	2309      	movs	r3, #9
 8001164:	e012      	b.n	800118c <HAL_GPIO_Init+0x240>
 8001166:	230a      	movs	r3, #10
 8001168:	e010      	b.n	800118c <HAL_GPIO_Init+0x240>
 800116a:	2308      	movs	r3, #8
 800116c:	e00e      	b.n	800118c <HAL_GPIO_Init+0x240>
 800116e:	2307      	movs	r3, #7
 8001170:	e00c      	b.n	800118c <HAL_GPIO_Init+0x240>
 8001172:	2306      	movs	r3, #6
 8001174:	e00a      	b.n	800118c <HAL_GPIO_Init+0x240>
 8001176:	2305      	movs	r3, #5
 8001178:	e008      	b.n	800118c <HAL_GPIO_Init+0x240>
 800117a:	2304      	movs	r3, #4
 800117c:	e006      	b.n	800118c <HAL_GPIO_Init+0x240>
 800117e:	2303      	movs	r3, #3
 8001180:	e004      	b.n	800118c <HAL_GPIO_Init+0x240>
 8001182:	2302      	movs	r3, #2
 8001184:	e002      	b.n	800118c <HAL_GPIO_Init+0x240>
 8001186:	2301      	movs	r3, #1
 8001188:	e000      	b.n	800118c <HAL_GPIO_Init+0x240>
 800118a:	2300      	movs	r3, #0
 800118c:	69fa      	ldr	r2, [r7, #28]
 800118e:	f002 0203 	and.w	r2, r2, #3
 8001192:	0092      	lsls	r2, r2, #2
 8001194:	4093      	lsls	r3, r2
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4313      	orrs	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800119c:	4935      	ldr	r1, [pc, #212]	@ (8001274 <HAL_GPIO_Init+0x328>)
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	089b      	lsrs	r3, r3, #2
 80011a2:	3302      	adds	r3, #2
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011aa:	4b3d      	ldr	r3, [pc, #244]	@ (80012a0 <HAL_GPIO_Init+0x354>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	43db      	mvns	r3, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4013      	ands	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011ce:	4a34      	ldr	r2, [pc, #208]	@ (80012a0 <HAL_GPIO_Init+0x354>)
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011d4:	4b32      	ldr	r3, [pc, #200]	@ (80012a0 <HAL_GPIO_Init+0x354>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d003      	beq.n	80011f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011f8:	4a29      	ldr	r2, [pc, #164]	@ (80012a0 <HAL_GPIO_Init+0x354>)
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011fe:	4b28      	ldr	r3, [pc, #160]	@ (80012a0 <HAL_GPIO_Init+0x354>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	43db      	mvns	r3, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4013      	ands	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001222:	4a1f      	ldr	r2, [pc, #124]	@ (80012a0 <HAL_GPIO_Init+0x354>)
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001228:	4b1d      	ldr	r3, [pc, #116]	@ (80012a0 <HAL_GPIO_Init+0x354>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d003      	beq.n	800124c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800124c:	4a14      	ldr	r2, [pc, #80]	@ (80012a0 <HAL_GPIO_Init+0x354>)
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3301      	adds	r3, #1
 8001256:	61fb      	str	r3, [r7, #28]
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	2b0f      	cmp	r3, #15
 800125c:	f67f ae86 	bls.w	8000f6c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001260:	bf00      	nop
 8001262:	bf00      	nop
 8001264:	3724      	adds	r7, #36	@ 0x24
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	40023800 	.word	0x40023800
 8001274:	40013800 	.word	0x40013800
 8001278:	40020000 	.word	0x40020000
 800127c:	40020400 	.word	0x40020400
 8001280:	40020800 	.word	0x40020800
 8001284:	40020c00 	.word	0x40020c00
 8001288:	40021000 	.word	0x40021000
 800128c:	40021400 	.word	0x40021400
 8001290:	40021800 	.word	0x40021800
 8001294:	40021c00 	.word	0x40021c00
 8001298:	40022000 	.word	0x40022000
 800129c:	40022400 	.word	0x40022400
 80012a0:	40013c00 	.word	0x40013c00

080012a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	807b      	strh	r3, [r7, #2]
 80012b0:	4613      	mov	r3, r2
 80012b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012b4:	787b      	ldrb	r3, [r7, #1]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ba:	887a      	ldrh	r2, [r7, #2]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80012c0:	e003      	b.n	80012ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80012c2:	887b      	ldrh	r3, [r7, #2]
 80012c4:	041a      	lsls	r2, r3, #16
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	619a      	str	r2, [r3, #24]
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012d6:	b480      	push	{r7}
 80012d8:	b085      	sub	sp, #20
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
 80012de:	460b      	mov	r3, r1
 80012e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012e8:	887a      	ldrh	r2, [r7, #2]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	4013      	ands	r3, r2
 80012ee:	041a      	lsls	r2, r3, #16
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	43d9      	mvns	r1, r3
 80012f4:	887b      	ldrh	r3, [r7, #2]
 80012f6:	400b      	ands	r3, r1
 80012f8:	431a      	orrs	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	619a      	str	r2, [r3, #24]
}
 80012fe:	bf00      	nop
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
	...

0800130c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001316:	4b08      	ldr	r3, [pc, #32]	@ (8001338 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001318:	695a      	ldr	r2, [r3, #20]
 800131a:	88fb      	ldrh	r3, [r7, #6]
 800131c:	4013      	ands	r3, r2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d006      	beq.n	8001330 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001322:	4a05      	ldr	r2, [pc, #20]	@ (8001338 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001324:	88fb      	ldrh	r3, [r7, #6]
 8001326:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001328:	88fb      	ldrh	r3, [r7, #6]
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fa34 	bl	8000798 <HAL_GPIO_EXTI_Callback>
  }
}
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40013c00 	.word	0x40013c00

0800133c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001346:	4b23      	ldr	r3, [pc, #140]	@ (80013d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134a:	4a22      	ldr	r2, [pc, #136]	@ (80013d4 <HAL_PWREx_EnableOverDrive+0x98>)
 800134c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001350:	6413      	str	r3, [r2, #64]	@ 0x40
 8001352:	4b20      	ldr	r3, [pc, #128]	@ (80013d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001356:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800135a:	603b      	str	r3, [r7, #0]
 800135c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800135e:	4b1e      	ldr	r3, [pc, #120]	@ (80013d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a1d      	ldr	r2, [pc, #116]	@ (80013d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001364:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001368:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800136a:	f7ff fc35 	bl	8000bd8 <HAL_GetTick>
 800136e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001370:	e009      	b.n	8001386 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001372:	f7ff fc31 	bl	8000bd8 <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001380:	d901      	bls.n	8001386 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e022      	b.n	80013cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001386:	4b14      	ldr	r3, [pc, #80]	@ (80013d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800138e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001392:	d1ee      	bne.n	8001372 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001394:	4b10      	ldr	r3, [pc, #64]	@ (80013d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a0f      	ldr	r2, [pc, #60]	@ (80013d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800139a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800139e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013a0:	f7ff fc1a 	bl	8000bd8 <HAL_GetTick>
 80013a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80013a6:	e009      	b.n	80013bc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80013a8:	f7ff fc16 	bl	8000bd8 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80013b6:	d901      	bls.n	80013bc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e007      	b.n	80013cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80013bc:	4b06      	ldr	r3, [pc, #24]	@ (80013d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80013c8:	d1ee      	bne.n	80013a8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80013ca:	2300      	movs	r3, #0
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40007000 	.word	0x40007000

080013dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80013e4:	2300      	movs	r3, #0
 80013e6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d101      	bne.n	80013f2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e29b      	b.n	800192a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f000 8087 	beq.w	800150e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001400:	4b96      	ldr	r3, [pc, #600]	@ (800165c <HAL_RCC_OscConfig+0x280>)
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f003 030c 	and.w	r3, r3, #12
 8001408:	2b04      	cmp	r3, #4
 800140a:	d00c      	beq.n	8001426 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800140c:	4b93      	ldr	r3, [pc, #588]	@ (800165c <HAL_RCC_OscConfig+0x280>)
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	f003 030c 	and.w	r3, r3, #12
 8001414:	2b08      	cmp	r3, #8
 8001416:	d112      	bne.n	800143e <HAL_RCC_OscConfig+0x62>
 8001418:	4b90      	ldr	r3, [pc, #576]	@ (800165c <HAL_RCC_OscConfig+0x280>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001420:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001424:	d10b      	bne.n	800143e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001426:	4b8d      	ldr	r3, [pc, #564]	@ (800165c <HAL_RCC_OscConfig+0x280>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d06c      	beq.n	800150c <HAL_RCC_OscConfig+0x130>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d168      	bne.n	800150c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e275      	b.n	800192a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001446:	d106      	bne.n	8001456 <HAL_RCC_OscConfig+0x7a>
 8001448:	4b84      	ldr	r3, [pc, #528]	@ (800165c <HAL_RCC_OscConfig+0x280>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a83      	ldr	r2, [pc, #524]	@ (800165c <HAL_RCC_OscConfig+0x280>)
 800144e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001452:	6013      	str	r3, [r2, #0]
 8001454:	e02e      	b.n	80014b4 <HAL_RCC_OscConfig+0xd8>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d10c      	bne.n	8001478 <HAL_RCC_OscConfig+0x9c>
 800145e:	4b7f      	ldr	r3, [pc, #508]	@ (800165c <HAL_RCC_OscConfig+0x280>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a7e      	ldr	r2, [pc, #504]	@ (800165c <HAL_RCC_OscConfig+0x280>)
 8001464:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	4b7c      	ldr	r3, [pc, #496]	@ (800165c <HAL_RCC_OscConfig+0x280>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a7b      	ldr	r2, [pc, #492]	@ (800165c <HAL_RCC_OscConfig+0x280>)
 8001470:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	e01d      	b.n	80014b4 <HAL_RCC_OscConfig+0xd8>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001480:	d10c      	bne.n	800149c <HAL_RCC_OscConfig+0xc0>
 8001482:	4b76      	ldr	r3, [pc, #472]	@ (800165c <HAL_RCC_OscConfig+0x280>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a75      	ldr	r2, [pc, #468]	@ (800165c <HAL_RCC_OscConfig+0x280>)
 8001488:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	4b73      	ldr	r3, [pc, #460]	@ (800165c <HAL_RCC_OscConfig+0x280>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a72      	ldr	r2, [pc, #456]	@ (800165c <HAL_RCC_OscConfig+0x280>)
 8001494:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	e00b      	b.n	80014b4 <HAL_RCC_OscConfig+0xd8>
 800149c:	4b6f      	ldr	r3, [pc, #444]	@ (800165c <HAL_RCC_OscConfig+0x280>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a6e      	ldr	r2, [pc, #440]	@ (800165c <HAL_RCC_OscConfig+0x280>)
 80014a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	4b6c      	ldr	r3, [pc, #432]	@ (800165c <HAL_RCC_OscConfig+0x280>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a6b      	ldr	r2, [pc, #428]	@ (800165c <HAL_RCC_OscConfig+0x280>)
 80014ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d013      	beq.n	80014e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014bc:	f7ff fb8c 	bl	8000bd8 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014c4:	f7ff fb88 	bl	8000bd8 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b64      	cmp	r3, #100	@ 0x64
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e229      	b.n	800192a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d6:	4b61      	ldr	r3, [pc, #388]	@ (800165c <HAL_RCC_OscConfig+0x280>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d0f0      	beq.n	80014c4 <HAL_RCC_OscConfig+0xe8>
 80014e2:	e014      	b.n	800150e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e4:	f7ff fb78 	bl	8000bd8 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014ec:	f7ff fb74 	bl	8000bd8 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b64      	cmp	r3, #100	@ 0x64
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e215      	b.n	800192a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014fe:	4b57      	ldr	r3, [pc, #348]	@ (800165c <HAL_RCC_OscConfig+0x280>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1f0      	bne.n	80014ec <HAL_RCC_OscConfig+0x110>
 800150a:	e000      	b.n	800150e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800150c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d069      	beq.n	80015ee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800151a:	4b50      	ldr	r3, [pc, #320]	@ (800165c <HAL_RCC_OscConfig+0x280>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f003 030c 	and.w	r3, r3, #12
 8001522:	2b00      	cmp	r3, #0
 8001524:	d00b      	beq.n	800153e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001526:	4b4d      	ldr	r3, [pc, #308]	@ (800165c <HAL_RCC_OscConfig+0x280>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f003 030c 	and.w	r3, r3, #12
 800152e:	2b08      	cmp	r3, #8
 8001530:	d11c      	bne.n	800156c <HAL_RCC_OscConfig+0x190>
 8001532:	4b4a      	ldr	r3, [pc, #296]	@ (800165c <HAL_RCC_OscConfig+0x280>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d116      	bne.n	800156c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800153e:	4b47      	ldr	r3, [pc, #284]	@ (800165c <HAL_RCC_OscConfig+0x280>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d005      	beq.n	8001556 <HAL_RCC_OscConfig+0x17a>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d001      	beq.n	8001556 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e1e9      	b.n	800192a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001556:	4b41      	ldr	r3, [pc, #260]	@ (800165c <HAL_RCC_OscConfig+0x280>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	493d      	ldr	r1, [pc, #244]	@ (800165c <HAL_RCC_OscConfig+0x280>)
 8001566:	4313      	orrs	r3, r2
 8001568:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800156a:	e040      	b.n	80015ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d023      	beq.n	80015bc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001574:	4b39      	ldr	r3, [pc, #228]	@ (800165c <HAL_RCC_OscConfig+0x280>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a38      	ldr	r2, [pc, #224]	@ (800165c <HAL_RCC_OscConfig+0x280>)
 800157a:	f043 0301 	orr.w	r3, r3, #1
 800157e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001580:	f7ff fb2a 	bl	8000bd8 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001588:	f7ff fb26 	bl	8000bd8 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e1c7      	b.n	800192a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800159a:	4b30      	ldr	r3, [pc, #192]	@ (800165c <HAL_RCC_OscConfig+0x280>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0f0      	beq.n	8001588 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a6:	4b2d      	ldr	r3, [pc, #180]	@ (800165c <HAL_RCC_OscConfig+0x280>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	4929      	ldr	r1, [pc, #164]	@ (800165c <HAL_RCC_OscConfig+0x280>)
 80015b6:	4313      	orrs	r3, r2
 80015b8:	600b      	str	r3, [r1, #0]
 80015ba:	e018      	b.n	80015ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015bc:	4b27      	ldr	r3, [pc, #156]	@ (800165c <HAL_RCC_OscConfig+0x280>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a26      	ldr	r2, [pc, #152]	@ (800165c <HAL_RCC_OscConfig+0x280>)
 80015c2:	f023 0301 	bic.w	r3, r3, #1
 80015c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c8:	f7ff fb06 	bl	8000bd8 <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015d0:	f7ff fb02 	bl	8000bd8 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e1a3      	b.n	800192a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015e2:	4b1e      	ldr	r3, [pc, #120]	@ (800165c <HAL_RCC_OscConfig+0x280>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d1f0      	bne.n	80015d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0308 	and.w	r3, r3, #8
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d038      	beq.n	800166c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d019      	beq.n	8001636 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001602:	4b16      	ldr	r3, [pc, #88]	@ (800165c <HAL_RCC_OscConfig+0x280>)
 8001604:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001606:	4a15      	ldr	r2, [pc, #84]	@ (800165c <HAL_RCC_OscConfig+0x280>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800160e:	f7ff fae3 	bl	8000bd8 <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001616:	f7ff fadf 	bl	8000bd8 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e180      	b.n	800192a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001628:	4b0c      	ldr	r3, [pc, #48]	@ (800165c <HAL_RCC_OscConfig+0x280>)
 800162a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0f0      	beq.n	8001616 <HAL_RCC_OscConfig+0x23a>
 8001634:	e01a      	b.n	800166c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001636:	4b09      	ldr	r3, [pc, #36]	@ (800165c <HAL_RCC_OscConfig+0x280>)
 8001638:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800163a:	4a08      	ldr	r2, [pc, #32]	@ (800165c <HAL_RCC_OscConfig+0x280>)
 800163c:	f023 0301 	bic.w	r3, r3, #1
 8001640:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001642:	f7ff fac9 	bl	8000bd8 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001648:	e00a      	b.n	8001660 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800164a:	f7ff fac5 	bl	8000bd8 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d903      	bls.n	8001660 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e166      	b.n	800192a <HAL_RCC_OscConfig+0x54e>
 800165c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001660:	4b92      	ldr	r3, [pc, #584]	@ (80018ac <HAL_RCC_OscConfig+0x4d0>)
 8001662:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1ee      	bne.n	800164a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0304 	and.w	r3, r3, #4
 8001674:	2b00      	cmp	r3, #0
 8001676:	f000 80a4 	beq.w	80017c2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800167a:	4b8c      	ldr	r3, [pc, #560]	@ (80018ac <HAL_RCC_OscConfig+0x4d0>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d10d      	bne.n	80016a2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001686:	4b89      	ldr	r3, [pc, #548]	@ (80018ac <HAL_RCC_OscConfig+0x4d0>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168a:	4a88      	ldr	r2, [pc, #544]	@ (80018ac <HAL_RCC_OscConfig+0x4d0>)
 800168c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001690:	6413      	str	r3, [r2, #64]	@ 0x40
 8001692:	4b86      	ldr	r3, [pc, #536]	@ (80018ac <HAL_RCC_OscConfig+0x4d0>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001696:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800169a:	60bb      	str	r3, [r7, #8]
 800169c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800169e:	2301      	movs	r3, #1
 80016a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016a2:	4b83      	ldr	r3, [pc, #524]	@ (80018b0 <HAL_RCC_OscConfig+0x4d4>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d118      	bne.n	80016e0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80016ae:	4b80      	ldr	r3, [pc, #512]	@ (80018b0 <HAL_RCC_OscConfig+0x4d4>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a7f      	ldr	r2, [pc, #508]	@ (80018b0 <HAL_RCC_OscConfig+0x4d4>)
 80016b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ba:	f7ff fa8d 	bl	8000bd8 <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016c2:	f7ff fa89 	bl	8000bd8 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b64      	cmp	r3, #100	@ 0x64
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e12a      	b.n	800192a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016d4:	4b76      	ldr	r3, [pc, #472]	@ (80018b0 <HAL_RCC_OscConfig+0x4d4>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d0f0      	beq.n	80016c2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d106      	bne.n	80016f6 <HAL_RCC_OscConfig+0x31a>
 80016e8:	4b70      	ldr	r3, [pc, #448]	@ (80018ac <HAL_RCC_OscConfig+0x4d0>)
 80016ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ec:	4a6f      	ldr	r2, [pc, #444]	@ (80018ac <HAL_RCC_OscConfig+0x4d0>)
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80016f4:	e02d      	b.n	8001752 <HAL_RCC_OscConfig+0x376>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10c      	bne.n	8001718 <HAL_RCC_OscConfig+0x33c>
 80016fe:	4b6b      	ldr	r3, [pc, #428]	@ (80018ac <HAL_RCC_OscConfig+0x4d0>)
 8001700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001702:	4a6a      	ldr	r2, [pc, #424]	@ (80018ac <HAL_RCC_OscConfig+0x4d0>)
 8001704:	f023 0301 	bic.w	r3, r3, #1
 8001708:	6713      	str	r3, [r2, #112]	@ 0x70
 800170a:	4b68      	ldr	r3, [pc, #416]	@ (80018ac <HAL_RCC_OscConfig+0x4d0>)
 800170c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800170e:	4a67      	ldr	r2, [pc, #412]	@ (80018ac <HAL_RCC_OscConfig+0x4d0>)
 8001710:	f023 0304 	bic.w	r3, r3, #4
 8001714:	6713      	str	r3, [r2, #112]	@ 0x70
 8001716:	e01c      	b.n	8001752 <HAL_RCC_OscConfig+0x376>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	2b05      	cmp	r3, #5
 800171e:	d10c      	bne.n	800173a <HAL_RCC_OscConfig+0x35e>
 8001720:	4b62      	ldr	r3, [pc, #392]	@ (80018ac <HAL_RCC_OscConfig+0x4d0>)
 8001722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001724:	4a61      	ldr	r2, [pc, #388]	@ (80018ac <HAL_RCC_OscConfig+0x4d0>)
 8001726:	f043 0304 	orr.w	r3, r3, #4
 800172a:	6713      	str	r3, [r2, #112]	@ 0x70
 800172c:	4b5f      	ldr	r3, [pc, #380]	@ (80018ac <HAL_RCC_OscConfig+0x4d0>)
 800172e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001730:	4a5e      	ldr	r2, [pc, #376]	@ (80018ac <HAL_RCC_OscConfig+0x4d0>)
 8001732:	f043 0301 	orr.w	r3, r3, #1
 8001736:	6713      	str	r3, [r2, #112]	@ 0x70
 8001738:	e00b      	b.n	8001752 <HAL_RCC_OscConfig+0x376>
 800173a:	4b5c      	ldr	r3, [pc, #368]	@ (80018ac <HAL_RCC_OscConfig+0x4d0>)
 800173c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800173e:	4a5b      	ldr	r2, [pc, #364]	@ (80018ac <HAL_RCC_OscConfig+0x4d0>)
 8001740:	f023 0301 	bic.w	r3, r3, #1
 8001744:	6713      	str	r3, [r2, #112]	@ 0x70
 8001746:	4b59      	ldr	r3, [pc, #356]	@ (80018ac <HAL_RCC_OscConfig+0x4d0>)
 8001748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800174a:	4a58      	ldr	r2, [pc, #352]	@ (80018ac <HAL_RCC_OscConfig+0x4d0>)
 800174c:	f023 0304 	bic.w	r3, r3, #4
 8001750:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d015      	beq.n	8001786 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175a:	f7ff fa3d 	bl	8000bd8 <HAL_GetTick>
 800175e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001760:	e00a      	b.n	8001778 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001762:	f7ff fa39 	bl	8000bd8 <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001770:	4293      	cmp	r3, r2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e0d8      	b.n	800192a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001778:	4b4c      	ldr	r3, [pc, #304]	@ (80018ac <HAL_RCC_OscConfig+0x4d0>)
 800177a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d0ee      	beq.n	8001762 <HAL_RCC_OscConfig+0x386>
 8001784:	e014      	b.n	80017b0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001786:	f7ff fa27 	bl	8000bd8 <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800178c:	e00a      	b.n	80017a4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800178e:	f7ff fa23 	bl	8000bd8 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	f241 3288 	movw	r2, #5000	@ 0x1388
 800179c:	4293      	cmp	r3, r2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e0c2      	b.n	800192a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a4:	4b41      	ldr	r3, [pc, #260]	@ (80018ac <HAL_RCC_OscConfig+0x4d0>)
 80017a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1ee      	bne.n	800178e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017b0:	7dfb      	ldrb	r3, [r7, #23]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d105      	bne.n	80017c2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017b6:	4b3d      	ldr	r3, [pc, #244]	@ (80018ac <HAL_RCC_OscConfig+0x4d0>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ba:	4a3c      	ldr	r2, [pc, #240]	@ (80018ac <HAL_RCC_OscConfig+0x4d0>)
 80017bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017c0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f000 80ae 	beq.w	8001928 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017cc:	4b37      	ldr	r3, [pc, #220]	@ (80018ac <HAL_RCC_OscConfig+0x4d0>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f003 030c 	and.w	r3, r3, #12
 80017d4:	2b08      	cmp	r3, #8
 80017d6:	d06d      	beq.n	80018b4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d14b      	bne.n	8001878 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e0:	4b32      	ldr	r3, [pc, #200]	@ (80018ac <HAL_RCC_OscConfig+0x4d0>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a31      	ldr	r2, [pc, #196]	@ (80018ac <HAL_RCC_OscConfig+0x4d0>)
 80017e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ec:	f7ff f9f4 	bl	8000bd8 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f4:	f7ff f9f0 	bl	8000bd8 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e091      	b.n	800192a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001806:	4b29      	ldr	r3, [pc, #164]	@ (80018ac <HAL_RCC_OscConfig+0x4d0>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1f0      	bne.n	80017f4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69da      	ldr	r2, [r3, #28]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a1b      	ldr	r3, [r3, #32]
 800181a:	431a      	orrs	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001820:	019b      	lsls	r3, r3, #6
 8001822:	431a      	orrs	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001828:	085b      	lsrs	r3, r3, #1
 800182a:	3b01      	subs	r3, #1
 800182c:	041b      	lsls	r3, r3, #16
 800182e:	431a      	orrs	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001834:	061b      	lsls	r3, r3, #24
 8001836:	431a      	orrs	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183c:	071b      	lsls	r3, r3, #28
 800183e:	491b      	ldr	r1, [pc, #108]	@ (80018ac <HAL_RCC_OscConfig+0x4d0>)
 8001840:	4313      	orrs	r3, r2
 8001842:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001844:	4b19      	ldr	r3, [pc, #100]	@ (80018ac <HAL_RCC_OscConfig+0x4d0>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a18      	ldr	r2, [pc, #96]	@ (80018ac <HAL_RCC_OscConfig+0x4d0>)
 800184a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800184e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001850:	f7ff f9c2 	bl	8000bd8 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001858:	f7ff f9be 	bl	8000bd8 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e05f      	b.n	800192a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800186a:	4b10      	ldr	r3, [pc, #64]	@ (80018ac <HAL_RCC_OscConfig+0x4d0>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0f0      	beq.n	8001858 <HAL_RCC_OscConfig+0x47c>
 8001876:	e057      	b.n	8001928 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001878:	4b0c      	ldr	r3, [pc, #48]	@ (80018ac <HAL_RCC_OscConfig+0x4d0>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a0b      	ldr	r2, [pc, #44]	@ (80018ac <HAL_RCC_OscConfig+0x4d0>)
 800187e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001882:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001884:	f7ff f9a8 	bl	8000bd8 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800188c:	f7ff f9a4 	bl	8000bd8 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e045      	b.n	800192a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800189e:	4b03      	ldr	r3, [pc, #12]	@ (80018ac <HAL_RCC_OscConfig+0x4d0>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1f0      	bne.n	800188c <HAL_RCC_OscConfig+0x4b0>
 80018aa:	e03d      	b.n	8001928 <HAL_RCC_OscConfig+0x54c>
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80018b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001934 <HAL_RCC_OscConfig+0x558>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d030      	beq.n	8001924 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d129      	bne.n	8001924 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018da:	429a      	cmp	r2, r3
 80018dc:	d122      	bne.n	8001924 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80018e4:	4013      	ands	r3, r2
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80018ea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d119      	bne.n	8001924 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018fa:	085b      	lsrs	r3, r3, #1
 80018fc:	3b01      	subs	r3, #1
 80018fe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001900:	429a      	cmp	r2, r3
 8001902:	d10f      	bne.n	8001924 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800190e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001910:	429a      	cmp	r2, r3
 8001912:	d107      	bne.n	8001924 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001920:	429a      	cmp	r2, r3
 8001922:	d001      	beq.n	8001928 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e000      	b.n	800192a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40023800 	.word	0x40023800

08001938 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001942:	2300      	movs	r3, #0
 8001944:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d101      	bne.n	8001950 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e0d0      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001950:	4b6a      	ldr	r3, [pc, #424]	@ (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 030f 	and.w	r3, r3, #15
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	429a      	cmp	r2, r3
 800195c:	d910      	bls.n	8001980 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800195e:	4b67      	ldr	r3, [pc, #412]	@ (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f023 020f 	bic.w	r2, r3, #15
 8001966:	4965      	ldr	r1, [pc, #404]	@ (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	4313      	orrs	r3, r2
 800196c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800196e:	4b63      	ldr	r3, [pc, #396]	@ (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 030f 	and.w	r3, r3, #15
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	429a      	cmp	r2, r3
 800197a:	d001      	beq.n	8001980 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e0b8      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d020      	beq.n	80019ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	2b00      	cmp	r3, #0
 8001996:	d005      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001998:	4b59      	ldr	r3, [pc, #356]	@ (8001b00 <HAL_RCC_ClockConfig+0x1c8>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	4a58      	ldr	r2, [pc, #352]	@ (8001b00 <HAL_RCC_ClockConfig+0x1c8>)
 800199e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80019a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0308 	and.w	r3, r3, #8
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d005      	beq.n	80019bc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019b0:	4b53      	ldr	r3, [pc, #332]	@ (8001b00 <HAL_RCC_ClockConfig+0x1c8>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	4a52      	ldr	r2, [pc, #328]	@ (8001b00 <HAL_RCC_ClockConfig+0x1c8>)
 80019b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80019ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019bc:	4b50      	ldr	r3, [pc, #320]	@ (8001b00 <HAL_RCC_ClockConfig+0x1c8>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	494d      	ldr	r1, [pc, #308]	@ (8001b00 <HAL_RCC_ClockConfig+0x1c8>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d040      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d107      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e2:	4b47      	ldr	r3, [pc, #284]	@ (8001b00 <HAL_RCC_ClockConfig+0x1c8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d115      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e07f      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d107      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019fa:	4b41      	ldr	r3, [pc, #260]	@ (8001b00 <HAL_RCC_ClockConfig+0x1c8>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d109      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e073      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a0a:	4b3d      	ldr	r3, [pc, #244]	@ (8001b00 <HAL_RCC_ClockConfig+0x1c8>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e06b      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a1a:	4b39      	ldr	r3, [pc, #228]	@ (8001b00 <HAL_RCC_ClockConfig+0x1c8>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f023 0203 	bic.w	r2, r3, #3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	4936      	ldr	r1, [pc, #216]	@ (8001b00 <HAL_RCC_ClockConfig+0x1c8>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a2c:	f7ff f8d4 	bl	8000bd8 <HAL_GetTick>
 8001a30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a32:	e00a      	b.n	8001a4a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a34:	f7ff f8d0 	bl	8000bd8 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e053      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a4a:	4b2d      	ldr	r3, [pc, #180]	@ (8001b00 <HAL_RCC_ClockConfig+0x1c8>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f003 020c 	and.w	r2, r3, #12
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d1eb      	bne.n	8001a34 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a5c:	4b27      	ldr	r3, [pc, #156]	@ (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 030f 	and.w	r3, r3, #15
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d210      	bcs.n	8001a8c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a6a:	4b24      	ldr	r3, [pc, #144]	@ (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f023 020f 	bic.w	r2, r3, #15
 8001a72:	4922      	ldr	r1, [pc, #136]	@ (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a7a:	4b20      	ldr	r3, [pc, #128]	@ (8001afc <HAL_RCC_ClockConfig+0x1c4>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d001      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e032      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d008      	beq.n	8001aaa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a98:	4b19      	ldr	r3, [pc, #100]	@ (8001b00 <HAL_RCC_ClockConfig+0x1c8>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	4916      	ldr	r1, [pc, #88]	@ (8001b00 <HAL_RCC_ClockConfig+0x1c8>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0308 	and.w	r3, r3, #8
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d009      	beq.n	8001aca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ab6:	4b12      	ldr	r3, [pc, #72]	@ (8001b00 <HAL_RCC_ClockConfig+0x1c8>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	490e      	ldr	r1, [pc, #56]	@ (8001b00 <HAL_RCC_ClockConfig+0x1c8>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001aca:	f000 f821 	bl	8001b10 <HAL_RCC_GetSysClockFreq>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8001b00 <HAL_RCC_ClockConfig+0x1c8>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	091b      	lsrs	r3, r3, #4
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	490a      	ldr	r1, [pc, #40]	@ (8001b04 <HAL_RCC_ClockConfig+0x1cc>)
 8001adc:	5ccb      	ldrb	r3, [r1, r3]
 8001ade:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae2:	4a09      	ldr	r2, [pc, #36]	@ (8001b08 <HAL_RCC_ClockConfig+0x1d0>)
 8001ae4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ae6:	4b09      	ldr	r3, [pc, #36]	@ (8001b0c <HAL_RCC_ClockConfig+0x1d4>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff f830 	bl	8000b50 <HAL_InitTick>

  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40023c00 	.word	0x40023c00
 8001b00:	40023800 	.word	0x40023800
 8001b04:	08003084 	.word	0x08003084
 8001b08:	20000000 	.word	0x20000000
 8001b0c:	20000004 	.word	0x20000004

08001b10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b14:	b090      	sub	sp, #64	@ 0x40
 8001b16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b20:	2300      	movs	r3, #0
 8001b22:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b28:	4b59      	ldr	r3, [pc, #356]	@ (8001c90 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f003 030c 	and.w	r3, r3, #12
 8001b30:	2b08      	cmp	r3, #8
 8001b32:	d00d      	beq.n	8001b50 <HAL_RCC_GetSysClockFreq+0x40>
 8001b34:	2b08      	cmp	r3, #8
 8001b36:	f200 80a1 	bhi.w	8001c7c <HAL_RCC_GetSysClockFreq+0x16c>
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d002      	beq.n	8001b44 <HAL_RCC_GetSysClockFreq+0x34>
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	d003      	beq.n	8001b4a <HAL_RCC_GetSysClockFreq+0x3a>
 8001b42:	e09b      	b.n	8001c7c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b44:	4b53      	ldr	r3, [pc, #332]	@ (8001c94 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b46:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b48:	e09b      	b.n	8001c82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b4a:	4b53      	ldr	r3, [pc, #332]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b4c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b4e:	e098      	b.n	8001c82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b50:	4b4f      	ldr	r3, [pc, #316]	@ (8001c90 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b58:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001b5a:	4b4d      	ldr	r3, [pc, #308]	@ (8001c90 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d028      	beq.n	8001bb8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b66:	4b4a      	ldr	r3, [pc, #296]	@ (8001c90 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	099b      	lsrs	r3, r3, #6
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	623b      	str	r3, [r7, #32]
 8001b70:	627a      	str	r2, [r7, #36]	@ 0x24
 8001b72:	6a3b      	ldr	r3, [r7, #32]
 8001b74:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4b47      	ldr	r3, [pc, #284]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b7c:	fb03 f201 	mul.w	r2, r3, r1
 8001b80:	2300      	movs	r3, #0
 8001b82:	fb00 f303 	mul.w	r3, r0, r3
 8001b86:	4413      	add	r3, r2
 8001b88:	4a43      	ldr	r2, [pc, #268]	@ (8001c98 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b8a:	fba0 1202 	umull	r1, r2, r0, r2
 8001b8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b90:	460a      	mov	r2, r1
 8001b92:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001b94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b96:	4413      	add	r3, r2
 8001b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	61bb      	str	r3, [r7, #24]
 8001ba0:	61fa      	str	r2, [r7, #28]
 8001ba2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ba6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001baa:	f7fe fb45 	bl	8000238 <__aeabi_uldivmod>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001bb6:	e053      	b.n	8001c60 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bb8:	4b35      	ldr	r3, [pc, #212]	@ (8001c90 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	099b      	lsrs	r3, r3, #6
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	613b      	str	r3, [r7, #16]
 8001bc2:	617a      	str	r2, [r7, #20]
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001bca:	f04f 0b00 	mov.w	fp, #0
 8001bce:	4652      	mov	r2, sl
 8001bd0:	465b      	mov	r3, fp
 8001bd2:	f04f 0000 	mov.w	r0, #0
 8001bd6:	f04f 0100 	mov.w	r1, #0
 8001bda:	0159      	lsls	r1, r3, #5
 8001bdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001be0:	0150      	lsls	r0, r2, #5
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	ebb2 080a 	subs.w	r8, r2, sl
 8001bea:	eb63 090b 	sbc.w	r9, r3, fp
 8001bee:	f04f 0200 	mov.w	r2, #0
 8001bf2:	f04f 0300 	mov.w	r3, #0
 8001bf6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001bfa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001bfe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001c02:	ebb2 0408 	subs.w	r4, r2, r8
 8001c06:	eb63 0509 	sbc.w	r5, r3, r9
 8001c0a:	f04f 0200 	mov.w	r2, #0
 8001c0e:	f04f 0300 	mov.w	r3, #0
 8001c12:	00eb      	lsls	r3, r5, #3
 8001c14:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c18:	00e2      	lsls	r2, r4, #3
 8001c1a:	4614      	mov	r4, r2
 8001c1c:	461d      	mov	r5, r3
 8001c1e:	eb14 030a 	adds.w	r3, r4, sl
 8001c22:	603b      	str	r3, [r7, #0]
 8001c24:	eb45 030b 	adc.w	r3, r5, fp
 8001c28:	607b      	str	r3, [r7, #4]
 8001c2a:	f04f 0200 	mov.w	r2, #0
 8001c2e:	f04f 0300 	mov.w	r3, #0
 8001c32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c36:	4629      	mov	r1, r5
 8001c38:	028b      	lsls	r3, r1, #10
 8001c3a:	4621      	mov	r1, r4
 8001c3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c40:	4621      	mov	r1, r4
 8001c42:	028a      	lsls	r2, r1, #10
 8001c44:	4610      	mov	r0, r2
 8001c46:	4619      	mov	r1, r3
 8001c48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	60bb      	str	r3, [r7, #8]
 8001c4e:	60fa      	str	r2, [r7, #12]
 8001c50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c54:	f7fe faf0 	bl	8000238 <__aeabi_uldivmod>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001c60:	4b0b      	ldr	r3, [pc, #44]	@ (8001c90 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	0c1b      	lsrs	r3, r3, #16
 8001c66:	f003 0303 	and.w	r3, r3, #3
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001c70:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c78:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c7a:	e002      	b.n	8001c82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c7c:	4b05      	ldr	r3, [pc, #20]	@ (8001c94 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c7e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3740      	adds	r7, #64	@ 0x40
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c8e:	bf00      	nop
 8001c90:	40023800 	.word	0x40023800
 8001c94:	00f42400 	.word	0x00f42400
 8001c98:	017d7840 	.word	0x017d7840

08001c9c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ca0:	4b03      	ldr	r3, [pc, #12]	@ (8001cb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	20000000 	.word	0x20000000

08001cb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cb8:	f7ff fff0 	bl	8001c9c <HAL_RCC_GetHCLKFreq>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	4b05      	ldr	r3, [pc, #20]	@ (8001cd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	0a9b      	lsrs	r3, r3, #10
 8001cc4:	f003 0307 	and.w	r3, r3, #7
 8001cc8:	4903      	ldr	r1, [pc, #12]	@ (8001cd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cca:	5ccb      	ldrb	r3, [r1, r3]
 8001ccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	08003094 	.word	0x08003094

08001cdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ce0:	f7ff ffdc 	bl	8001c9c <HAL_RCC_GetHCLKFreq>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	4b05      	ldr	r3, [pc, #20]	@ (8001cfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	0b5b      	lsrs	r3, r3, #13
 8001cec:	f003 0307 	and.w	r3, r3, #7
 8001cf0:	4903      	ldr	r1, [pc, #12]	@ (8001d00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cf2:	5ccb      	ldrb	r3, [r1, r3]
 8001cf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	08003094 	.word	0x08003094

08001d04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b088      	sub	sp, #32
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001d14:	2300      	movs	r3, #0
 8001d16:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d012      	beq.n	8001d52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001d2c:	4b69      	ldr	r3, [pc, #420]	@ (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	4a68      	ldr	r2, [pc, #416]	@ (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d32:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001d36:	6093      	str	r3, [r2, #8]
 8001d38:	4b66      	ldr	r3, [pc, #408]	@ (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d40:	4964      	ldr	r1, [pc, #400]	@ (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d017      	beq.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d5e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d64:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d6c:	4959      	ldr	r1, [pc, #356]	@ (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001d7c:	d101      	bne.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d017      	beq.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d9a:	4b4e      	ldr	r3, [pc, #312]	@ (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001da0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da8:	494a      	ldr	r1, [pc, #296]	@ (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001db8:	d101      	bne.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0320 	and.w	r3, r3, #32
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 808b 	beq.w	8001efe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001de8:	4b3a      	ldr	r3, [pc, #232]	@ (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dec:	4a39      	ldr	r2, [pc, #228]	@ (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001df2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001df4:	4b37      	ldr	r3, [pc, #220]	@ (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001e00:	4b35      	ldr	r3, [pc, #212]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a34      	ldr	r2, [pc, #208]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e0c:	f7fe fee4 	bl	8000bd8 <HAL_GetTick>
 8001e10:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001e12:	e008      	b.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e14:	f7fe fee0 	bl	8000bd8 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b64      	cmp	r3, #100	@ 0x64
 8001e20:	d901      	bls.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e38f      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001e26:	4b2c      	ldr	r3, [pc, #176]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d0f0      	beq.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e32:	4b28      	ldr	r3, [pc, #160]	@ (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e3a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d035      	beq.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d02e      	beq.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e50:	4b20      	ldr	r3, [pc, #128]	@ (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e58:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e5e:	4a1d      	ldr	r2, [pc, #116]	@ (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e64:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e66:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e6a:	4a1a      	ldr	r2, [pc, #104]	@ (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e70:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001e72:	4a18      	ldr	r2, [pc, #96]	@ (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001e78:	4b16      	ldr	r3, [pc, #88]	@ (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d114      	bne.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e84:	f7fe fea8 	bl	8000bd8 <HAL_GetTick>
 8001e88:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e8a:	e00a      	b.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e8c:	f7fe fea4 	bl	8000bd8 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e351      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0ee      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001eb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001eba:	d111      	bne.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001ebc:	4b05      	ldr	r3, [pc, #20]	@ (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ec8:	4b04      	ldr	r3, [pc, #16]	@ (8001edc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001eca:	400b      	ands	r3, r1
 8001ecc:	4901      	ldr	r1, [pc, #4]	@ (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	608b      	str	r3, [r1, #8]
 8001ed2:	e00b      	b.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	40007000 	.word	0x40007000
 8001edc:	0ffffcff 	.word	0x0ffffcff
 8001ee0:	4bac      	ldr	r3, [pc, #688]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	4aab      	ldr	r2, [pc, #684]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ee6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001eea:	6093      	str	r3, [r2, #8]
 8001eec:	4ba9      	ldr	r3, [pc, #676]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ef8:	49a6      	ldr	r1, [pc, #664]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0310 	and.w	r3, r3, #16
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d010      	beq.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001f0a:	4ba2      	ldr	r3, [pc, #648]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f10:	4aa0      	ldr	r2, [pc, #640]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f16:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f1a:	4b9e      	ldr	r3, [pc, #632]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f1c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f24:	499b      	ldr	r1, [pc, #620]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00a      	beq.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f38:	4b96      	ldr	r3, [pc, #600]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f3e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f46:	4993      	ldr	r1, [pc, #588]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00a      	beq.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f5a:	4b8e      	ldr	r3, [pc, #568]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f60:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f68:	498a      	ldr	r1, [pc, #552]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d00a      	beq.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f7c:	4b85      	ldr	r3, [pc, #532]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f82:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f8a:	4982      	ldr	r1, [pc, #520]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00a      	beq.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001f9e:	4b7d      	ldr	r3, [pc, #500]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fa4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fac:	4979      	ldr	r1, [pc, #484]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00a      	beq.n	8001fd6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fc0:	4b74      	ldr	r3, [pc, #464]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fc6:	f023 0203 	bic.w	r2, r3, #3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fce:	4971      	ldr	r1, [pc, #452]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00a      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fe2:	4b6c      	ldr	r3, [pc, #432]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fe8:	f023 020c 	bic.w	r2, r3, #12
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ff0:	4968      	ldr	r1, [pc, #416]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00a      	beq.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002004:	4b63      	ldr	r3, [pc, #396]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002006:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800200a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002012:	4960      	ldr	r1, [pc, #384]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002014:	4313      	orrs	r3, r2
 8002016:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00a      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002026:	4b5b      	ldr	r3, [pc, #364]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002028:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800202c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002034:	4957      	ldr	r1, [pc, #348]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002036:	4313      	orrs	r3, r2
 8002038:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00a      	beq.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002048:	4b52      	ldr	r3, [pc, #328]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800204a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800204e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002056:	494f      	ldr	r1, [pc, #316]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002058:	4313      	orrs	r3, r2
 800205a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00a      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800206a:	4b4a      	ldr	r3, [pc, #296]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800206c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002070:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002078:	4946      	ldr	r1, [pc, #280]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800207a:	4313      	orrs	r3, r2
 800207c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00a      	beq.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800208c:	4b41      	ldr	r3, [pc, #260]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800208e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002092:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800209a:	493e      	ldr	r1, [pc, #248]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800209c:	4313      	orrs	r3, r2
 800209e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00a      	beq.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80020ae:	4b39      	ldr	r3, [pc, #228]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020b4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020bc:	4935      	ldr	r1, [pc, #212]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d00a      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80020d0:	4b30      	ldr	r3, [pc, #192]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020d6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80020de:	492d      	ldr	r1, [pc, #180]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d011      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80020f2:	4b28      	ldr	r3, [pc, #160]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020f8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002100:	4924      	ldr	r1, [pc, #144]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002102:	4313      	orrs	r3, r2
 8002104:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800210c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002110:	d101      	bne.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002112:	2301      	movs	r3, #1
 8002114:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0308 	and.w	r3, r3, #8
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002122:	2301      	movs	r3, #1
 8002124:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00a      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002132:	4b18      	ldr	r3, [pc, #96]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002138:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002140:	4914      	ldr	r1, [pc, #80]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002142:	4313      	orrs	r3, r2
 8002144:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00b      	beq.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002154:	4b0f      	ldr	r3, [pc, #60]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800215a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002164:	490b      	ldr	r1, [pc, #44]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002166:	4313      	orrs	r3, r2
 8002168:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00f      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002178:	4b06      	ldr	r3, [pc, #24]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800217a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800217e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002188:	4902      	ldr	r1, [pc, #8]	@ (8002194 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800218a:	4313      	orrs	r3, r2
 800218c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002190:	e002      	b.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002192:	bf00      	nop
 8002194:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d00b      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80021a4:	4b8a      	ldr	r3, [pc, #552]	@ (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021aa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021b4:	4986      	ldr	r1, [pc, #536]	@ (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00b      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80021c8:	4b81      	ldr	r3, [pc, #516]	@ (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021ce:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021d8:	497d      	ldr	r1, [pc, #500]	@ (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d006      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f000 80d6 	beq.w	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80021f4:	4b76      	ldr	r3, [pc, #472]	@ (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a75      	ldr	r2, [pc, #468]	@ (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80021fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002200:	f7fe fcea 	bl	8000bd8 <HAL_GetTick>
 8002204:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002206:	e008      	b.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002208:	f7fe fce6 	bl	8000bd8 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b64      	cmp	r3, #100	@ 0x64
 8002214:	d901      	bls.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e195      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800221a:	4b6d      	ldr	r3, [pc, #436]	@ (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1f0      	bne.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d021      	beq.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002236:	2b00      	cmp	r3, #0
 8002238:	d11d      	bne.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800223a:	4b65      	ldr	r3, [pc, #404]	@ (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800223c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002240:	0c1b      	lsrs	r3, r3, #16
 8002242:	f003 0303 	and.w	r3, r3, #3
 8002246:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002248:	4b61      	ldr	r3, [pc, #388]	@ (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800224a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800224e:	0e1b      	lsrs	r3, r3, #24
 8002250:	f003 030f 	and.w	r3, r3, #15
 8002254:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	019a      	lsls	r2, r3, #6
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	041b      	lsls	r3, r3, #16
 8002260:	431a      	orrs	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	061b      	lsls	r3, r3, #24
 8002266:	431a      	orrs	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	071b      	lsls	r3, r3, #28
 800226e:	4958      	ldr	r1, [pc, #352]	@ (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002270:	4313      	orrs	r3, r2
 8002272:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d004      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002286:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800228a:	d00a      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002294:	2b00      	cmp	r3, #0
 8002296:	d02e      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022a0:	d129      	bne.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80022a2:	4b4b      	ldr	r3, [pc, #300]	@ (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022a8:	0c1b      	lsrs	r3, r3, #16
 80022aa:	f003 0303 	and.w	r3, r3, #3
 80022ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80022b0:	4b47      	ldr	r3, [pc, #284]	@ (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022b6:	0f1b      	lsrs	r3, r3, #28
 80022b8:	f003 0307 	and.w	r3, r3, #7
 80022bc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	019a      	lsls	r2, r3, #6
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	041b      	lsls	r3, r3, #16
 80022c8:	431a      	orrs	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	061b      	lsls	r3, r3, #24
 80022d0:	431a      	orrs	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	071b      	lsls	r3, r3, #28
 80022d6:	493e      	ldr	r1, [pc, #248]	@ (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80022de:	4b3c      	ldr	r3, [pc, #240]	@ (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022e4:	f023 021f 	bic.w	r2, r3, #31
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ec:	3b01      	subs	r3, #1
 80022ee:	4938      	ldr	r1, [pc, #224]	@ (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d01d      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002302:	4b33      	ldr	r3, [pc, #204]	@ (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002304:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002308:	0e1b      	lsrs	r3, r3, #24
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002310:	4b2f      	ldr	r3, [pc, #188]	@ (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002312:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002316:	0f1b      	lsrs	r3, r3, #28
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	019a      	lsls	r2, r3, #6
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	041b      	lsls	r3, r3, #16
 800232a:	431a      	orrs	r2, r3
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	061b      	lsls	r3, r3, #24
 8002330:	431a      	orrs	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	071b      	lsls	r3, r3, #28
 8002336:	4926      	ldr	r1, [pc, #152]	@ (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002338:	4313      	orrs	r3, r2
 800233a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d011      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	019a      	lsls	r2, r3, #6
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	041b      	lsls	r3, r3, #16
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	061b      	lsls	r3, r3, #24
 800235e:	431a      	orrs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	071b      	lsls	r3, r3, #28
 8002366:	491a      	ldr	r1, [pc, #104]	@ (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002368:	4313      	orrs	r3, r2
 800236a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800236e:	4b18      	ldr	r3, [pc, #96]	@ (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a17      	ldr	r2, [pc, #92]	@ (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002374:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002378:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800237a:	f7fe fc2d 	bl	8000bd8 <HAL_GetTick>
 800237e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002380:	e008      	b.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002382:	f7fe fc29 	bl	8000bd8 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b64      	cmp	r3, #100	@ 0x64
 800238e:	d901      	bls.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e0d8      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002394:	4b0e      	ldr	r3, [pc, #56]	@ (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0f0      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	f040 80ce 	bne.w	8002544 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80023a8:	4b09      	ldr	r3, [pc, #36]	@ (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a08      	ldr	r2, [pc, #32]	@ (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023b4:	f7fe fc10 	bl	8000bd8 <HAL_GetTick>
 80023b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80023ba:	e00b      	b.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80023bc:	f7fe fc0c 	bl	8000bd8 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b64      	cmp	r3, #100	@ 0x64
 80023c8:	d904      	bls.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e0bb      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80023ce:	bf00      	nop
 80023d0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80023d4:	4b5e      	ldr	r3, [pc, #376]	@ (8002550 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80023dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80023e0:	d0ec      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d003      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d009      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d02e      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002406:	2b00      	cmp	r3, #0
 8002408:	d12a      	bne.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800240a:	4b51      	ldr	r3, [pc, #324]	@ (8002550 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800240c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002410:	0c1b      	lsrs	r3, r3, #16
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002418:	4b4d      	ldr	r3, [pc, #308]	@ (8002550 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800241a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800241e:	0f1b      	lsrs	r3, r3, #28
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	019a      	lsls	r2, r3, #6
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	041b      	lsls	r3, r3, #16
 8002430:	431a      	orrs	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	061b      	lsls	r3, r3, #24
 8002438:	431a      	orrs	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	071b      	lsls	r3, r3, #28
 800243e:	4944      	ldr	r1, [pc, #272]	@ (8002550 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002440:	4313      	orrs	r3, r2
 8002442:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002446:	4b42      	ldr	r3, [pc, #264]	@ (8002550 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002448:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800244c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002454:	3b01      	subs	r3, #1
 8002456:	021b      	lsls	r3, r3, #8
 8002458:	493d      	ldr	r1, [pc, #244]	@ (8002550 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800245a:	4313      	orrs	r3, r2
 800245c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d022      	beq.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002470:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002474:	d11d      	bne.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002476:	4b36      	ldr	r3, [pc, #216]	@ (8002550 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002478:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800247c:	0e1b      	lsrs	r3, r3, #24
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002484:	4b32      	ldr	r3, [pc, #200]	@ (8002550 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002486:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800248a:	0f1b      	lsrs	r3, r3, #28
 800248c:	f003 0307 	and.w	r3, r3, #7
 8002490:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	019a      	lsls	r2, r3, #6
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	041b      	lsls	r3, r3, #16
 800249e:	431a      	orrs	r2, r3
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	061b      	lsls	r3, r3, #24
 80024a4:	431a      	orrs	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	071b      	lsls	r3, r3, #28
 80024aa:	4929      	ldr	r1, [pc, #164]	@ (8002550 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0308 	and.w	r3, r3, #8
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d028      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80024be:	4b24      	ldr	r3, [pc, #144]	@ (8002550 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024c4:	0e1b      	lsrs	r3, r3, #24
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80024cc:	4b20      	ldr	r3, [pc, #128]	@ (8002550 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024d2:	0c1b      	lsrs	r3, r3, #16
 80024d4:	f003 0303 	and.w	r3, r3, #3
 80024d8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	019a      	lsls	r2, r3, #6
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	041b      	lsls	r3, r3, #16
 80024e4:	431a      	orrs	r2, r3
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	061b      	lsls	r3, r3, #24
 80024ea:	431a      	orrs	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	69db      	ldr	r3, [r3, #28]
 80024f0:	071b      	lsls	r3, r3, #28
 80024f2:	4917      	ldr	r1, [pc, #92]	@ (8002550 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80024fa:	4b15      	ldr	r3, [pc, #84]	@ (8002550 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002500:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002508:	4911      	ldr	r1, [pc, #68]	@ (8002550 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800250a:	4313      	orrs	r3, r2
 800250c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002510:	4b0f      	ldr	r3, [pc, #60]	@ (8002550 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a0e      	ldr	r2, [pc, #56]	@ (8002550 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002516:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800251a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800251c:	f7fe fb5c 	bl	8000bd8 <HAL_GetTick>
 8002520:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002524:	f7fe fb58 	bl	8000bd8 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b64      	cmp	r3, #100	@ 0x64
 8002530:	d901      	bls.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e007      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002536:	4b06      	ldr	r3, [pc, #24]	@ (8002550 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800253e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002542:	d1ef      	bne.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3720      	adds	r7, #32
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40023800 	.word	0x40023800

08002554 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e040      	b.n	80025e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800256a:	2b00      	cmp	r3, #0
 800256c:	d106      	bne.n	800257c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f7fe fa54 	bl	8000a24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2224      	movs	r2, #36	@ 0x24
 8002580:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 0201 	bic.w	r2, r2, #1
 8002590:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002596:	2b00      	cmp	r3, #0
 8002598:	d002      	beq.n	80025a0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 fb16 	bl	8002bcc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 f8af 	bl	8002704 <UART_SetConfig>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d101      	bne.n	80025b0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e01b      	b.n	80025e8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	685a      	ldr	r2, [r3, #4]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80025be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689a      	ldr	r2, [r3, #8]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80025ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0201 	orr.w	r2, r2, #1
 80025de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 fb95 	bl	8002d10 <UART_CheckIdleState>
 80025e6:	4603      	mov	r3, r0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b08a      	sub	sp, #40	@ 0x28
 80025f4:	af02      	add	r7, sp, #8
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	603b      	str	r3, [r7, #0]
 80025fc:	4613      	mov	r3, r2
 80025fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002604:	2b20      	cmp	r3, #32
 8002606:	d177      	bne.n	80026f8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d002      	beq.n	8002614 <HAL_UART_Transmit+0x24>
 800260e:	88fb      	ldrh	r3, [r7, #6]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d101      	bne.n	8002618 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e070      	b.n	80026fa <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2221      	movs	r2, #33	@ 0x21
 8002624:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002626:	f7fe fad7 	bl	8000bd8 <HAL_GetTick>
 800262a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	88fa      	ldrh	r2, [r7, #6]
 8002630:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	88fa      	ldrh	r2, [r7, #6]
 8002638:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002644:	d108      	bne.n	8002658 <HAL_UART_Transmit+0x68>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d104      	bne.n	8002658 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800264e:	2300      	movs	r3, #0
 8002650:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	61bb      	str	r3, [r7, #24]
 8002656:	e003      	b.n	8002660 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800265c:	2300      	movs	r3, #0
 800265e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002660:	e02f      	b.n	80026c2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	9300      	str	r3, [sp, #0]
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	2200      	movs	r2, #0
 800266a:	2180      	movs	r1, #128	@ 0x80
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	f000 fbf7 	bl	8002e60 <UART_WaitOnFlagUntilTimeout>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d004      	beq.n	8002682 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2220      	movs	r2, #32
 800267c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e03b      	b.n	80026fa <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10b      	bne.n	80026a0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	881b      	ldrh	r3, [r3, #0]
 800268c:	461a      	mov	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002696:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	3302      	adds	r3, #2
 800269c:	61bb      	str	r3, [r7, #24]
 800269e:	e007      	b.n	80026b0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	781a      	ldrb	r2, [r3, #0]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	3301      	adds	r3, #1
 80026ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	3b01      	subs	r3, #1
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1c9      	bne.n	8002662 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	2200      	movs	r2, #0
 80026d6:	2140      	movs	r1, #64	@ 0x40
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f000 fbc1 	bl	8002e60 <UART_WaitOnFlagUntilTimeout>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d004      	beq.n	80026ee <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2220      	movs	r2, #32
 80026e8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e005      	b.n	80026fa <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2220      	movs	r2, #32
 80026f2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80026f4:	2300      	movs	r3, #0
 80026f6:	e000      	b.n	80026fa <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80026f8:	2302      	movs	r3, #2
  }
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3720      	adds	r7, #32
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
	...

08002704 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b088      	sub	sp, #32
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800270c:	2300      	movs	r3, #0
 800270e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	431a      	orrs	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	431a      	orrs	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	4313      	orrs	r3, r2
 8002726:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	4ba6      	ldr	r3, [pc, #664]	@ (80029c8 <UART_SetConfig+0x2c4>)
 8002730:	4013      	ands	r3, r2
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	6812      	ldr	r2, [r2, #0]
 8002736:	6979      	ldr	r1, [r7, #20]
 8002738:	430b      	orrs	r3, r1
 800273a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68da      	ldr	r2, [r3, #12]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	430a      	orrs	r2, r1
 8002750:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	4313      	orrs	r3, r2
 8002760:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	430a      	orrs	r2, r1
 8002774:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a94      	ldr	r2, [pc, #592]	@ (80029cc <UART_SetConfig+0x2c8>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d120      	bne.n	80027c2 <UART_SetConfig+0xbe>
 8002780:	4b93      	ldr	r3, [pc, #588]	@ (80029d0 <UART_SetConfig+0x2cc>)
 8002782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002786:	f003 0303 	and.w	r3, r3, #3
 800278a:	2b03      	cmp	r3, #3
 800278c:	d816      	bhi.n	80027bc <UART_SetConfig+0xb8>
 800278e:	a201      	add	r2, pc, #4	@ (adr r2, 8002794 <UART_SetConfig+0x90>)
 8002790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002794:	080027a5 	.word	0x080027a5
 8002798:	080027b1 	.word	0x080027b1
 800279c:	080027ab 	.word	0x080027ab
 80027a0:	080027b7 	.word	0x080027b7
 80027a4:	2301      	movs	r3, #1
 80027a6:	77fb      	strb	r3, [r7, #31]
 80027a8:	e150      	b.n	8002a4c <UART_SetConfig+0x348>
 80027aa:	2302      	movs	r3, #2
 80027ac:	77fb      	strb	r3, [r7, #31]
 80027ae:	e14d      	b.n	8002a4c <UART_SetConfig+0x348>
 80027b0:	2304      	movs	r3, #4
 80027b2:	77fb      	strb	r3, [r7, #31]
 80027b4:	e14a      	b.n	8002a4c <UART_SetConfig+0x348>
 80027b6:	2308      	movs	r3, #8
 80027b8:	77fb      	strb	r3, [r7, #31]
 80027ba:	e147      	b.n	8002a4c <UART_SetConfig+0x348>
 80027bc:	2310      	movs	r3, #16
 80027be:	77fb      	strb	r3, [r7, #31]
 80027c0:	e144      	b.n	8002a4c <UART_SetConfig+0x348>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a83      	ldr	r2, [pc, #524]	@ (80029d4 <UART_SetConfig+0x2d0>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d132      	bne.n	8002832 <UART_SetConfig+0x12e>
 80027cc:	4b80      	ldr	r3, [pc, #512]	@ (80029d0 <UART_SetConfig+0x2cc>)
 80027ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027d2:	f003 030c 	and.w	r3, r3, #12
 80027d6:	2b0c      	cmp	r3, #12
 80027d8:	d828      	bhi.n	800282c <UART_SetConfig+0x128>
 80027da:	a201      	add	r2, pc, #4	@ (adr r2, 80027e0 <UART_SetConfig+0xdc>)
 80027dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e0:	08002815 	.word	0x08002815
 80027e4:	0800282d 	.word	0x0800282d
 80027e8:	0800282d 	.word	0x0800282d
 80027ec:	0800282d 	.word	0x0800282d
 80027f0:	08002821 	.word	0x08002821
 80027f4:	0800282d 	.word	0x0800282d
 80027f8:	0800282d 	.word	0x0800282d
 80027fc:	0800282d 	.word	0x0800282d
 8002800:	0800281b 	.word	0x0800281b
 8002804:	0800282d 	.word	0x0800282d
 8002808:	0800282d 	.word	0x0800282d
 800280c:	0800282d 	.word	0x0800282d
 8002810:	08002827 	.word	0x08002827
 8002814:	2300      	movs	r3, #0
 8002816:	77fb      	strb	r3, [r7, #31]
 8002818:	e118      	b.n	8002a4c <UART_SetConfig+0x348>
 800281a:	2302      	movs	r3, #2
 800281c:	77fb      	strb	r3, [r7, #31]
 800281e:	e115      	b.n	8002a4c <UART_SetConfig+0x348>
 8002820:	2304      	movs	r3, #4
 8002822:	77fb      	strb	r3, [r7, #31]
 8002824:	e112      	b.n	8002a4c <UART_SetConfig+0x348>
 8002826:	2308      	movs	r3, #8
 8002828:	77fb      	strb	r3, [r7, #31]
 800282a:	e10f      	b.n	8002a4c <UART_SetConfig+0x348>
 800282c:	2310      	movs	r3, #16
 800282e:	77fb      	strb	r3, [r7, #31]
 8002830:	e10c      	b.n	8002a4c <UART_SetConfig+0x348>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a68      	ldr	r2, [pc, #416]	@ (80029d8 <UART_SetConfig+0x2d4>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d120      	bne.n	800287e <UART_SetConfig+0x17a>
 800283c:	4b64      	ldr	r3, [pc, #400]	@ (80029d0 <UART_SetConfig+0x2cc>)
 800283e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002842:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002846:	2b30      	cmp	r3, #48	@ 0x30
 8002848:	d013      	beq.n	8002872 <UART_SetConfig+0x16e>
 800284a:	2b30      	cmp	r3, #48	@ 0x30
 800284c:	d814      	bhi.n	8002878 <UART_SetConfig+0x174>
 800284e:	2b20      	cmp	r3, #32
 8002850:	d009      	beq.n	8002866 <UART_SetConfig+0x162>
 8002852:	2b20      	cmp	r3, #32
 8002854:	d810      	bhi.n	8002878 <UART_SetConfig+0x174>
 8002856:	2b00      	cmp	r3, #0
 8002858:	d002      	beq.n	8002860 <UART_SetConfig+0x15c>
 800285a:	2b10      	cmp	r3, #16
 800285c:	d006      	beq.n	800286c <UART_SetConfig+0x168>
 800285e:	e00b      	b.n	8002878 <UART_SetConfig+0x174>
 8002860:	2300      	movs	r3, #0
 8002862:	77fb      	strb	r3, [r7, #31]
 8002864:	e0f2      	b.n	8002a4c <UART_SetConfig+0x348>
 8002866:	2302      	movs	r3, #2
 8002868:	77fb      	strb	r3, [r7, #31]
 800286a:	e0ef      	b.n	8002a4c <UART_SetConfig+0x348>
 800286c:	2304      	movs	r3, #4
 800286e:	77fb      	strb	r3, [r7, #31]
 8002870:	e0ec      	b.n	8002a4c <UART_SetConfig+0x348>
 8002872:	2308      	movs	r3, #8
 8002874:	77fb      	strb	r3, [r7, #31]
 8002876:	e0e9      	b.n	8002a4c <UART_SetConfig+0x348>
 8002878:	2310      	movs	r3, #16
 800287a:	77fb      	strb	r3, [r7, #31]
 800287c:	e0e6      	b.n	8002a4c <UART_SetConfig+0x348>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a56      	ldr	r2, [pc, #344]	@ (80029dc <UART_SetConfig+0x2d8>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d120      	bne.n	80028ca <UART_SetConfig+0x1c6>
 8002888:	4b51      	ldr	r3, [pc, #324]	@ (80029d0 <UART_SetConfig+0x2cc>)
 800288a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800288e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002892:	2bc0      	cmp	r3, #192	@ 0xc0
 8002894:	d013      	beq.n	80028be <UART_SetConfig+0x1ba>
 8002896:	2bc0      	cmp	r3, #192	@ 0xc0
 8002898:	d814      	bhi.n	80028c4 <UART_SetConfig+0x1c0>
 800289a:	2b80      	cmp	r3, #128	@ 0x80
 800289c:	d009      	beq.n	80028b2 <UART_SetConfig+0x1ae>
 800289e:	2b80      	cmp	r3, #128	@ 0x80
 80028a0:	d810      	bhi.n	80028c4 <UART_SetConfig+0x1c0>
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <UART_SetConfig+0x1a8>
 80028a6:	2b40      	cmp	r3, #64	@ 0x40
 80028a8:	d006      	beq.n	80028b8 <UART_SetConfig+0x1b4>
 80028aa:	e00b      	b.n	80028c4 <UART_SetConfig+0x1c0>
 80028ac:	2300      	movs	r3, #0
 80028ae:	77fb      	strb	r3, [r7, #31]
 80028b0:	e0cc      	b.n	8002a4c <UART_SetConfig+0x348>
 80028b2:	2302      	movs	r3, #2
 80028b4:	77fb      	strb	r3, [r7, #31]
 80028b6:	e0c9      	b.n	8002a4c <UART_SetConfig+0x348>
 80028b8:	2304      	movs	r3, #4
 80028ba:	77fb      	strb	r3, [r7, #31]
 80028bc:	e0c6      	b.n	8002a4c <UART_SetConfig+0x348>
 80028be:	2308      	movs	r3, #8
 80028c0:	77fb      	strb	r3, [r7, #31]
 80028c2:	e0c3      	b.n	8002a4c <UART_SetConfig+0x348>
 80028c4:	2310      	movs	r3, #16
 80028c6:	77fb      	strb	r3, [r7, #31]
 80028c8:	e0c0      	b.n	8002a4c <UART_SetConfig+0x348>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a44      	ldr	r2, [pc, #272]	@ (80029e0 <UART_SetConfig+0x2dc>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d125      	bne.n	8002920 <UART_SetConfig+0x21c>
 80028d4:	4b3e      	ldr	r3, [pc, #248]	@ (80029d0 <UART_SetConfig+0x2cc>)
 80028d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80028e2:	d017      	beq.n	8002914 <UART_SetConfig+0x210>
 80028e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80028e8:	d817      	bhi.n	800291a <UART_SetConfig+0x216>
 80028ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028ee:	d00b      	beq.n	8002908 <UART_SetConfig+0x204>
 80028f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028f4:	d811      	bhi.n	800291a <UART_SetConfig+0x216>
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <UART_SetConfig+0x1fe>
 80028fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028fe:	d006      	beq.n	800290e <UART_SetConfig+0x20a>
 8002900:	e00b      	b.n	800291a <UART_SetConfig+0x216>
 8002902:	2300      	movs	r3, #0
 8002904:	77fb      	strb	r3, [r7, #31]
 8002906:	e0a1      	b.n	8002a4c <UART_SetConfig+0x348>
 8002908:	2302      	movs	r3, #2
 800290a:	77fb      	strb	r3, [r7, #31]
 800290c:	e09e      	b.n	8002a4c <UART_SetConfig+0x348>
 800290e:	2304      	movs	r3, #4
 8002910:	77fb      	strb	r3, [r7, #31]
 8002912:	e09b      	b.n	8002a4c <UART_SetConfig+0x348>
 8002914:	2308      	movs	r3, #8
 8002916:	77fb      	strb	r3, [r7, #31]
 8002918:	e098      	b.n	8002a4c <UART_SetConfig+0x348>
 800291a:	2310      	movs	r3, #16
 800291c:	77fb      	strb	r3, [r7, #31]
 800291e:	e095      	b.n	8002a4c <UART_SetConfig+0x348>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a2f      	ldr	r2, [pc, #188]	@ (80029e4 <UART_SetConfig+0x2e0>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d125      	bne.n	8002976 <UART_SetConfig+0x272>
 800292a:	4b29      	ldr	r3, [pc, #164]	@ (80029d0 <UART_SetConfig+0x2cc>)
 800292c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002930:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002934:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002938:	d017      	beq.n	800296a <UART_SetConfig+0x266>
 800293a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800293e:	d817      	bhi.n	8002970 <UART_SetConfig+0x26c>
 8002940:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002944:	d00b      	beq.n	800295e <UART_SetConfig+0x25a>
 8002946:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800294a:	d811      	bhi.n	8002970 <UART_SetConfig+0x26c>
 800294c:	2b00      	cmp	r3, #0
 800294e:	d003      	beq.n	8002958 <UART_SetConfig+0x254>
 8002950:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002954:	d006      	beq.n	8002964 <UART_SetConfig+0x260>
 8002956:	e00b      	b.n	8002970 <UART_SetConfig+0x26c>
 8002958:	2301      	movs	r3, #1
 800295a:	77fb      	strb	r3, [r7, #31]
 800295c:	e076      	b.n	8002a4c <UART_SetConfig+0x348>
 800295e:	2302      	movs	r3, #2
 8002960:	77fb      	strb	r3, [r7, #31]
 8002962:	e073      	b.n	8002a4c <UART_SetConfig+0x348>
 8002964:	2304      	movs	r3, #4
 8002966:	77fb      	strb	r3, [r7, #31]
 8002968:	e070      	b.n	8002a4c <UART_SetConfig+0x348>
 800296a:	2308      	movs	r3, #8
 800296c:	77fb      	strb	r3, [r7, #31]
 800296e:	e06d      	b.n	8002a4c <UART_SetConfig+0x348>
 8002970:	2310      	movs	r3, #16
 8002972:	77fb      	strb	r3, [r7, #31]
 8002974:	e06a      	b.n	8002a4c <UART_SetConfig+0x348>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a1b      	ldr	r2, [pc, #108]	@ (80029e8 <UART_SetConfig+0x2e4>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d138      	bne.n	80029f2 <UART_SetConfig+0x2ee>
 8002980:	4b13      	ldr	r3, [pc, #76]	@ (80029d0 <UART_SetConfig+0x2cc>)
 8002982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002986:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800298a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800298e:	d017      	beq.n	80029c0 <UART_SetConfig+0x2bc>
 8002990:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002994:	d82a      	bhi.n	80029ec <UART_SetConfig+0x2e8>
 8002996:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800299a:	d00b      	beq.n	80029b4 <UART_SetConfig+0x2b0>
 800299c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029a0:	d824      	bhi.n	80029ec <UART_SetConfig+0x2e8>
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <UART_SetConfig+0x2aa>
 80029a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029aa:	d006      	beq.n	80029ba <UART_SetConfig+0x2b6>
 80029ac:	e01e      	b.n	80029ec <UART_SetConfig+0x2e8>
 80029ae:	2300      	movs	r3, #0
 80029b0:	77fb      	strb	r3, [r7, #31]
 80029b2:	e04b      	b.n	8002a4c <UART_SetConfig+0x348>
 80029b4:	2302      	movs	r3, #2
 80029b6:	77fb      	strb	r3, [r7, #31]
 80029b8:	e048      	b.n	8002a4c <UART_SetConfig+0x348>
 80029ba:	2304      	movs	r3, #4
 80029bc:	77fb      	strb	r3, [r7, #31]
 80029be:	e045      	b.n	8002a4c <UART_SetConfig+0x348>
 80029c0:	2308      	movs	r3, #8
 80029c2:	77fb      	strb	r3, [r7, #31]
 80029c4:	e042      	b.n	8002a4c <UART_SetConfig+0x348>
 80029c6:	bf00      	nop
 80029c8:	efff69f3 	.word	0xefff69f3
 80029cc:	40011000 	.word	0x40011000
 80029d0:	40023800 	.word	0x40023800
 80029d4:	40004400 	.word	0x40004400
 80029d8:	40004800 	.word	0x40004800
 80029dc:	40004c00 	.word	0x40004c00
 80029e0:	40005000 	.word	0x40005000
 80029e4:	40011400 	.word	0x40011400
 80029e8:	40007800 	.word	0x40007800
 80029ec:	2310      	movs	r3, #16
 80029ee:	77fb      	strb	r3, [r7, #31]
 80029f0:	e02c      	b.n	8002a4c <UART_SetConfig+0x348>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a72      	ldr	r2, [pc, #456]	@ (8002bc0 <UART_SetConfig+0x4bc>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d125      	bne.n	8002a48 <UART_SetConfig+0x344>
 80029fc:	4b71      	ldr	r3, [pc, #452]	@ (8002bc4 <UART_SetConfig+0x4c0>)
 80029fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a02:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002a06:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002a0a:	d017      	beq.n	8002a3c <UART_SetConfig+0x338>
 8002a0c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002a10:	d817      	bhi.n	8002a42 <UART_SetConfig+0x33e>
 8002a12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a16:	d00b      	beq.n	8002a30 <UART_SetConfig+0x32c>
 8002a18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a1c:	d811      	bhi.n	8002a42 <UART_SetConfig+0x33e>
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <UART_SetConfig+0x326>
 8002a22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a26:	d006      	beq.n	8002a36 <UART_SetConfig+0x332>
 8002a28:	e00b      	b.n	8002a42 <UART_SetConfig+0x33e>
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	77fb      	strb	r3, [r7, #31]
 8002a2e:	e00d      	b.n	8002a4c <UART_SetConfig+0x348>
 8002a30:	2302      	movs	r3, #2
 8002a32:	77fb      	strb	r3, [r7, #31]
 8002a34:	e00a      	b.n	8002a4c <UART_SetConfig+0x348>
 8002a36:	2304      	movs	r3, #4
 8002a38:	77fb      	strb	r3, [r7, #31]
 8002a3a:	e007      	b.n	8002a4c <UART_SetConfig+0x348>
 8002a3c:	2308      	movs	r3, #8
 8002a3e:	77fb      	strb	r3, [r7, #31]
 8002a40:	e004      	b.n	8002a4c <UART_SetConfig+0x348>
 8002a42:	2310      	movs	r3, #16
 8002a44:	77fb      	strb	r3, [r7, #31]
 8002a46:	e001      	b.n	8002a4c <UART_SetConfig+0x348>
 8002a48:	2310      	movs	r3, #16
 8002a4a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a54:	d15b      	bne.n	8002b0e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002a56:	7ffb      	ldrb	r3, [r7, #31]
 8002a58:	2b08      	cmp	r3, #8
 8002a5a:	d828      	bhi.n	8002aae <UART_SetConfig+0x3aa>
 8002a5c:	a201      	add	r2, pc, #4	@ (adr r2, 8002a64 <UART_SetConfig+0x360>)
 8002a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a62:	bf00      	nop
 8002a64:	08002a89 	.word	0x08002a89
 8002a68:	08002a91 	.word	0x08002a91
 8002a6c:	08002a99 	.word	0x08002a99
 8002a70:	08002aaf 	.word	0x08002aaf
 8002a74:	08002a9f 	.word	0x08002a9f
 8002a78:	08002aaf 	.word	0x08002aaf
 8002a7c:	08002aaf 	.word	0x08002aaf
 8002a80:	08002aaf 	.word	0x08002aaf
 8002a84:	08002aa7 	.word	0x08002aa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a88:	f7ff f914 	bl	8001cb4 <HAL_RCC_GetPCLK1Freq>
 8002a8c:	61b8      	str	r0, [r7, #24]
        break;
 8002a8e:	e013      	b.n	8002ab8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a90:	f7ff f924 	bl	8001cdc <HAL_RCC_GetPCLK2Freq>
 8002a94:	61b8      	str	r0, [r7, #24]
        break;
 8002a96:	e00f      	b.n	8002ab8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a98:	4b4b      	ldr	r3, [pc, #300]	@ (8002bc8 <UART_SetConfig+0x4c4>)
 8002a9a:	61bb      	str	r3, [r7, #24]
        break;
 8002a9c:	e00c      	b.n	8002ab8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a9e:	f7ff f837 	bl	8001b10 <HAL_RCC_GetSysClockFreq>
 8002aa2:	61b8      	str	r0, [r7, #24]
        break;
 8002aa4:	e008      	b.n	8002ab8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002aa6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002aaa:	61bb      	str	r3, [r7, #24]
        break;
 8002aac:	e004      	b.n	8002ab8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	77bb      	strb	r3, [r7, #30]
        break;
 8002ab6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d074      	beq.n	8002ba8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	005a      	lsls	r2, r3, #1
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	085b      	lsrs	r3, r3, #1
 8002ac8:	441a      	add	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	2b0f      	cmp	r3, #15
 8002ad8:	d916      	bls.n	8002b08 <UART_SetConfig+0x404>
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ae0:	d212      	bcs.n	8002b08 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	f023 030f 	bic.w	r3, r3, #15
 8002aea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	085b      	lsrs	r3, r3, #1
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	89fb      	ldrh	r3, [r7, #14]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	89fa      	ldrh	r2, [r7, #14]
 8002b04:	60da      	str	r2, [r3, #12]
 8002b06:	e04f      	b.n	8002ba8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	77bb      	strb	r3, [r7, #30]
 8002b0c:	e04c      	b.n	8002ba8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b0e:	7ffb      	ldrb	r3, [r7, #31]
 8002b10:	2b08      	cmp	r3, #8
 8002b12:	d828      	bhi.n	8002b66 <UART_SetConfig+0x462>
 8002b14:	a201      	add	r2, pc, #4	@ (adr r2, 8002b1c <UART_SetConfig+0x418>)
 8002b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b1a:	bf00      	nop
 8002b1c:	08002b41 	.word	0x08002b41
 8002b20:	08002b49 	.word	0x08002b49
 8002b24:	08002b51 	.word	0x08002b51
 8002b28:	08002b67 	.word	0x08002b67
 8002b2c:	08002b57 	.word	0x08002b57
 8002b30:	08002b67 	.word	0x08002b67
 8002b34:	08002b67 	.word	0x08002b67
 8002b38:	08002b67 	.word	0x08002b67
 8002b3c:	08002b5f 	.word	0x08002b5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b40:	f7ff f8b8 	bl	8001cb4 <HAL_RCC_GetPCLK1Freq>
 8002b44:	61b8      	str	r0, [r7, #24]
        break;
 8002b46:	e013      	b.n	8002b70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b48:	f7ff f8c8 	bl	8001cdc <HAL_RCC_GetPCLK2Freq>
 8002b4c:	61b8      	str	r0, [r7, #24]
        break;
 8002b4e:	e00f      	b.n	8002b70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b50:	4b1d      	ldr	r3, [pc, #116]	@ (8002bc8 <UART_SetConfig+0x4c4>)
 8002b52:	61bb      	str	r3, [r7, #24]
        break;
 8002b54:	e00c      	b.n	8002b70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b56:	f7fe ffdb 	bl	8001b10 <HAL_RCC_GetSysClockFreq>
 8002b5a:	61b8      	str	r0, [r7, #24]
        break;
 8002b5c:	e008      	b.n	8002b70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b62:	61bb      	str	r3, [r7, #24]
        break;
 8002b64:	e004      	b.n	8002b70 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	77bb      	strb	r3, [r7, #30]
        break;
 8002b6e:	bf00      	nop
    }

    if (pclk != 0U)
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d018      	beq.n	8002ba8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	085a      	lsrs	r2, r3, #1
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	441a      	add	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b88:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	2b0f      	cmp	r3, #15
 8002b8e:	d909      	bls.n	8002ba4 <UART_SetConfig+0x4a0>
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b96:	d205      	bcs.n	8002ba4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	60da      	str	r2, [r3, #12]
 8002ba2:	e001      	b.n	8002ba8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002bb4:	7fbb      	ldrb	r3, [r7, #30]
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3720      	adds	r7, #32
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40007c00 	.word	0x40007c00
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	00f42400 	.word	0x00f42400

08002bcc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd8:	f003 0308 	and.w	r3, r3, #8
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00a      	beq.n	8002bf6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00a      	beq.n	8002c18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	430a      	orrs	r2, r1
 8002c16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00a      	beq.n	8002c3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c3e:	f003 0304 	and.w	r3, r3, #4
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00a      	beq.n	8002c5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c60:	f003 0310 	and.w	r3, r3, #16
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00a      	beq.n	8002c7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c82:	f003 0320 	and.w	r3, r3, #32
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00a      	beq.n	8002ca0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d01a      	beq.n	8002ce2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002cca:	d10a      	bne.n	8002ce2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00a      	beq.n	8002d04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	430a      	orrs	r2, r1
 8002d02:	605a      	str	r2, [r3, #4]
  }
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b098      	sub	sp, #96	@ 0x60
 8002d14:	af02      	add	r7, sp, #8
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d20:	f7fd ff5a 	bl	8000bd8 <HAL_GetTick>
 8002d24:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0308 	and.w	r3, r3, #8
 8002d30:	2b08      	cmp	r3, #8
 8002d32:	d12e      	bne.n	8002d92 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d34:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 f88c 	bl	8002e60 <UART_WaitOnFlagUntilTimeout>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d021      	beq.n	8002d92 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d56:	e853 3f00 	ldrex	r3, [r3]
 8002d5a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002d5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d62:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	461a      	mov	r2, r3
 8002d6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d6e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002d72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d74:	e841 2300 	strex	r3, r2, [r1]
 8002d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002d7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1e6      	bne.n	8002d4e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2220      	movs	r2, #32
 8002d84:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e062      	b.n	8002e58 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0304 	and.w	r3, r3, #4
 8002d9c:	2b04      	cmp	r3, #4
 8002d9e:	d149      	bne.n	8002e34 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002da0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002da8:	2200      	movs	r2, #0
 8002daa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f856 	bl	8002e60 <UART_WaitOnFlagUntilTimeout>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d03c      	beq.n	8002e34 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc2:	e853 3f00 	ldrex	r3, [r3]
 8002dc6:	623b      	str	r3, [r7, #32]
   return(result);
 8002dc8:	6a3b      	ldr	r3, [r7, #32]
 8002dca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002dce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002dd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002dda:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ddc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002dde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002de0:	e841 2300 	strex	r3, r2, [r1]
 8002de4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1e6      	bne.n	8002dba <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	3308      	adds	r3, #8
 8002df2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	e853 3f00 	ldrex	r3, [r3]
 8002dfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f023 0301 	bic.w	r3, r3, #1
 8002e02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	3308      	adds	r3, #8
 8002e0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e0c:	61fa      	str	r2, [r7, #28]
 8002e0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e10:	69b9      	ldr	r1, [r7, #24]
 8002e12:	69fa      	ldr	r2, [r7, #28]
 8002e14:	e841 2300 	strex	r3, r2, [r1]
 8002e18:	617b      	str	r3, [r7, #20]
   return(result);
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1e5      	bne.n	8002dec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2220      	movs	r2, #32
 8002e24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e011      	b.n	8002e58 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2220      	movs	r2, #32
 8002e38:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3758      	adds	r7, #88	@ 0x58
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	603b      	str	r3, [r7, #0]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e70:	e04f      	b.n	8002f12 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e78:	d04b      	beq.n	8002f12 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e7a:	f7fd fead 	bl	8000bd8 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d302      	bcc.n	8002e90 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d101      	bne.n	8002e94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e04e      	b.n	8002f32 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0304 	and.w	r3, r3, #4
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d037      	beq.n	8002f12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	2b80      	cmp	r3, #128	@ 0x80
 8002ea6:	d034      	beq.n	8002f12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	2b40      	cmp	r3, #64	@ 0x40
 8002eac:	d031      	beq.n	8002f12 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	69db      	ldr	r3, [r3, #28]
 8002eb4:	f003 0308 	and.w	r3, r3, #8
 8002eb8:	2b08      	cmp	r3, #8
 8002eba:	d110      	bne.n	8002ede <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2208      	movs	r2, #8
 8002ec2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f000 f838 	bl	8002f3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2208      	movs	r2, #8
 8002ece:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e029      	b.n	8002f32 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	69db      	ldr	r3, [r3, #28]
 8002ee4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ee8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002eec:	d111      	bne.n	8002f12 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002ef6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f000 f81e 	bl	8002f3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2220      	movs	r2, #32
 8002f02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e00f      	b.n	8002f32 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	69da      	ldr	r2, [r3, #28]
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	bf0c      	ite	eq
 8002f22:	2301      	moveq	r3, #1
 8002f24:	2300      	movne	r3, #0
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	461a      	mov	r2, r3
 8002f2a:	79fb      	ldrb	r3, [r7, #7]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d0a0      	beq.n	8002e72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b095      	sub	sp, #84	@ 0x54
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f4a:	e853 3f00 	ldrex	r3, [r3]
 8002f4e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f60:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f62:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f64:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002f68:	e841 2300 	strex	r3, r2, [r1]
 8002f6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1e6      	bne.n	8002f42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	3308      	adds	r3, #8
 8002f7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f7c:	6a3b      	ldr	r3, [r7, #32]
 8002f7e:	e853 3f00 	ldrex	r3, [r3]
 8002f82:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	f023 0301 	bic.w	r3, r3, #1
 8002f8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	3308      	adds	r3, #8
 8002f92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f94:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f9c:	e841 2300 	strex	r3, r2, [r1]
 8002fa0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1e5      	bne.n	8002f74 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d118      	bne.n	8002fe2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	e853 3f00 	ldrex	r3, [r3]
 8002fbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	f023 0310 	bic.w	r3, r3, #16
 8002fc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fce:	61bb      	str	r3, [r7, #24]
 8002fd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd2:	6979      	ldr	r1, [r7, #20]
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	e841 2300 	strex	r3, r2, [r1]
 8002fda:	613b      	str	r3, [r7, #16]
   return(result);
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1e6      	bne.n	8002fb0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002ff6:	bf00      	nop
 8002ff8:	3754      	adds	r7, #84	@ 0x54
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <memset>:
 8003002:	4402      	add	r2, r0
 8003004:	4603      	mov	r3, r0
 8003006:	4293      	cmp	r3, r2
 8003008:	d100      	bne.n	800300c <memset+0xa>
 800300a:	4770      	bx	lr
 800300c:	f803 1b01 	strb.w	r1, [r3], #1
 8003010:	e7f9      	b.n	8003006 <memset+0x4>
	...

08003014 <__libc_init_array>:
 8003014:	b570      	push	{r4, r5, r6, lr}
 8003016:	4d0d      	ldr	r5, [pc, #52]	@ (800304c <__libc_init_array+0x38>)
 8003018:	4c0d      	ldr	r4, [pc, #52]	@ (8003050 <__libc_init_array+0x3c>)
 800301a:	1b64      	subs	r4, r4, r5
 800301c:	10a4      	asrs	r4, r4, #2
 800301e:	2600      	movs	r6, #0
 8003020:	42a6      	cmp	r6, r4
 8003022:	d109      	bne.n	8003038 <__libc_init_array+0x24>
 8003024:	4d0b      	ldr	r5, [pc, #44]	@ (8003054 <__libc_init_array+0x40>)
 8003026:	4c0c      	ldr	r4, [pc, #48]	@ (8003058 <__libc_init_array+0x44>)
 8003028:	f000 f818 	bl	800305c <_init>
 800302c:	1b64      	subs	r4, r4, r5
 800302e:	10a4      	asrs	r4, r4, #2
 8003030:	2600      	movs	r6, #0
 8003032:	42a6      	cmp	r6, r4
 8003034:	d105      	bne.n	8003042 <__libc_init_array+0x2e>
 8003036:	bd70      	pop	{r4, r5, r6, pc}
 8003038:	f855 3b04 	ldr.w	r3, [r5], #4
 800303c:	4798      	blx	r3
 800303e:	3601      	adds	r6, #1
 8003040:	e7ee      	b.n	8003020 <__libc_init_array+0xc>
 8003042:	f855 3b04 	ldr.w	r3, [r5], #4
 8003046:	4798      	blx	r3
 8003048:	3601      	adds	r6, #1
 800304a:	e7f2      	b.n	8003032 <__libc_init_array+0x1e>
 800304c:	080030a4 	.word	0x080030a4
 8003050:	080030a4 	.word	0x080030a4
 8003054:	080030a4 	.word	0x080030a4
 8003058:	080030a8 	.word	0x080030a8

0800305c <_init>:
 800305c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800305e:	bf00      	nop
 8003060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003062:	bc08      	pop	{r3}
 8003064:	469e      	mov	lr, r3
 8003066:	4770      	bx	lr

08003068 <_fini>:
 8003068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800306a:	bf00      	nop
 800306c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800306e:	bc08      	pop	{r3}
 8003070:	469e      	mov	lr, r3
 8003072:	4770      	bx	lr
