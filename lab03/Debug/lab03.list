
lab03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fc0  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  080031b8  080031b8  000041b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003284  08003284  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003284  08003284  00004284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800328c  0800328c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800328c  0800328c  0000428c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003290  08003290  00004290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003294  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  080032a0  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  080032a0  000050b8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000090e8  00000000  00000000  0000503a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001552  00000000  00000000  0000e122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d8  00000000  00000000  0000f678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000540  00000000  00000000  0000fd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026582  00000000  00000000  00010290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000918f  00000000  00000000  00036812  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0466  00000000  00000000  0003f9a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012fe07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b40  00000000  00000000  0012fe4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  0013198c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	080031a0 	.word	0x080031a0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	080031a0 	.word	0x080031a0

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b988 	b.w	8000570 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	468e      	mov	lr, r1
 8000280:	4604      	mov	r4, r0
 8000282:	4688      	mov	r8, r1
 8000284:	2b00      	cmp	r3, #0
 8000286:	d14a      	bne.n	800031e <__udivmoddi4+0xa6>
 8000288:	428a      	cmp	r2, r1
 800028a:	4617      	mov	r7, r2
 800028c:	d962      	bls.n	8000354 <__udivmoddi4+0xdc>
 800028e:	fab2 f682 	clz	r6, r2
 8000292:	b14e      	cbz	r6, 80002a8 <__udivmoddi4+0x30>
 8000294:	f1c6 0320 	rsb	r3, r6, #32
 8000298:	fa01 f806 	lsl.w	r8, r1, r6
 800029c:	fa20 f303 	lsr.w	r3, r0, r3
 80002a0:	40b7      	lsls	r7, r6
 80002a2:	ea43 0808 	orr.w	r8, r3, r8
 80002a6:	40b4      	lsls	r4, r6
 80002a8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ac:	fa1f fc87 	uxth.w	ip, r7
 80002b0:	fbb8 f1fe 	udiv	r1, r8, lr
 80002b4:	0c23      	lsrs	r3, r4, #16
 80002b6:	fb0e 8811 	mls	r8, lr, r1, r8
 80002ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002be:	fb01 f20c 	mul.w	r2, r1, ip
 80002c2:	429a      	cmp	r2, r3
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0x62>
 80002c6:	18fb      	adds	r3, r7, r3
 80002c8:	f101 30ff 	add.w	r0, r1, #4294967295
 80002cc:	f080 80ea 	bcs.w	80004a4 <__udivmoddi4+0x22c>
 80002d0:	429a      	cmp	r2, r3
 80002d2:	f240 80e7 	bls.w	80004a4 <__udivmoddi4+0x22c>
 80002d6:	3902      	subs	r1, #2
 80002d8:	443b      	add	r3, r7
 80002da:	1a9a      	subs	r2, r3, r2
 80002dc:	b2a3      	uxth	r3, r4
 80002de:	fbb2 f0fe 	udiv	r0, r2, lr
 80002e2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ea:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ee:	459c      	cmp	ip, r3
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0x8e>
 80002f2:	18fb      	adds	r3, r7, r3
 80002f4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f8:	f080 80d6 	bcs.w	80004a8 <__udivmoddi4+0x230>
 80002fc:	459c      	cmp	ip, r3
 80002fe:	f240 80d3 	bls.w	80004a8 <__udivmoddi4+0x230>
 8000302:	443b      	add	r3, r7
 8000304:	3802      	subs	r0, #2
 8000306:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800030a:	eba3 030c 	sub.w	r3, r3, ip
 800030e:	2100      	movs	r1, #0
 8000310:	b11d      	cbz	r5, 800031a <__udivmoddi4+0xa2>
 8000312:	40f3      	lsrs	r3, r6
 8000314:	2200      	movs	r2, #0
 8000316:	e9c5 3200 	strd	r3, r2, [r5]
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	428b      	cmp	r3, r1
 8000320:	d905      	bls.n	800032e <__udivmoddi4+0xb6>
 8000322:	b10d      	cbz	r5, 8000328 <__udivmoddi4+0xb0>
 8000324:	e9c5 0100 	strd	r0, r1, [r5]
 8000328:	2100      	movs	r1, #0
 800032a:	4608      	mov	r0, r1
 800032c:	e7f5      	b.n	800031a <__udivmoddi4+0xa2>
 800032e:	fab3 f183 	clz	r1, r3
 8000332:	2900      	cmp	r1, #0
 8000334:	d146      	bne.n	80003c4 <__udivmoddi4+0x14c>
 8000336:	4573      	cmp	r3, lr
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0xc8>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 8105 	bhi.w	800054a <__udivmoddi4+0x2d2>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb6e 0203 	sbc.w	r2, lr, r3
 8000346:	2001      	movs	r0, #1
 8000348:	4690      	mov	r8, r2
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0e5      	beq.n	800031a <__udivmoddi4+0xa2>
 800034e:	e9c5 4800 	strd	r4, r8, [r5]
 8000352:	e7e2      	b.n	800031a <__udivmoddi4+0xa2>
 8000354:	2a00      	cmp	r2, #0
 8000356:	f000 8090 	beq.w	800047a <__udivmoddi4+0x202>
 800035a:	fab2 f682 	clz	r6, r2
 800035e:	2e00      	cmp	r6, #0
 8000360:	f040 80a4 	bne.w	80004ac <__udivmoddi4+0x234>
 8000364:	1a8a      	subs	r2, r1, r2
 8000366:	0c03      	lsrs	r3, r0, #16
 8000368:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036c:	b280      	uxth	r0, r0
 800036e:	b2bc      	uxth	r4, r7
 8000370:	2101      	movs	r1, #1
 8000372:	fbb2 fcfe 	udiv	ip, r2, lr
 8000376:	fb0e 221c 	mls	r2, lr, ip, r2
 800037a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037e:	fb04 f20c 	mul.w	r2, r4, ip
 8000382:	429a      	cmp	r2, r3
 8000384:	d907      	bls.n	8000396 <__udivmoddi4+0x11e>
 8000386:	18fb      	adds	r3, r7, r3
 8000388:	f10c 38ff 	add.w	r8, ip, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x11c>
 800038e:	429a      	cmp	r2, r3
 8000390:	f200 80e0 	bhi.w	8000554 <__udivmoddi4+0x2dc>
 8000394:	46c4      	mov	ip, r8
 8000396:	1a9b      	subs	r3, r3, r2
 8000398:	fbb3 f2fe 	udiv	r2, r3, lr
 800039c:	fb0e 3312 	mls	r3, lr, r2, r3
 80003a0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003a4:	fb02 f404 	mul.w	r4, r2, r4
 80003a8:	429c      	cmp	r4, r3
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x144>
 80003ac:	18fb      	adds	r3, r7, r3
 80003ae:	f102 30ff 	add.w	r0, r2, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x142>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f200 80ca 	bhi.w	800054e <__udivmoddi4+0x2d6>
 80003ba:	4602      	mov	r2, r0
 80003bc:	1b1b      	subs	r3, r3, r4
 80003be:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003c2:	e7a5      	b.n	8000310 <__udivmoddi4+0x98>
 80003c4:	f1c1 0620 	rsb	r6, r1, #32
 80003c8:	408b      	lsls	r3, r1
 80003ca:	fa22 f706 	lsr.w	r7, r2, r6
 80003ce:	431f      	orrs	r7, r3
 80003d0:	fa0e f401 	lsl.w	r4, lr, r1
 80003d4:	fa20 f306 	lsr.w	r3, r0, r6
 80003d8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003dc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003e0:	4323      	orrs	r3, r4
 80003e2:	fa00 f801 	lsl.w	r8, r0, r1
 80003e6:	fa1f fc87 	uxth.w	ip, r7
 80003ea:	fbbe f0f9 	udiv	r0, lr, r9
 80003ee:	0c1c      	lsrs	r4, r3, #16
 80003f0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003f4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003f8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003fc:	45a6      	cmp	lr, r4
 80003fe:	fa02 f201 	lsl.w	r2, r2, r1
 8000402:	d909      	bls.n	8000418 <__udivmoddi4+0x1a0>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 3aff 	add.w	sl, r0, #4294967295
 800040a:	f080 809c 	bcs.w	8000546 <__udivmoddi4+0x2ce>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f240 8099 	bls.w	8000546 <__udivmoddi4+0x2ce>
 8000414:	3802      	subs	r0, #2
 8000416:	443c      	add	r4, r7
 8000418:	eba4 040e 	sub.w	r4, r4, lr
 800041c:	fa1f fe83 	uxth.w	lr, r3
 8000420:	fbb4 f3f9 	udiv	r3, r4, r9
 8000424:	fb09 4413 	mls	r4, r9, r3, r4
 8000428:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800042c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000430:	45a4      	cmp	ip, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x1ce>
 8000434:	193c      	adds	r4, r7, r4
 8000436:	f103 3eff 	add.w	lr, r3, #4294967295
 800043a:	f080 8082 	bcs.w	8000542 <__udivmoddi4+0x2ca>
 800043e:	45a4      	cmp	ip, r4
 8000440:	d97f      	bls.n	8000542 <__udivmoddi4+0x2ca>
 8000442:	3b02      	subs	r3, #2
 8000444:	443c      	add	r4, r7
 8000446:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800044a:	eba4 040c 	sub.w	r4, r4, ip
 800044e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000452:	4564      	cmp	r4, ip
 8000454:	4673      	mov	r3, lr
 8000456:	46e1      	mov	r9, ip
 8000458:	d362      	bcc.n	8000520 <__udivmoddi4+0x2a8>
 800045a:	d05f      	beq.n	800051c <__udivmoddi4+0x2a4>
 800045c:	b15d      	cbz	r5, 8000476 <__udivmoddi4+0x1fe>
 800045e:	ebb8 0203 	subs.w	r2, r8, r3
 8000462:	eb64 0409 	sbc.w	r4, r4, r9
 8000466:	fa04 f606 	lsl.w	r6, r4, r6
 800046a:	fa22 f301 	lsr.w	r3, r2, r1
 800046e:	431e      	orrs	r6, r3
 8000470:	40cc      	lsrs	r4, r1
 8000472:	e9c5 6400 	strd	r6, r4, [r5]
 8000476:	2100      	movs	r1, #0
 8000478:	e74f      	b.n	800031a <__udivmoddi4+0xa2>
 800047a:	fbb1 fcf2 	udiv	ip, r1, r2
 800047e:	0c01      	lsrs	r1, r0, #16
 8000480:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000484:	b280      	uxth	r0, r0
 8000486:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800048a:	463b      	mov	r3, r7
 800048c:	4638      	mov	r0, r7
 800048e:	463c      	mov	r4, r7
 8000490:	46b8      	mov	r8, r7
 8000492:	46be      	mov	lr, r7
 8000494:	2620      	movs	r6, #32
 8000496:	fbb1 f1f7 	udiv	r1, r1, r7
 800049a:	eba2 0208 	sub.w	r2, r2, r8
 800049e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004a2:	e766      	b.n	8000372 <__udivmoddi4+0xfa>
 80004a4:	4601      	mov	r1, r0
 80004a6:	e718      	b.n	80002da <__udivmoddi4+0x62>
 80004a8:	4610      	mov	r0, r2
 80004aa:	e72c      	b.n	8000306 <__udivmoddi4+0x8e>
 80004ac:	f1c6 0220 	rsb	r2, r6, #32
 80004b0:	fa2e f302 	lsr.w	r3, lr, r2
 80004b4:	40b7      	lsls	r7, r6
 80004b6:	40b1      	lsls	r1, r6
 80004b8:	fa20 f202 	lsr.w	r2, r0, r2
 80004bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004c0:	430a      	orrs	r2, r1
 80004c2:	fbb3 f8fe 	udiv	r8, r3, lr
 80004c6:	b2bc      	uxth	r4, r7
 80004c8:	fb0e 3318 	mls	r3, lr, r8, r3
 80004cc:	0c11      	lsrs	r1, r2, #16
 80004ce:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d2:	fb08 f904 	mul.w	r9, r8, r4
 80004d6:	40b0      	lsls	r0, r6
 80004d8:	4589      	cmp	r9, r1
 80004da:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004de:	b280      	uxth	r0, r0
 80004e0:	d93e      	bls.n	8000560 <__udivmoddi4+0x2e8>
 80004e2:	1879      	adds	r1, r7, r1
 80004e4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004e8:	d201      	bcs.n	80004ee <__udivmoddi4+0x276>
 80004ea:	4589      	cmp	r9, r1
 80004ec:	d81f      	bhi.n	800052e <__udivmoddi4+0x2b6>
 80004ee:	eba1 0109 	sub.w	r1, r1, r9
 80004f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f6:	fb09 f804 	mul.w	r8, r9, r4
 80004fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80004fe:	b292      	uxth	r2, r2
 8000500:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000504:	4542      	cmp	r2, r8
 8000506:	d229      	bcs.n	800055c <__udivmoddi4+0x2e4>
 8000508:	18ba      	adds	r2, r7, r2
 800050a:	f109 31ff 	add.w	r1, r9, #4294967295
 800050e:	d2c4      	bcs.n	800049a <__udivmoddi4+0x222>
 8000510:	4542      	cmp	r2, r8
 8000512:	d2c2      	bcs.n	800049a <__udivmoddi4+0x222>
 8000514:	f1a9 0102 	sub.w	r1, r9, #2
 8000518:	443a      	add	r2, r7
 800051a:	e7be      	b.n	800049a <__udivmoddi4+0x222>
 800051c:	45f0      	cmp	r8, lr
 800051e:	d29d      	bcs.n	800045c <__udivmoddi4+0x1e4>
 8000520:	ebbe 0302 	subs.w	r3, lr, r2
 8000524:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000528:	3801      	subs	r0, #1
 800052a:	46e1      	mov	r9, ip
 800052c:	e796      	b.n	800045c <__udivmoddi4+0x1e4>
 800052e:	eba7 0909 	sub.w	r9, r7, r9
 8000532:	4449      	add	r1, r9
 8000534:	f1a8 0c02 	sub.w	ip, r8, #2
 8000538:	fbb1 f9fe 	udiv	r9, r1, lr
 800053c:	fb09 f804 	mul.w	r8, r9, r4
 8000540:	e7db      	b.n	80004fa <__udivmoddi4+0x282>
 8000542:	4673      	mov	r3, lr
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1ce>
 8000546:	4650      	mov	r0, sl
 8000548:	e766      	b.n	8000418 <__udivmoddi4+0x1a0>
 800054a:	4608      	mov	r0, r1
 800054c:	e6fd      	b.n	800034a <__udivmoddi4+0xd2>
 800054e:	443b      	add	r3, r7
 8000550:	3a02      	subs	r2, #2
 8000552:	e733      	b.n	80003bc <__udivmoddi4+0x144>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	443b      	add	r3, r7
 800055a:	e71c      	b.n	8000396 <__udivmoddi4+0x11e>
 800055c:	4649      	mov	r1, r9
 800055e:	e79c      	b.n	800049a <__udivmoddi4+0x222>
 8000560:	eba1 0109 	sub.w	r1, r1, r9
 8000564:	46c4      	mov	ip, r8
 8000566:	fbb1 f9fe 	udiv	r9, r1, lr
 800056a:	fb09 f804 	mul.w	r8, r9, r4
 800056e:	e7c4      	b.n	80004fa <__udivmoddi4+0x282>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <Init.0>:
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART3_UART_Init();
  /* USER CODE BEGIN 2 */
  void Init()
  {
 8000574:	b580      	push	{r7, lr}
 8000576:	b098      	sub	sp, #96	@ 0x60
 8000578:	af00      	add	r7, sp, #0
 800057a:	f8c7 c004 	str.w	ip, [r7, #4]
  	char title[] = "Display Blinking LED PRESS (1, 2)\r\nDisplay Group Members PRESS m\r\nQuit PRESS q\r\n";
 800057e:	4a10      	ldr	r2, [pc, #64]	@ (80005c0 <Init.0+0x4c>)
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	4611      	mov	r1, r2
 8000586:	2251      	movs	r2, #81	@ 0x51
 8000588:	4618      	mov	r0, r3
 800058a:	f002 fdfb 	bl	8003184 <memcpy>
  	while(__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TC)==RESET){}
 800058e:	bf00      	nop
 8000590:	4b0c      	ldr	r3, [pc, #48]	@ (80005c4 <Init.0+0x50>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	69db      	ldr	r3, [r3, #28]
 8000596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800059a:	2b40      	cmp	r3, #64	@ 0x40
 800059c:	d1f8      	bne.n	8000590 <Init.0+0x1c>
  	HAL_UART_Transmit(&huart3, (uint8_t *)title, strlen(title), 100);
 800059e:	f107 030c 	add.w	r3, r7, #12
 80005a2:	4618      	mov	r0, r3
 80005a4:	f7ff fe48 	bl	8000238 <strlen>
 80005a8:	4603      	mov	r3, r0
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	f107 010c 	add.w	r1, r7, #12
 80005b0:	2364      	movs	r3, #100	@ 0x64
 80005b2:	4804      	ldr	r0, [pc, #16]	@ (80005c4 <Init.0+0x50>)
 80005b4:	f001 ffe8 	bl	8002588 <HAL_UART_Transmit>
  }
 80005b8:	bf00      	nop
 80005ba:	3760      	adds	r7, #96	@ 0x60
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	080031b8 	.word	0x080031b8
 80005c4:	20000028 	.word	0x20000028

080005c8 <main>:
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af02      	add	r7, sp, #8
int main(void)
 80005ce:	f107 0318 	add.w	r3, r7, #24
 80005d2:	60fb      	str	r3, [r7, #12]
  MPU_Config();
 80005d4:	f000 fa08 	bl	80009e8 <MPU_Config>
  HAL_Init();
 80005d8:	f000 fb27 	bl	8000c2a <HAL_Init>
  SystemClock_Config();
 80005dc:	f000 f946 	bl	800086c <SystemClock_Config>
  MX_GPIO_Init();
 80005e0:	f000 f9d0 	bl	8000984 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005e4:	f000 f99e 	bl	8000924 <MX_USART3_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  char character[5] = "?\r\n";
 80005e8:	4b14      	ldr	r3, [pc, #80]	@ (800063c <main+0x74>)
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	2300      	movs	r3, #0
 80005ee:	723b      	strb	r3, [r7, #8]



	  if(!isFinish)
 80005f0:	4b13      	ldr	r3, [pc, #76]	@ (8000640 <main+0x78>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d1f7      	bne.n	80005e8 <main+0x20>
	  {
		  if(!isFirst)
 80005f8:	4b12      	ldr	r3, [pc, #72]	@ (8000644 <main+0x7c>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d107      	bne.n	8000610 <main+0x48>
		  {
			  Init();
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	469c      	mov	ip, r3
 8000606:	f7ff ffb5 	bl	8000574 <Init.0>
			  isFirst = 1;
 800060a:	4b0e      	ldr	r3, [pc, #56]	@ (8000644 <main+0x7c>)
 800060c:	2201      	movs	r2, #1
 800060e:	701a      	strb	r2, [r3, #0]
		  }

		  WaitToRecieve(character);
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	f107 020c 	add.w	r2, r7, #12
 8000616:	4694      	mov	ip, r2
 8000618:	4618      	mov	r0, r3
 800061a:	f000 f817 	bl	800064c <WaitToRecieve.1>

		  CheckInput(character[0], &isFinish, GPIOD, GPIO_PIN_11, GPIO_PIN_12);
 800061e:	7938      	ldrb	r0, [r7, #4]
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000628:	9200      	str	r2, [sp, #0]
 800062a:	469c      	mov	ip, r3
 800062c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000630:	4a05      	ldr	r2, [pc, #20]	@ (8000648 <main+0x80>)
 8000632:	4903      	ldr	r1, [pc, #12]	@ (8000640 <main+0x78>)
 8000634:	f000 f856 	bl	80006e4 <CheckInput.2>
  {
 8000638:	e7d6      	b.n	80005e8 <main+0x20>
 800063a:	bf00      	nop
 800063c:	000a0d3f 	.word	0x000a0d3f
 8000640:	200000b1 	.word	0x200000b1
 8000644:	200000b0 	.word	0x200000b0
 8000648:	40020c00 	.word	0x40020c00

0800064c <WaitToRecieve.1>:
  {
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	f8c7 c000 	str.w	ip, [r7]
  	  char input[] = "\tInput => ";
 8000658:	4a20      	ldr	r2, [pc, #128]	@ (80006dc <WaitToRecieve.1+0x90>)
 800065a:	f107 030c 	add.w	r3, r7, #12
 800065e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000660:	c303      	stmia	r3!, {r0, r1}
 8000662:	801a      	strh	r2, [r3, #0]
 8000664:	3302      	adds	r3, #2
 8000666:	0c12      	lsrs	r2, r2, #16
 8000668:	701a      	strb	r2, [r3, #0]
  	  while(__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TC)==RESET){}
 800066a:	bf00      	nop
 800066c:	4b1c      	ldr	r3, [pc, #112]	@ (80006e0 <WaitToRecieve.1+0x94>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	69db      	ldr	r3, [r3, #28]
 8000672:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000676:	2b40      	cmp	r3, #64	@ 0x40
 8000678:	d1f8      	bne.n	800066c <WaitToRecieve.1+0x20>
  	  HAL_UART_Transmit(&huart3, (uint8_t *)input, strlen(input), 100);
 800067a:	f107 030c 	add.w	r3, r7, #12
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff fdda 	bl	8000238 <strlen>
 8000684:	4603      	mov	r3, r0
 8000686:	b29a      	uxth	r2, r3
 8000688:	f107 010c 	add.w	r1, r7, #12
 800068c:	2364      	movs	r3, #100	@ 0x64
 800068e:	4814      	ldr	r0, [pc, #80]	@ (80006e0 <WaitToRecieve.1+0x94>)
 8000690:	f001 ff7a 	bl	8002588 <HAL_UART_Transmit>
  	  while(__HAL_UART_GET_FLAG(&huart3, UART_FLAG_RXNE)==RESET){}
 8000694:	bf00      	nop
 8000696:	4b12      	ldr	r3, [pc, #72]	@ (80006e0 <WaitToRecieve.1+0x94>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	69db      	ldr	r3, [r3, #28]
 800069c:	f003 0320 	and.w	r3, r3, #32
 80006a0:	2b20      	cmp	r3, #32
 80006a2:	d1f8      	bne.n	8000696 <WaitToRecieve.1+0x4a>
  	  HAL_UART_Receive(&huart3, (uint8_t *)ch, 1, 100);
 80006a4:	2364      	movs	r3, #100	@ 0x64
 80006a6:	2201      	movs	r2, #1
 80006a8:	6879      	ldr	r1, [r7, #4]
 80006aa:	480d      	ldr	r0, [pc, #52]	@ (80006e0 <WaitToRecieve.1+0x94>)
 80006ac:	f001 fff5 	bl	800269a <HAL_UART_Receive>
  	  while(__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TC)==RESET){}
 80006b0:	bf00      	nop
 80006b2:	4b0b      	ldr	r3, [pc, #44]	@ (80006e0 <WaitToRecieve.1+0x94>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	69db      	ldr	r3, [r3, #28]
 80006b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006bc:	2b40      	cmp	r3, #64	@ 0x40
 80006be:	d1f8      	bne.n	80006b2 <WaitToRecieve.1+0x66>
  	  HAL_UART_Transmit(&huart3, (uint8_t *)ch, strlen(ch), 100);
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f7ff fdb9 	bl	8000238 <strlen>
 80006c6:	4603      	mov	r3, r0
 80006c8:	b29a      	uxth	r2, r3
 80006ca:	2364      	movs	r3, #100	@ 0x64
 80006cc:	6879      	ldr	r1, [r7, #4]
 80006ce:	4804      	ldr	r0, [pc, #16]	@ (80006e0 <WaitToRecieve.1+0x94>)
 80006d0:	f001 ff5a 	bl	8002588 <HAL_UART_Transmit>
  }
 80006d4:	bf00      	nop
 80006d6:	3718      	adds	r7, #24
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	0800320c 	.word	0x0800320c
 80006e0:	20000028 	.word	0x20000028

080006e4 <CheckInput.2>:
  {
 80006e4:	b5b0      	push	{r4, r5, r7, lr}
 80006e6:	b09e      	sub	sp, #120	@ 0x78
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60b9      	str	r1, [r7, #8]
 80006ec:	607a      	str	r2, [r7, #4]
 80006ee:	461a      	mov	r2, r3
 80006f0:	4603      	mov	r3, r0
 80006f2:	73fb      	strb	r3, [r7, #15]
 80006f4:	4613      	mov	r3, r2
 80006f6:	81bb      	strh	r3, [r7, #12]
 80006f8:	f8c7 c000 	str.w	ip, [r7]
  	if(ch == 'q')
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
 80006fe:	2b71      	cmp	r3, #113	@ 0x71
 8000700:	d11d      	bne.n	800073e <CheckInput.2+0x5a>
  		char quit[] = "Quit";
 8000702:	4b56      	ldr	r3, [pc, #344]	@ (800085c <CheckInput.2+0x178>)
 8000704:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000706:	2300      	movs	r3, #0
 8000708:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  		while(__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TC)==RESET){}
 800070c:	bf00      	nop
 800070e:	4b54      	ldr	r3, [pc, #336]	@ (8000860 <CheckInput.2+0x17c>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	69db      	ldr	r3, [r3, #28]
 8000714:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000718:	2b40      	cmp	r3, #64	@ 0x40
 800071a:	d1f8      	bne.n	800070e <CheckInput.2+0x2a>
  		HAL_UART_Transmit(&huart3, (uint8_t *)quit, strlen(quit), 100);
 800071c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff fd89 	bl	8000238 <strlen>
 8000726:	4603      	mov	r3, r0
 8000728:	b29a      	uxth	r2, r3
 800072a:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 800072e:	2364      	movs	r3, #100	@ 0x64
 8000730:	484b      	ldr	r0, [pc, #300]	@ (8000860 <CheckInput.2+0x17c>)
 8000732:	f001 ff29 	bl	8002588 <HAL_UART_Transmit>
  		*isFinish = 1;
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	2201      	movs	r2, #1
 800073a:	701a      	strb	r2, [r3, #0]
  }
 800073c:	e08a      	b.n	8000854 <CheckInput.2+0x170>
  	else if(ch == 'm')
 800073e:	7bfb      	ldrb	r3, [r7, #15]
 8000740:	2b6d      	cmp	r3, #109	@ 0x6d
 8000742:	d126      	bne.n	8000792 <CheckInput.2+0xae>
  		char name[] = "66010695\r\nRachchanon Klaisuban\r\n66011397\r\nNorawitch Chunjuti\r\n";
 8000744:	4b47      	ldr	r3, [pc, #284]	@ (8000864 <CheckInput.2+0x180>)
 8000746:	f107 0414 	add.w	r4, r7, #20
 800074a:	461d      	mov	r5, r3
 800074c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800074e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000750:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000752:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000754:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000756:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000758:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800075c:	c407      	stmia	r4!, {r0, r1, r2}
 800075e:	8023      	strh	r3, [r4, #0]
 8000760:	3402      	adds	r4, #2
 8000762:	0c1b      	lsrs	r3, r3, #16
 8000764:	7023      	strb	r3, [r4, #0]
  		while(__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TC)==RESET){}
 8000766:	bf00      	nop
 8000768:	4b3d      	ldr	r3, [pc, #244]	@ (8000860 <CheckInput.2+0x17c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	69db      	ldr	r3, [r3, #28]
 800076e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000772:	2b40      	cmp	r3, #64	@ 0x40
 8000774:	d1f8      	bne.n	8000768 <CheckInput.2+0x84>
  		HAL_UART_Transmit(&huart3, (uint8_t *)name, strlen(name), 100);
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff fd5c 	bl	8000238 <strlen>
 8000780:	4603      	mov	r3, r0
 8000782:	b29a      	uxth	r2, r3
 8000784:	f107 0114 	add.w	r1, r7, #20
 8000788:	2364      	movs	r3, #100	@ 0x64
 800078a:	4835      	ldr	r0, [pc, #212]	@ (8000860 <CheckInput.2+0x17c>)
 800078c:	f001 fefc 	bl	8002588 <HAL_UART_Transmit>
  }
 8000790:	e060      	b.n	8000854 <CheckInput.2+0x170>
  	else if(ch == '1')
 8000792:	7bfb      	ldrb	r3, [r7, #15]
 8000794:	2b31      	cmp	r3, #49	@ 0x31
 8000796:	d11d      	bne.n	80007d4 <CheckInput.2+0xf0>
  		for(int i = 0; i < 3; i++)
 8000798:	2300      	movs	r3, #0
 800079a:	677b      	str	r3, [r7, #116]	@ 0x74
 800079c:	e016      	b.n	80007cc <CheckInput.2+0xe8>
  			HAL_GPIO_WritePin(GPIOx, GPIO_Pin1, GPIO_PIN_SET);
 800079e:	89bb      	ldrh	r3, [r7, #12]
 80007a0:	2201      	movs	r2, #1
 80007a2:	4619      	mov	r1, r3
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f000 fdcb 	bl	8001340 <HAL_GPIO_WritePin>
  			HAL_Delay(300);
 80007aa:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80007ae:	f000 fa99 	bl	8000ce4 <HAL_Delay>
  			HAL_GPIO_WritePin(GPIOx, GPIO_Pin1, GPIO_PIN_RESET);
 80007b2:	89bb      	ldrh	r3, [r7, #12]
 80007b4:	2200      	movs	r2, #0
 80007b6:	4619      	mov	r1, r3
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	f000 fdc1 	bl	8001340 <HAL_GPIO_WritePin>
  			HAL_Delay(300);
 80007be:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80007c2:	f000 fa8f 	bl	8000ce4 <HAL_Delay>
  		for(int i = 0; i < 3; i++)
 80007c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80007c8:	3301      	adds	r3, #1
 80007ca:	677b      	str	r3, [r7, #116]	@ 0x74
 80007cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80007ce:	2b02      	cmp	r3, #2
 80007d0:	dde5      	ble.n	800079e <CheckInput.2+0xba>
  }
 80007d2:	e03f      	b.n	8000854 <CheckInput.2+0x170>
  	else if(ch == '2')
 80007d4:	7bfb      	ldrb	r3, [r7, #15]
 80007d6:	2b32      	cmp	r3, #50	@ 0x32
 80007d8:	d11f      	bne.n	800081a <CheckInput.2+0x136>
  		for(int i = 0; i < 3; i++)
 80007da:	2300      	movs	r3, #0
 80007dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80007de:	e018      	b.n	8000812 <CheckInput.2+0x12e>
  			HAL_GPIO_WritePin(GPIOx, GPIO_Pin2, GPIO_PIN_SET);
 80007e0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80007e4:	2201      	movs	r2, #1
 80007e6:	4619      	mov	r1, r3
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f000 fda9 	bl	8001340 <HAL_GPIO_WritePin>
  			HAL_Delay(300);
 80007ee:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80007f2:	f000 fa77 	bl	8000ce4 <HAL_Delay>
  			HAL_GPIO_WritePin(GPIOx, GPIO_Pin2, GPIO_PIN_RESET);
 80007f6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80007fa:	2200      	movs	r2, #0
 80007fc:	4619      	mov	r1, r3
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f000 fd9e 	bl	8001340 <HAL_GPIO_WritePin>
  			HAL_Delay(300);
 8000804:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000808:	f000 fa6c 	bl	8000ce4 <HAL_Delay>
  		for(int i = 0; i < 3; i++)
 800080c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800080e:	3301      	adds	r3, #1
 8000810:	673b      	str	r3, [r7, #112]	@ 0x70
 8000812:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000814:	2b02      	cmp	r3, #2
 8000816:	dde3      	ble.n	80007e0 <CheckInput.2+0xfc>
  }
 8000818:	e01c      	b.n	8000854 <CheckInput.2+0x170>
  		char unknown[] = "Unknown Command\r\n";
 800081a:	4b13      	ldr	r3, [pc, #76]	@ (8000868 <CheckInput.2+0x184>)
 800081c:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8000820:	461d      	mov	r5, r3
 8000822:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000824:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000826:	682b      	ldr	r3, [r5, #0]
 8000828:	8023      	strh	r3, [r4, #0]
  		while(__HAL_UART_GET_FLAG(&huart3, UART_FLAG_TC)==RESET){}
 800082a:	bf00      	nop
 800082c:	4b0c      	ldr	r3, [pc, #48]	@ (8000860 <CheckInput.2+0x17c>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	69db      	ldr	r3, [r3, #28]
 8000832:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000836:	2b40      	cmp	r3, #64	@ 0x40
 8000838:	d1f8      	bne.n	800082c <CheckInput.2+0x148>
  		HAL_UART_Transmit(&huart3, (uint8_t *)unknown, strlen(unknown), 100);
 800083a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff fcfa 	bl	8000238 <strlen>
 8000844:	4603      	mov	r3, r0
 8000846:	b29a      	uxth	r2, r3
 8000848:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 800084c:	2364      	movs	r3, #100	@ 0x64
 800084e:	4804      	ldr	r0, [pc, #16]	@ (8000860 <CheckInput.2+0x17c>)
 8000850:	f001 fe9a 	bl	8002588 <HAL_UART_Transmit>
  }
 8000854:	bf00      	nop
 8000856:	3778      	adds	r7, #120	@ 0x78
 8000858:	46bd      	mov	sp, r7
 800085a:	bdb0      	pop	{r4, r5, r7, pc}
 800085c:	74697551 	.word	0x74697551
 8000860:	20000028 	.word	0x20000028
 8000864:	08003218 	.word	0x08003218
 8000868:	08003258 	.word	0x08003258

0800086c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b094      	sub	sp, #80	@ 0x50
 8000870:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	2234      	movs	r2, #52	@ 0x34
 8000878:	2100      	movs	r1, #0
 800087a:	4618      	mov	r0, r3
 800087c:	f002 fc55 	bl	800312a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000880:	f107 0308 	add.w	r3, r7, #8
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
 800088c:	60da      	str	r2, [r3, #12]
 800088e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000890:	4b22      	ldr	r3, [pc, #136]	@ (800091c <SystemClock_Config+0xb0>)
 8000892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000894:	4a21      	ldr	r2, [pc, #132]	@ (800091c <SystemClock_Config+0xb0>)
 8000896:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800089a:	6413      	str	r3, [r2, #64]	@ 0x40
 800089c:	4b1f      	ldr	r3, [pc, #124]	@ (800091c <SystemClock_Config+0xb0>)
 800089e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000920 <SystemClock_Config+0xb4>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000920 <SystemClock_Config+0xb4>)
 80008b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008b6:	6013      	str	r3, [r2, #0]
 80008b8:	4b19      	ldr	r3, [pc, #100]	@ (8000920 <SystemClock_Config+0xb4>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008c0:	603b      	str	r3, [r7, #0]
 80008c2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008c4:	2302      	movs	r3, #2
 80008c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c8:	2301      	movs	r3, #1
 80008ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008cc:	2310      	movs	r3, #16
 80008ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4618      	mov	r0, r3
 80008da:	f000 fd4b 	bl	8001374 <HAL_RCC_OscConfig>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80008e4:	f000 f8ac 	bl	8000a40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e8:	230f      	movs	r3, #15
 80008ea:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f0:	2300      	movs	r3, #0
 80008f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008fc:	f107 0308 	add.w	r3, r7, #8
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f000 ffe4 	bl	80018d0 <HAL_RCC_ClockConfig>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800090e:	f000 f897 	bl	8000a40 <Error_Handler>
  }
}
 8000912:	bf00      	nop
 8000914:	3750      	adds	r7, #80	@ 0x50
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40023800 	.word	0x40023800
 8000920:	40007000 	.word	0x40007000

08000924 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000928:	4b14      	ldr	r3, [pc, #80]	@ (800097c <MX_USART3_UART_Init+0x58>)
 800092a:	4a15      	ldr	r2, [pc, #84]	@ (8000980 <MX_USART3_UART_Init+0x5c>)
 800092c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800092e:	4b13      	ldr	r3, [pc, #76]	@ (800097c <MX_USART3_UART_Init+0x58>)
 8000930:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000934:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000936:	4b11      	ldr	r3, [pc, #68]	@ (800097c <MX_USART3_UART_Init+0x58>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800093c:	4b0f      	ldr	r3, [pc, #60]	@ (800097c <MX_USART3_UART_Init+0x58>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000942:	4b0e      	ldr	r3, [pc, #56]	@ (800097c <MX_USART3_UART_Init+0x58>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000948:	4b0c      	ldr	r3, [pc, #48]	@ (800097c <MX_USART3_UART_Init+0x58>)
 800094a:	220c      	movs	r2, #12
 800094c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094e:	4b0b      	ldr	r3, [pc, #44]	@ (800097c <MX_USART3_UART_Init+0x58>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000954:	4b09      	ldr	r3, [pc, #36]	@ (800097c <MX_USART3_UART_Init+0x58>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800095a:	4b08      	ldr	r3, [pc, #32]	@ (800097c <MX_USART3_UART_Init+0x58>)
 800095c:	2200      	movs	r2, #0
 800095e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000960:	4b06      	ldr	r3, [pc, #24]	@ (800097c <MX_USART3_UART_Init+0x58>)
 8000962:	2200      	movs	r2, #0
 8000964:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000966:	4805      	ldr	r0, [pc, #20]	@ (800097c <MX_USART3_UART_Init+0x58>)
 8000968:	f001 fdc0 	bl	80024ec <HAL_UART_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000972:	f000 f865 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000028 	.word	0x20000028
 8000980:	40004800 	.word	0x40004800

08000984 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000998:	4b11      	ldr	r3, [pc, #68]	@ (80009e0 <MX_GPIO_Init+0x5c>)
 800099a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099c:	4a10      	ldr	r2, [pc, #64]	@ (80009e0 <MX_GPIO_Init+0x5c>)
 800099e:	f043 0308 	orr.w	r3, r3, #8
 80009a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80009a4:	4b0e      	ldr	r3, [pc, #56]	@ (80009e0 <MX_GPIO_Init+0x5c>)
 80009a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a8:	f003 0308 	and.w	r3, r3, #8
 80009ac:	603b      	str	r3, [r7, #0]
 80009ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80009b6:	480b      	ldr	r0, [pc, #44]	@ (80009e4 <MX_GPIO_Init+0x60>)
 80009b8:	f000 fcc2 	bl	8001340 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD11 PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80009bc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80009c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c2:	2301      	movs	r3, #1
 80009c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	4619      	mov	r1, r3
 80009d2:	4804      	ldr	r0, [pc, #16]	@ (80009e4 <MX_GPIO_Init+0x60>)
 80009d4:	f000 fb08 	bl	8000fe8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009d8:	bf00      	nop
 80009da:	3718      	adds	r7, #24
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40020c00 	.word	0x40020c00

080009e8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80009ee:	463b      	mov	r3, r7
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80009fa:	f000 fa7d 	bl	8000ef8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80009fe:	2301      	movs	r3, #1
 8000a00:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000a0a:	231f      	movs	r3, #31
 8000a0c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000a0e:	2387      	movs	r3, #135	@ 0x87
 8000a10:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000a16:	2300      	movs	r3, #0
 8000a18:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000a22:	2300      	movs	r3, #0
 8000a24:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000a26:	2300      	movs	r3, #0
 8000a28:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a2a:	463b      	mov	r3, r7
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f000 fa9b 	bl	8000f68 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000a32:	2004      	movs	r0, #4
 8000a34:	f000 fa78 	bl	8000f28 <HAL_MPU_Enable>

}
 8000a38:	bf00      	nop
 8000a3a:	3710      	adds	r7, #16
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a44:	b672      	cpsid	i
}
 8000a46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <Error_Handler+0x8>

08000a4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a52:	4b0f      	ldr	r3, [pc, #60]	@ (8000a90 <HAL_MspInit+0x44>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a56:	4a0e      	ldr	r2, [pc, #56]	@ (8000a90 <HAL_MspInit+0x44>)
 8000a58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a90 <HAL_MspInit+0x44>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6a:	4b09      	ldr	r3, [pc, #36]	@ (8000a90 <HAL_MspInit+0x44>)
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a6e:	4a08      	ldr	r2, [pc, #32]	@ (8000a90 <HAL_MspInit+0x44>)
 8000a70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a74:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a76:	4b06      	ldr	r3, [pc, #24]	@ (8000a90 <HAL_MspInit+0x44>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	40023800 	.word	0x40023800

08000a94 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b0ae      	sub	sp, #184	@ 0xb8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	2290      	movs	r2, #144	@ 0x90
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f002 fb38 	bl	800312a <memset>
  if(huart->Instance==USART3)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a22      	ldr	r2, [pc, #136]	@ (8000b48 <HAL_UART_MspInit+0xb4>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d13c      	bne.n	8000b3e <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ac4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ac8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000aca:	2300      	movs	r3, #0
 8000acc:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ace:	f107 0314 	add.w	r3, r7, #20
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f001 f8e2 	bl	8001c9c <HAL_RCCEx_PeriphCLKConfig>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ade:	f7ff ffaf 	bl	8000a40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ae2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b4c <HAL_UART_MspInit+0xb8>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae6:	4a19      	ldr	r2, [pc, #100]	@ (8000b4c <HAL_UART_MspInit+0xb8>)
 8000ae8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000aec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aee:	4b17      	ldr	r3, [pc, #92]	@ (8000b4c <HAL_UART_MspInit+0xb8>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000afa:	4b14      	ldr	r3, [pc, #80]	@ (8000b4c <HAL_UART_MspInit+0xb8>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	4a13      	ldr	r2, [pc, #76]	@ (8000b4c <HAL_UART_MspInit+0xb8>)
 8000b00:	f043 0308 	orr.w	r3, r3, #8
 8000b04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b06:	4b11      	ldr	r3, [pc, #68]	@ (8000b4c <HAL_UART_MspInit+0xb8>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	f003 0308 	and.w	r3, r3, #8
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b12:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b26:	2303      	movs	r3, #3
 8000b28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b2c:	2307      	movs	r3, #7
 8000b2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b32:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b36:	4619      	mov	r1, r3
 8000b38:	4805      	ldr	r0, [pc, #20]	@ (8000b50 <HAL_UART_MspInit+0xbc>)
 8000b3a:	f000 fa55 	bl	8000fe8 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000b3e:	bf00      	nop
 8000b40:	37b8      	adds	r7, #184	@ 0xb8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40004800 	.word	0x40004800
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40020c00 	.word	0x40020c00

08000b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <NMI_Handler+0x4>

08000b5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <HardFault_Handler+0x4>

08000b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <MemManage_Handler+0x4>

08000b6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <BusFault_Handler+0x4>

08000b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <UsageFault_Handler+0x4>

08000b7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000baa:	f000 f87b 	bl	8000ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
	...

08000bb4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bb8:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <SystemInit+0x20>)
 8000bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bbe:	4a05      	ldr	r2, [pc, #20]	@ (8000bd4 <SystemInit+0x20>)
 8000bc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bd8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c10 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bdc:	f7ff ffea 	bl	8000bb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000be0:	480c      	ldr	r0, [pc, #48]	@ (8000c14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000be2:	490d      	ldr	r1, [pc, #52]	@ (8000c18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000be4:	4a0d      	ldr	r2, [pc, #52]	@ (8000c1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be8:	e002      	b.n	8000bf0 <LoopCopyDataInit>

08000bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bee:	3304      	adds	r3, #4

08000bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf4:	d3f9      	bcc.n	8000bea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bf8:	4c0a      	ldr	r4, [pc, #40]	@ (8000c24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bfc:	e001      	b.n	8000c02 <LoopFillZerobss>

08000bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c00:	3204      	adds	r2, #4

08000c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c04:	d3fb      	bcc.n	8000bfe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c06:	f002 fa99 	bl	800313c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c0a:	f7ff fcdd 	bl	80005c8 <main>
  bx  lr    
 8000c0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c10:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000c14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c18:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c1c:	08003294 	.word	0x08003294
  ldr r2, =_sbss
 8000c20:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c24:	200000b8 	.word	0x200000b8

08000c28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c28:	e7fe      	b.n	8000c28 <ADC_IRQHandler>

08000c2a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c2e:	2003      	movs	r0, #3
 8000c30:	f000 f92e 	bl	8000e90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c34:	200f      	movs	r0, #15
 8000c36:	f000 f805 	bl	8000c44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c3a:	f7ff ff07 	bl	8000a4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c3e:	2300      	movs	r3, #0
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c4c:	4b12      	ldr	r3, [pc, #72]	@ (8000c98 <HAL_InitTick+0x54>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	4b12      	ldr	r3, [pc, #72]	@ (8000c9c <HAL_InitTick+0x58>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	4619      	mov	r1, r3
 8000c56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 f93b 	bl	8000ede <HAL_SYSTICK_Config>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e00e      	b.n	8000c90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2b0f      	cmp	r3, #15
 8000c76:	d80a      	bhi.n	8000c8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	6879      	ldr	r1, [r7, #4]
 8000c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c80:	f000 f911 	bl	8000ea6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c84:	4a06      	ldr	r2, [pc, #24]	@ (8000ca0 <HAL_InitTick+0x5c>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	e000      	b.n	8000c90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20000000 	.word	0x20000000
 8000c9c:	20000008 	.word	0x20000008
 8000ca0:	20000004 	.word	0x20000004

08000ca4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca8:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <HAL_IncTick+0x20>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b06      	ldr	r3, [pc, #24]	@ (8000cc8 <HAL_IncTick+0x24>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	4a04      	ldr	r2, [pc, #16]	@ (8000cc8 <HAL_IncTick+0x24>)
 8000cb6:	6013      	str	r3, [r2, #0]
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	20000008 	.word	0x20000008
 8000cc8:	200000b4 	.word	0x200000b4

08000ccc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd0:	4b03      	ldr	r3, [pc, #12]	@ (8000ce0 <HAL_GetTick+0x14>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	200000b4 	.word	0x200000b4

08000ce4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cec:	f7ff ffee 	bl	8000ccc <HAL_GetTick>
 8000cf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cfc:	d005      	beq.n	8000d0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8000d28 <HAL_Delay+0x44>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	461a      	mov	r2, r3
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	4413      	add	r3, r2
 8000d08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d0a:	bf00      	nop
 8000d0c:	f7ff ffde 	bl	8000ccc <HAL_GetTick>
 8000d10:	4602      	mov	r2, r0
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d8f7      	bhi.n	8000d0c <HAL_Delay+0x28>
  {
  }
}
 8000d1c:	bf00      	nop
 8000d1e:	bf00      	nop
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000008 	.word	0x20000008

08000d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d6c <__NVIC_SetPriorityGrouping+0x40>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d42:	68ba      	ldr	r2, [r7, #8]
 8000d44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d48:	4013      	ands	r3, r2
 8000d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d54:	4b06      	ldr	r3, [pc, #24]	@ (8000d70 <__NVIC_SetPriorityGrouping+0x44>)
 8000d56:	4313      	orrs	r3, r2
 8000d58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d5a:	4a04      	ldr	r2, [pc, #16]	@ (8000d6c <__NVIC_SetPriorityGrouping+0x40>)
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	60d3      	str	r3, [r2, #12]
}
 8000d60:	bf00      	nop
 8000d62:	3714      	adds	r7, #20
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000ed00 	.word	0xe000ed00
 8000d70:	05fa0000 	.word	0x05fa0000

08000d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d78:	4b04      	ldr	r3, [pc, #16]	@ (8000d8c <__NVIC_GetPriorityGrouping+0x18>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	0a1b      	lsrs	r3, r3, #8
 8000d7e:	f003 0307 	and.w	r3, r3, #7
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	6039      	str	r1, [r7, #0]
 8000d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	db0a      	blt.n	8000dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	490c      	ldr	r1, [pc, #48]	@ (8000ddc <__NVIC_SetPriority+0x4c>)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	0112      	lsls	r2, r2, #4
 8000db0:	b2d2      	uxtb	r2, r2
 8000db2:	440b      	add	r3, r1
 8000db4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db8:	e00a      	b.n	8000dd0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	4908      	ldr	r1, [pc, #32]	@ (8000de0 <__NVIC_SetPriority+0x50>)
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
 8000dc2:	f003 030f 	and.w	r3, r3, #15
 8000dc6:	3b04      	subs	r3, #4
 8000dc8:	0112      	lsls	r2, r2, #4
 8000dca:	b2d2      	uxtb	r2, r2
 8000dcc:	440b      	add	r3, r1
 8000dce:	761a      	strb	r2, [r3, #24]
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000e100 	.word	0xe000e100
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b089      	sub	sp, #36	@ 0x24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	f1c3 0307 	rsb	r3, r3, #7
 8000dfe:	2b04      	cmp	r3, #4
 8000e00:	bf28      	it	cs
 8000e02:	2304      	movcs	r3, #4
 8000e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3304      	adds	r3, #4
 8000e0a:	2b06      	cmp	r3, #6
 8000e0c:	d902      	bls.n	8000e14 <NVIC_EncodePriority+0x30>
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3b03      	subs	r3, #3
 8000e12:	e000      	b.n	8000e16 <NVIC_EncodePriority+0x32>
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e18:	f04f 32ff 	mov.w	r2, #4294967295
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43da      	mvns	r2, r3
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	401a      	ands	r2, r3
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	fa01 f303 	lsl.w	r3, r1, r3
 8000e36:	43d9      	mvns	r1, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e3c:	4313      	orrs	r3, r2
         );
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3724      	adds	r7, #36	@ 0x24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
	...

08000e4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3b01      	subs	r3, #1
 8000e58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e5c:	d301      	bcc.n	8000e62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e00f      	b.n	8000e82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e62:	4a0a      	ldr	r2, [pc, #40]	@ (8000e8c <SysTick_Config+0x40>)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3b01      	subs	r3, #1
 8000e68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e6a:	210f      	movs	r1, #15
 8000e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e70:	f7ff ff8e 	bl	8000d90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e74:	4b05      	ldr	r3, [pc, #20]	@ (8000e8c <SysTick_Config+0x40>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e7a:	4b04      	ldr	r3, [pc, #16]	@ (8000e8c <SysTick_Config+0x40>)
 8000e7c:	2207      	movs	r2, #7
 8000e7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	e000e010 	.word	0xe000e010

08000e90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f7ff ff47 	bl	8000d2c <__NVIC_SetPriorityGrouping>
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b086      	sub	sp, #24
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	4603      	mov	r3, r0
 8000eae:	60b9      	str	r1, [r7, #8]
 8000eb0:	607a      	str	r2, [r7, #4]
 8000eb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb8:	f7ff ff5c 	bl	8000d74 <__NVIC_GetPriorityGrouping>
 8000ebc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	68b9      	ldr	r1, [r7, #8]
 8000ec2:	6978      	ldr	r0, [r7, #20]
 8000ec4:	f7ff ff8e 	bl	8000de4 <NVIC_EncodePriority>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ece:	4611      	mov	r1, r2
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff ff5d 	bl	8000d90 <__NVIC_SetPriority>
}
 8000ed6:	bf00      	nop
 8000ed8:	3718      	adds	r7, #24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff ffb0 	bl	8000e4c <SysTick_Config>
 8000eec:	4603      	mov	r3, r0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000efc:	f3bf 8f5f 	dmb	sy
}
 8000f00:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000f02:	4b07      	ldr	r3, [pc, #28]	@ (8000f20 <HAL_MPU_Disable+0x28>)
 8000f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f06:	4a06      	ldr	r2, [pc, #24]	@ (8000f20 <HAL_MPU_Disable+0x28>)
 8000f08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f0c:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000f0e:	4b05      	ldr	r3, [pc, #20]	@ (8000f24 <HAL_MPU_Disable+0x2c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	605a      	str	r2, [r3, #4]
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000ed00 	.word	0xe000ed00
 8000f24:	e000ed90 	.word	0xe000ed90

08000f28 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000f30:	4a0b      	ldr	r2, [pc, #44]	@ (8000f60 <HAL_MPU_Enable+0x38>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f64 <HAL_MPU_Enable+0x3c>)
 8000f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f3e:	4a09      	ldr	r2, [pc, #36]	@ (8000f64 <HAL_MPU_Enable+0x3c>)
 8000f40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f44:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000f46:	f3bf 8f4f 	dsb	sy
}
 8000f4a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f4c:	f3bf 8f6f 	isb	sy
}
 8000f50:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000ed90 	.word	0xe000ed90
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	785a      	ldrb	r2, [r3, #1]
 8000f74:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe4 <HAL_MPU_ConfigRegion+0x7c>)
 8000f76:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000f78:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe4 <HAL_MPU_ConfigRegion+0x7c>)
 8000f7a:	691b      	ldr	r3, [r3, #16]
 8000f7c:	4a19      	ldr	r2, [pc, #100]	@ (8000fe4 <HAL_MPU_ConfigRegion+0x7c>)
 8000f7e:	f023 0301 	bic.w	r3, r3, #1
 8000f82:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000f84:	4a17      	ldr	r2, [pc, #92]	@ (8000fe4 <HAL_MPU_ConfigRegion+0x7c>)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	7b1b      	ldrb	r3, [r3, #12]
 8000f90:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	7adb      	ldrb	r3, [r3, #11]
 8000f96:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f98:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	7a9b      	ldrb	r3, [r3, #10]
 8000f9e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000fa0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	7b5b      	ldrb	r3, [r3, #13]
 8000fa6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000fa8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	7b9b      	ldrb	r3, [r3, #14]
 8000fae:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000fb0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	7bdb      	ldrb	r3, [r3, #15]
 8000fb6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000fb8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	7a5b      	ldrb	r3, [r3, #9]
 8000fbe:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000fc0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	7a1b      	ldrb	r3, [r3, #8]
 8000fc6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000fc8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	7812      	ldrb	r2, [r2, #0]
 8000fce:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000fd0:	4a04      	ldr	r2, [pc, #16]	@ (8000fe4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000fd2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000fd4:	6113      	str	r3, [r2, #16]
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000ed90 	.word	0xe000ed90

08000fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b089      	sub	sp, #36	@ 0x24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001002:	2300      	movs	r3, #0
 8001004:	61fb      	str	r3, [r7, #28]
 8001006:	e175      	b.n	80012f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001008:	2201      	movs	r2, #1
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	697a      	ldr	r2, [r7, #20]
 8001018:	4013      	ands	r3, r2
 800101a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	429a      	cmp	r2, r3
 8001022:	f040 8164 	bne.w	80012ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f003 0303 	and.w	r3, r3, #3
 800102e:	2b01      	cmp	r3, #1
 8001030:	d005      	beq.n	800103e <HAL_GPIO_Init+0x56>
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f003 0303 	and.w	r3, r3, #3
 800103a:	2b02      	cmp	r3, #2
 800103c:	d130      	bne.n	80010a0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	2203      	movs	r2, #3
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43db      	mvns	r3, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4013      	ands	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	68da      	ldr	r2, [r3, #12]
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4313      	orrs	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001074:	2201      	movs	r2, #1
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	091b      	lsrs	r3, r3, #4
 800108a:	f003 0201 	and.w	r2, r3, #1
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 0303 	and.w	r3, r3, #3
 80010a8:	2b03      	cmp	r3, #3
 80010aa:	d017      	beq.n	80010dc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	2203      	movs	r2, #3
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4013      	ands	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	689a      	ldr	r2, [r3, #8]
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 0303 	and.w	r3, r3, #3
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d123      	bne.n	8001130 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	08da      	lsrs	r2, r3, #3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3208      	adds	r2, #8
 80010f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	f003 0307 	and.w	r3, r3, #7
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	220f      	movs	r2, #15
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	691a      	ldr	r2, [r3, #16]
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4313      	orrs	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	08da      	lsrs	r2, r3, #3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3208      	adds	r2, #8
 800112a:	69b9      	ldr	r1, [r7, #24]
 800112c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	2203      	movs	r2, #3
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 0203 	and.w	r2, r3, #3
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800116c:	2b00      	cmp	r3, #0
 800116e:	f000 80be 	beq.w	80012ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001172:	4b66      	ldr	r3, [pc, #408]	@ (800130c <HAL_GPIO_Init+0x324>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001176:	4a65      	ldr	r2, [pc, #404]	@ (800130c <HAL_GPIO_Init+0x324>)
 8001178:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800117c:	6453      	str	r3, [r2, #68]	@ 0x44
 800117e:	4b63      	ldr	r3, [pc, #396]	@ (800130c <HAL_GPIO_Init+0x324>)
 8001180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001182:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800118a:	4a61      	ldr	r2, [pc, #388]	@ (8001310 <HAL_GPIO_Init+0x328>)
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	089b      	lsrs	r3, r3, #2
 8001190:	3302      	adds	r3, #2
 8001192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001196:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	f003 0303 	and.w	r3, r3, #3
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	220f      	movs	r2, #15
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43db      	mvns	r3, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4013      	ands	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a58      	ldr	r2, [pc, #352]	@ (8001314 <HAL_GPIO_Init+0x32c>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d037      	beq.n	8001226 <HAL_GPIO_Init+0x23e>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a57      	ldr	r2, [pc, #348]	@ (8001318 <HAL_GPIO_Init+0x330>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d031      	beq.n	8001222 <HAL_GPIO_Init+0x23a>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a56      	ldr	r2, [pc, #344]	@ (800131c <HAL_GPIO_Init+0x334>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d02b      	beq.n	800121e <HAL_GPIO_Init+0x236>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a55      	ldr	r2, [pc, #340]	@ (8001320 <HAL_GPIO_Init+0x338>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d025      	beq.n	800121a <HAL_GPIO_Init+0x232>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a54      	ldr	r2, [pc, #336]	@ (8001324 <HAL_GPIO_Init+0x33c>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d01f      	beq.n	8001216 <HAL_GPIO_Init+0x22e>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a53      	ldr	r2, [pc, #332]	@ (8001328 <HAL_GPIO_Init+0x340>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d019      	beq.n	8001212 <HAL_GPIO_Init+0x22a>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a52      	ldr	r2, [pc, #328]	@ (800132c <HAL_GPIO_Init+0x344>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d013      	beq.n	800120e <HAL_GPIO_Init+0x226>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a51      	ldr	r2, [pc, #324]	@ (8001330 <HAL_GPIO_Init+0x348>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d00d      	beq.n	800120a <HAL_GPIO_Init+0x222>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a50      	ldr	r2, [pc, #320]	@ (8001334 <HAL_GPIO_Init+0x34c>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d007      	beq.n	8001206 <HAL_GPIO_Init+0x21e>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a4f      	ldr	r2, [pc, #316]	@ (8001338 <HAL_GPIO_Init+0x350>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d101      	bne.n	8001202 <HAL_GPIO_Init+0x21a>
 80011fe:	2309      	movs	r3, #9
 8001200:	e012      	b.n	8001228 <HAL_GPIO_Init+0x240>
 8001202:	230a      	movs	r3, #10
 8001204:	e010      	b.n	8001228 <HAL_GPIO_Init+0x240>
 8001206:	2308      	movs	r3, #8
 8001208:	e00e      	b.n	8001228 <HAL_GPIO_Init+0x240>
 800120a:	2307      	movs	r3, #7
 800120c:	e00c      	b.n	8001228 <HAL_GPIO_Init+0x240>
 800120e:	2306      	movs	r3, #6
 8001210:	e00a      	b.n	8001228 <HAL_GPIO_Init+0x240>
 8001212:	2305      	movs	r3, #5
 8001214:	e008      	b.n	8001228 <HAL_GPIO_Init+0x240>
 8001216:	2304      	movs	r3, #4
 8001218:	e006      	b.n	8001228 <HAL_GPIO_Init+0x240>
 800121a:	2303      	movs	r3, #3
 800121c:	e004      	b.n	8001228 <HAL_GPIO_Init+0x240>
 800121e:	2302      	movs	r3, #2
 8001220:	e002      	b.n	8001228 <HAL_GPIO_Init+0x240>
 8001222:	2301      	movs	r3, #1
 8001224:	e000      	b.n	8001228 <HAL_GPIO_Init+0x240>
 8001226:	2300      	movs	r3, #0
 8001228:	69fa      	ldr	r2, [r7, #28]
 800122a:	f002 0203 	and.w	r2, r2, #3
 800122e:	0092      	lsls	r2, r2, #2
 8001230:	4093      	lsls	r3, r2
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4313      	orrs	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001238:	4935      	ldr	r1, [pc, #212]	@ (8001310 <HAL_GPIO_Init+0x328>)
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	089b      	lsrs	r3, r3, #2
 800123e:	3302      	adds	r3, #2
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001246:	4b3d      	ldr	r3, [pc, #244]	@ (800133c <HAL_GPIO_Init+0x354>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	43db      	mvns	r3, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4013      	ands	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d003      	beq.n	800126a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800126a:	4a34      	ldr	r2, [pc, #208]	@ (800133c <HAL_GPIO_Init+0x354>)
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001270:	4b32      	ldr	r3, [pc, #200]	@ (800133c <HAL_GPIO_Init+0x354>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d003      	beq.n	8001294 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	4313      	orrs	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001294:	4a29      	ldr	r2, [pc, #164]	@ (800133c <HAL_GPIO_Init+0x354>)
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800129a:	4b28      	ldr	r3, [pc, #160]	@ (800133c <HAL_GPIO_Init+0x354>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	43db      	mvns	r3, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4013      	ands	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d003      	beq.n	80012be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012be:	4a1f      	ldr	r2, [pc, #124]	@ (800133c <HAL_GPIO_Init+0x354>)
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012c4:	4b1d      	ldr	r3, [pc, #116]	@ (800133c <HAL_GPIO_Init+0x354>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	43db      	mvns	r3, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d003      	beq.n	80012e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012e8:	4a14      	ldr	r2, [pc, #80]	@ (800133c <HAL_GPIO_Init+0x354>)
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	3301      	adds	r3, #1
 80012f2:	61fb      	str	r3, [r7, #28]
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	2b0f      	cmp	r3, #15
 80012f8:	f67f ae86 	bls.w	8001008 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80012fc:	bf00      	nop
 80012fe:	bf00      	nop
 8001300:	3724      	adds	r7, #36	@ 0x24
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	40023800 	.word	0x40023800
 8001310:	40013800 	.word	0x40013800
 8001314:	40020000 	.word	0x40020000
 8001318:	40020400 	.word	0x40020400
 800131c:	40020800 	.word	0x40020800
 8001320:	40020c00 	.word	0x40020c00
 8001324:	40021000 	.word	0x40021000
 8001328:	40021400 	.word	0x40021400
 800132c:	40021800 	.word	0x40021800
 8001330:	40021c00 	.word	0x40021c00
 8001334:	40022000 	.word	0x40022000
 8001338:	40022400 	.word	0x40022400
 800133c:	40013c00 	.word	0x40013c00

08001340 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	460b      	mov	r3, r1
 800134a:	807b      	strh	r3, [r7, #2]
 800134c:	4613      	mov	r3, r2
 800134e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001350:	787b      	ldrb	r3, [r7, #1]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d003      	beq.n	800135e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001356:	887a      	ldrh	r2, [r7, #2]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800135c:	e003      	b.n	8001366 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800135e:	887b      	ldrh	r3, [r7, #2]
 8001360:	041a      	lsls	r2, r3, #16
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	619a      	str	r2, [r3, #24]
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
	...

08001374 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800137c:	2300      	movs	r3, #0
 800137e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d101      	bne.n	800138a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e29b      	b.n	80018c2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	2b00      	cmp	r3, #0
 8001394:	f000 8087 	beq.w	80014a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001398:	4b96      	ldr	r3, [pc, #600]	@ (80015f4 <HAL_RCC_OscConfig+0x280>)
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f003 030c 	and.w	r3, r3, #12
 80013a0:	2b04      	cmp	r3, #4
 80013a2:	d00c      	beq.n	80013be <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013a4:	4b93      	ldr	r3, [pc, #588]	@ (80015f4 <HAL_RCC_OscConfig+0x280>)
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f003 030c 	and.w	r3, r3, #12
 80013ac:	2b08      	cmp	r3, #8
 80013ae:	d112      	bne.n	80013d6 <HAL_RCC_OscConfig+0x62>
 80013b0:	4b90      	ldr	r3, [pc, #576]	@ (80015f4 <HAL_RCC_OscConfig+0x280>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80013bc:	d10b      	bne.n	80013d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013be:	4b8d      	ldr	r3, [pc, #564]	@ (80015f4 <HAL_RCC_OscConfig+0x280>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d06c      	beq.n	80014a4 <HAL_RCC_OscConfig+0x130>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d168      	bne.n	80014a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e275      	b.n	80018c2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013de:	d106      	bne.n	80013ee <HAL_RCC_OscConfig+0x7a>
 80013e0:	4b84      	ldr	r3, [pc, #528]	@ (80015f4 <HAL_RCC_OscConfig+0x280>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a83      	ldr	r2, [pc, #524]	@ (80015f4 <HAL_RCC_OscConfig+0x280>)
 80013e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013ea:	6013      	str	r3, [r2, #0]
 80013ec:	e02e      	b.n	800144c <HAL_RCC_OscConfig+0xd8>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d10c      	bne.n	8001410 <HAL_RCC_OscConfig+0x9c>
 80013f6:	4b7f      	ldr	r3, [pc, #508]	@ (80015f4 <HAL_RCC_OscConfig+0x280>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a7e      	ldr	r2, [pc, #504]	@ (80015f4 <HAL_RCC_OscConfig+0x280>)
 80013fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001400:	6013      	str	r3, [r2, #0]
 8001402:	4b7c      	ldr	r3, [pc, #496]	@ (80015f4 <HAL_RCC_OscConfig+0x280>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a7b      	ldr	r2, [pc, #492]	@ (80015f4 <HAL_RCC_OscConfig+0x280>)
 8001408:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800140c:	6013      	str	r3, [r2, #0]
 800140e:	e01d      	b.n	800144c <HAL_RCC_OscConfig+0xd8>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001418:	d10c      	bne.n	8001434 <HAL_RCC_OscConfig+0xc0>
 800141a:	4b76      	ldr	r3, [pc, #472]	@ (80015f4 <HAL_RCC_OscConfig+0x280>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a75      	ldr	r2, [pc, #468]	@ (80015f4 <HAL_RCC_OscConfig+0x280>)
 8001420:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001424:	6013      	str	r3, [r2, #0]
 8001426:	4b73      	ldr	r3, [pc, #460]	@ (80015f4 <HAL_RCC_OscConfig+0x280>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a72      	ldr	r2, [pc, #456]	@ (80015f4 <HAL_RCC_OscConfig+0x280>)
 800142c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	e00b      	b.n	800144c <HAL_RCC_OscConfig+0xd8>
 8001434:	4b6f      	ldr	r3, [pc, #444]	@ (80015f4 <HAL_RCC_OscConfig+0x280>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a6e      	ldr	r2, [pc, #440]	@ (80015f4 <HAL_RCC_OscConfig+0x280>)
 800143a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800143e:	6013      	str	r3, [r2, #0]
 8001440:	4b6c      	ldr	r3, [pc, #432]	@ (80015f4 <HAL_RCC_OscConfig+0x280>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a6b      	ldr	r2, [pc, #428]	@ (80015f4 <HAL_RCC_OscConfig+0x280>)
 8001446:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800144a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d013      	beq.n	800147c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001454:	f7ff fc3a 	bl	8000ccc <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800145c:	f7ff fc36 	bl	8000ccc <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b64      	cmp	r3, #100	@ 0x64
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e229      	b.n	80018c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146e:	4b61      	ldr	r3, [pc, #388]	@ (80015f4 <HAL_RCC_OscConfig+0x280>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d0f0      	beq.n	800145c <HAL_RCC_OscConfig+0xe8>
 800147a:	e014      	b.n	80014a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800147c:	f7ff fc26 	bl	8000ccc <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001484:	f7ff fc22 	bl	8000ccc <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b64      	cmp	r3, #100	@ 0x64
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e215      	b.n	80018c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001496:	4b57      	ldr	r3, [pc, #348]	@ (80015f4 <HAL_RCC_OscConfig+0x280>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f0      	bne.n	8001484 <HAL_RCC_OscConfig+0x110>
 80014a2:	e000      	b.n	80014a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d069      	beq.n	8001586 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014b2:	4b50      	ldr	r3, [pc, #320]	@ (80015f4 <HAL_RCC_OscConfig+0x280>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f003 030c 	and.w	r3, r3, #12
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d00b      	beq.n	80014d6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014be:	4b4d      	ldr	r3, [pc, #308]	@ (80015f4 <HAL_RCC_OscConfig+0x280>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 030c 	and.w	r3, r3, #12
 80014c6:	2b08      	cmp	r3, #8
 80014c8:	d11c      	bne.n	8001504 <HAL_RCC_OscConfig+0x190>
 80014ca:	4b4a      	ldr	r3, [pc, #296]	@ (80015f4 <HAL_RCC_OscConfig+0x280>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d116      	bne.n	8001504 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014d6:	4b47      	ldr	r3, [pc, #284]	@ (80015f4 <HAL_RCC_OscConfig+0x280>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d005      	beq.n	80014ee <HAL_RCC_OscConfig+0x17a>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d001      	beq.n	80014ee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e1e9      	b.n	80018c2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ee:	4b41      	ldr	r3, [pc, #260]	@ (80015f4 <HAL_RCC_OscConfig+0x280>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	493d      	ldr	r1, [pc, #244]	@ (80015f4 <HAL_RCC_OscConfig+0x280>)
 80014fe:	4313      	orrs	r3, r2
 8001500:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001502:	e040      	b.n	8001586 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d023      	beq.n	8001554 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800150c:	4b39      	ldr	r3, [pc, #228]	@ (80015f4 <HAL_RCC_OscConfig+0x280>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a38      	ldr	r2, [pc, #224]	@ (80015f4 <HAL_RCC_OscConfig+0x280>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001518:	f7ff fbd8 	bl	8000ccc <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001520:	f7ff fbd4 	bl	8000ccc <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e1c7      	b.n	80018c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001532:	4b30      	ldr	r3, [pc, #192]	@ (80015f4 <HAL_RCC_OscConfig+0x280>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0f0      	beq.n	8001520 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800153e:	4b2d      	ldr	r3, [pc, #180]	@ (80015f4 <HAL_RCC_OscConfig+0x280>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	4929      	ldr	r1, [pc, #164]	@ (80015f4 <HAL_RCC_OscConfig+0x280>)
 800154e:	4313      	orrs	r3, r2
 8001550:	600b      	str	r3, [r1, #0]
 8001552:	e018      	b.n	8001586 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001554:	4b27      	ldr	r3, [pc, #156]	@ (80015f4 <HAL_RCC_OscConfig+0x280>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a26      	ldr	r2, [pc, #152]	@ (80015f4 <HAL_RCC_OscConfig+0x280>)
 800155a:	f023 0301 	bic.w	r3, r3, #1
 800155e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001560:	f7ff fbb4 	bl	8000ccc <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001568:	f7ff fbb0 	bl	8000ccc <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e1a3      	b.n	80018c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800157a:	4b1e      	ldr	r3, [pc, #120]	@ (80015f4 <HAL_RCC_OscConfig+0x280>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1f0      	bne.n	8001568 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0308 	and.w	r3, r3, #8
 800158e:	2b00      	cmp	r3, #0
 8001590:	d038      	beq.n	8001604 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d019      	beq.n	80015ce <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800159a:	4b16      	ldr	r3, [pc, #88]	@ (80015f4 <HAL_RCC_OscConfig+0x280>)
 800159c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800159e:	4a15      	ldr	r2, [pc, #84]	@ (80015f4 <HAL_RCC_OscConfig+0x280>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a6:	f7ff fb91 	bl	8000ccc <HAL_GetTick>
 80015aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ae:	f7ff fb8d 	bl	8000ccc <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e180      	b.n	80018c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015c0:	4b0c      	ldr	r3, [pc, #48]	@ (80015f4 <HAL_RCC_OscConfig+0x280>)
 80015c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d0f0      	beq.n	80015ae <HAL_RCC_OscConfig+0x23a>
 80015cc:	e01a      	b.n	8001604 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015ce:	4b09      	ldr	r3, [pc, #36]	@ (80015f4 <HAL_RCC_OscConfig+0x280>)
 80015d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015d2:	4a08      	ldr	r2, [pc, #32]	@ (80015f4 <HAL_RCC_OscConfig+0x280>)
 80015d4:	f023 0301 	bic.w	r3, r3, #1
 80015d8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015da:	f7ff fb77 	bl	8000ccc <HAL_GetTick>
 80015de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015e0:	e00a      	b.n	80015f8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015e2:	f7ff fb73 	bl	8000ccc <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d903      	bls.n	80015f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e166      	b.n	80018c2 <HAL_RCC_OscConfig+0x54e>
 80015f4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015f8:	4b92      	ldr	r3, [pc, #584]	@ (8001844 <HAL_RCC_OscConfig+0x4d0>)
 80015fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	2b00      	cmp	r3, #0
 8001602:	d1ee      	bne.n	80015e2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0304 	and.w	r3, r3, #4
 800160c:	2b00      	cmp	r3, #0
 800160e:	f000 80a4 	beq.w	800175a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001612:	4b8c      	ldr	r3, [pc, #560]	@ (8001844 <HAL_RCC_OscConfig+0x4d0>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d10d      	bne.n	800163a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800161e:	4b89      	ldr	r3, [pc, #548]	@ (8001844 <HAL_RCC_OscConfig+0x4d0>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001622:	4a88      	ldr	r2, [pc, #544]	@ (8001844 <HAL_RCC_OscConfig+0x4d0>)
 8001624:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001628:	6413      	str	r3, [r2, #64]	@ 0x40
 800162a:	4b86      	ldr	r3, [pc, #536]	@ (8001844 <HAL_RCC_OscConfig+0x4d0>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001632:	60bb      	str	r3, [r7, #8]
 8001634:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001636:	2301      	movs	r3, #1
 8001638:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800163a:	4b83      	ldr	r3, [pc, #524]	@ (8001848 <HAL_RCC_OscConfig+0x4d4>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001642:	2b00      	cmp	r3, #0
 8001644:	d118      	bne.n	8001678 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001646:	4b80      	ldr	r3, [pc, #512]	@ (8001848 <HAL_RCC_OscConfig+0x4d4>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a7f      	ldr	r2, [pc, #508]	@ (8001848 <HAL_RCC_OscConfig+0x4d4>)
 800164c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001650:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001652:	f7ff fb3b 	bl	8000ccc <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800165a:	f7ff fb37 	bl	8000ccc <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b64      	cmp	r3, #100	@ 0x64
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e12a      	b.n	80018c2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800166c:	4b76      	ldr	r3, [pc, #472]	@ (8001848 <HAL_RCC_OscConfig+0x4d4>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001674:	2b00      	cmp	r3, #0
 8001676:	d0f0      	beq.n	800165a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d106      	bne.n	800168e <HAL_RCC_OscConfig+0x31a>
 8001680:	4b70      	ldr	r3, [pc, #448]	@ (8001844 <HAL_RCC_OscConfig+0x4d0>)
 8001682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001684:	4a6f      	ldr	r2, [pc, #444]	@ (8001844 <HAL_RCC_OscConfig+0x4d0>)
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	6713      	str	r3, [r2, #112]	@ 0x70
 800168c:	e02d      	b.n	80016ea <HAL_RCC_OscConfig+0x376>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d10c      	bne.n	80016b0 <HAL_RCC_OscConfig+0x33c>
 8001696:	4b6b      	ldr	r3, [pc, #428]	@ (8001844 <HAL_RCC_OscConfig+0x4d0>)
 8001698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800169a:	4a6a      	ldr	r2, [pc, #424]	@ (8001844 <HAL_RCC_OscConfig+0x4d0>)
 800169c:	f023 0301 	bic.w	r3, r3, #1
 80016a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80016a2:	4b68      	ldr	r3, [pc, #416]	@ (8001844 <HAL_RCC_OscConfig+0x4d0>)
 80016a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016a6:	4a67      	ldr	r2, [pc, #412]	@ (8001844 <HAL_RCC_OscConfig+0x4d0>)
 80016a8:	f023 0304 	bic.w	r3, r3, #4
 80016ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80016ae:	e01c      	b.n	80016ea <HAL_RCC_OscConfig+0x376>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	2b05      	cmp	r3, #5
 80016b6:	d10c      	bne.n	80016d2 <HAL_RCC_OscConfig+0x35e>
 80016b8:	4b62      	ldr	r3, [pc, #392]	@ (8001844 <HAL_RCC_OscConfig+0x4d0>)
 80016ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016bc:	4a61      	ldr	r2, [pc, #388]	@ (8001844 <HAL_RCC_OscConfig+0x4d0>)
 80016be:	f043 0304 	orr.w	r3, r3, #4
 80016c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80016c4:	4b5f      	ldr	r3, [pc, #380]	@ (8001844 <HAL_RCC_OscConfig+0x4d0>)
 80016c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016c8:	4a5e      	ldr	r2, [pc, #376]	@ (8001844 <HAL_RCC_OscConfig+0x4d0>)
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80016d0:	e00b      	b.n	80016ea <HAL_RCC_OscConfig+0x376>
 80016d2:	4b5c      	ldr	r3, [pc, #368]	@ (8001844 <HAL_RCC_OscConfig+0x4d0>)
 80016d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016d6:	4a5b      	ldr	r2, [pc, #364]	@ (8001844 <HAL_RCC_OscConfig+0x4d0>)
 80016d8:	f023 0301 	bic.w	r3, r3, #1
 80016dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80016de:	4b59      	ldr	r3, [pc, #356]	@ (8001844 <HAL_RCC_OscConfig+0x4d0>)
 80016e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016e2:	4a58      	ldr	r2, [pc, #352]	@ (8001844 <HAL_RCC_OscConfig+0x4d0>)
 80016e4:	f023 0304 	bic.w	r3, r3, #4
 80016e8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d015      	beq.n	800171e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f2:	f7ff faeb 	bl	8000ccc <HAL_GetTick>
 80016f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f8:	e00a      	b.n	8001710 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016fa:	f7ff fae7 	bl	8000ccc <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001708:	4293      	cmp	r3, r2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e0d8      	b.n	80018c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001710:	4b4c      	ldr	r3, [pc, #304]	@ (8001844 <HAL_RCC_OscConfig+0x4d0>)
 8001712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	2b00      	cmp	r3, #0
 800171a:	d0ee      	beq.n	80016fa <HAL_RCC_OscConfig+0x386>
 800171c:	e014      	b.n	8001748 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800171e:	f7ff fad5 	bl	8000ccc <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001724:	e00a      	b.n	800173c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001726:	f7ff fad1 	bl	8000ccc <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001734:	4293      	cmp	r3, r2
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e0c2      	b.n	80018c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800173c:	4b41      	ldr	r3, [pc, #260]	@ (8001844 <HAL_RCC_OscConfig+0x4d0>)
 800173e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d1ee      	bne.n	8001726 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001748:	7dfb      	ldrb	r3, [r7, #23]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d105      	bne.n	800175a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800174e:	4b3d      	ldr	r3, [pc, #244]	@ (8001844 <HAL_RCC_OscConfig+0x4d0>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001752:	4a3c      	ldr	r2, [pc, #240]	@ (8001844 <HAL_RCC_OscConfig+0x4d0>)
 8001754:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001758:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 80ae 	beq.w	80018c0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001764:	4b37      	ldr	r3, [pc, #220]	@ (8001844 <HAL_RCC_OscConfig+0x4d0>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f003 030c 	and.w	r3, r3, #12
 800176c:	2b08      	cmp	r3, #8
 800176e:	d06d      	beq.n	800184c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	2b02      	cmp	r3, #2
 8001776:	d14b      	bne.n	8001810 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001778:	4b32      	ldr	r3, [pc, #200]	@ (8001844 <HAL_RCC_OscConfig+0x4d0>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a31      	ldr	r2, [pc, #196]	@ (8001844 <HAL_RCC_OscConfig+0x4d0>)
 800177e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001782:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001784:	f7ff faa2 	bl	8000ccc <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800178c:	f7ff fa9e 	bl	8000ccc <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e091      	b.n	80018c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800179e:	4b29      	ldr	r3, [pc, #164]	@ (8001844 <HAL_RCC_OscConfig+0x4d0>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f0      	bne.n	800178c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	69da      	ldr	r2, [r3, #28]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a1b      	ldr	r3, [r3, #32]
 80017b2:	431a      	orrs	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b8:	019b      	lsls	r3, r3, #6
 80017ba:	431a      	orrs	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017c0:	085b      	lsrs	r3, r3, #1
 80017c2:	3b01      	subs	r3, #1
 80017c4:	041b      	lsls	r3, r3, #16
 80017c6:	431a      	orrs	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017cc:	061b      	lsls	r3, r3, #24
 80017ce:	431a      	orrs	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d4:	071b      	lsls	r3, r3, #28
 80017d6:	491b      	ldr	r1, [pc, #108]	@ (8001844 <HAL_RCC_OscConfig+0x4d0>)
 80017d8:	4313      	orrs	r3, r2
 80017da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017dc:	4b19      	ldr	r3, [pc, #100]	@ (8001844 <HAL_RCC_OscConfig+0x4d0>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a18      	ldr	r2, [pc, #96]	@ (8001844 <HAL_RCC_OscConfig+0x4d0>)
 80017e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e8:	f7ff fa70 	bl	8000ccc <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f0:	f7ff fa6c 	bl	8000ccc <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e05f      	b.n	80018c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001802:	4b10      	ldr	r3, [pc, #64]	@ (8001844 <HAL_RCC_OscConfig+0x4d0>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d0f0      	beq.n	80017f0 <HAL_RCC_OscConfig+0x47c>
 800180e:	e057      	b.n	80018c0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001810:	4b0c      	ldr	r3, [pc, #48]	@ (8001844 <HAL_RCC_OscConfig+0x4d0>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a0b      	ldr	r2, [pc, #44]	@ (8001844 <HAL_RCC_OscConfig+0x4d0>)
 8001816:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800181a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181c:	f7ff fa56 	bl	8000ccc <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001824:	f7ff fa52 	bl	8000ccc <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e045      	b.n	80018c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001836:	4b03      	ldr	r3, [pc, #12]	@ (8001844 <HAL_RCC_OscConfig+0x4d0>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1f0      	bne.n	8001824 <HAL_RCC_OscConfig+0x4b0>
 8001842:	e03d      	b.n	80018c0 <HAL_RCC_OscConfig+0x54c>
 8001844:	40023800 	.word	0x40023800
 8001848:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800184c:	4b1f      	ldr	r3, [pc, #124]	@ (80018cc <HAL_RCC_OscConfig+0x558>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d030      	beq.n	80018bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001864:	429a      	cmp	r2, r3
 8001866:	d129      	bne.n	80018bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001872:	429a      	cmp	r2, r3
 8001874:	d122      	bne.n	80018bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800187c:	4013      	ands	r3, r2
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001882:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001884:	4293      	cmp	r3, r2
 8001886:	d119      	bne.n	80018bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001892:	085b      	lsrs	r3, r3, #1
 8001894:	3b01      	subs	r3, #1
 8001896:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001898:	429a      	cmp	r2, r3
 800189a:	d10f      	bne.n	80018bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018a6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d107      	bne.n	80018bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d001      	beq.n	80018c0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e000      	b.n	80018c2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40023800 	.word	0x40023800

080018d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d101      	bne.n	80018e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e0d0      	b.n	8001a8a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018e8:	4b6a      	ldr	r3, [pc, #424]	@ (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 030f 	and.w	r3, r3, #15
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d910      	bls.n	8001918 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018f6:	4b67      	ldr	r3, [pc, #412]	@ (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f023 020f 	bic.w	r2, r3, #15
 80018fe:	4965      	ldr	r1, [pc, #404]	@ (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	4313      	orrs	r3, r2
 8001904:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001906:	4b63      	ldr	r3, [pc, #396]	@ (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	683a      	ldr	r2, [r7, #0]
 8001910:	429a      	cmp	r2, r3
 8001912:	d001      	beq.n	8001918 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e0b8      	b.n	8001a8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d020      	beq.n	8001966 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	2b00      	cmp	r3, #0
 800192e:	d005      	beq.n	800193c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001930:	4b59      	ldr	r3, [pc, #356]	@ (8001a98 <HAL_RCC_ClockConfig+0x1c8>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	4a58      	ldr	r2, [pc, #352]	@ (8001a98 <HAL_RCC_ClockConfig+0x1c8>)
 8001936:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800193a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0308 	and.w	r3, r3, #8
 8001944:	2b00      	cmp	r3, #0
 8001946:	d005      	beq.n	8001954 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001948:	4b53      	ldr	r3, [pc, #332]	@ (8001a98 <HAL_RCC_ClockConfig+0x1c8>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	4a52      	ldr	r2, [pc, #328]	@ (8001a98 <HAL_RCC_ClockConfig+0x1c8>)
 800194e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001952:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001954:	4b50      	ldr	r3, [pc, #320]	@ (8001a98 <HAL_RCC_ClockConfig+0x1c8>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	494d      	ldr	r1, [pc, #308]	@ (8001a98 <HAL_RCC_ClockConfig+0x1c8>)
 8001962:	4313      	orrs	r3, r2
 8001964:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	2b00      	cmp	r3, #0
 8001970:	d040      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d107      	bne.n	800198a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800197a:	4b47      	ldr	r3, [pc, #284]	@ (8001a98 <HAL_RCC_ClockConfig+0x1c8>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d115      	bne.n	80019b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e07f      	b.n	8001a8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b02      	cmp	r3, #2
 8001990:	d107      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001992:	4b41      	ldr	r3, [pc, #260]	@ (8001a98 <HAL_RCC_ClockConfig+0x1c8>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d109      	bne.n	80019b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e073      	b.n	8001a8a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001a98 <HAL_RCC_ClockConfig+0x1c8>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e06b      	b.n	8001a8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019b2:	4b39      	ldr	r3, [pc, #228]	@ (8001a98 <HAL_RCC_ClockConfig+0x1c8>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f023 0203 	bic.w	r2, r3, #3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	4936      	ldr	r1, [pc, #216]	@ (8001a98 <HAL_RCC_ClockConfig+0x1c8>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019c4:	f7ff f982 	bl	8000ccc <HAL_GetTick>
 80019c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ca:	e00a      	b.n	80019e2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019cc:	f7ff f97e 	bl	8000ccc <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019da:	4293      	cmp	r3, r2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e053      	b.n	8001a8a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001a98 <HAL_RCC_ClockConfig+0x1c8>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f003 020c 	and.w	r2, r3, #12
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d1eb      	bne.n	80019cc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019f4:	4b27      	ldr	r3, [pc, #156]	@ (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 030f 	and.w	r3, r3, #15
 80019fc:	683a      	ldr	r2, [r7, #0]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d210      	bcs.n	8001a24 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a02:	4b24      	ldr	r3, [pc, #144]	@ (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f023 020f 	bic.w	r2, r3, #15
 8001a0a:	4922      	ldr	r1, [pc, #136]	@ (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a12:	4b20      	ldr	r3, [pc, #128]	@ (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 030f 	and.w	r3, r3, #15
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d001      	beq.n	8001a24 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e032      	b.n	8001a8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0304 	and.w	r3, r3, #4
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d008      	beq.n	8001a42 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a30:	4b19      	ldr	r3, [pc, #100]	@ (8001a98 <HAL_RCC_ClockConfig+0x1c8>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	4916      	ldr	r1, [pc, #88]	@ (8001a98 <HAL_RCC_ClockConfig+0x1c8>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0308 	and.w	r3, r3, #8
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d009      	beq.n	8001a62 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a4e:	4b12      	ldr	r3, [pc, #72]	@ (8001a98 <HAL_RCC_ClockConfig+0x1c8>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	490e      	ldr	r1, [pc, #56]	@ (8001a98 <HAL_RCC_ClockConfig+0x1c8>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a62:	f000 f821 	bl	8001aa8 <HAL_RCC_GetSysClockFreq>
 8001a66:	4602      	mov	r2, r0
 8001a68:	4b0b      	ldr	r3, [pc, #44]	@ (8001a98 <HAL_RCC_ClockConfig+0x1c8>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	091b      	lsrs	r3, r3, #4
 8001a6e:	f003 030f 	and.w	r3, r3, #15
 8001a72:	490a      	ldr	r1, [pc, #40]	@ (8001a9c <HAL_RCC_ClockConfig+0x1cc>)
 8001a74:	5ccb      	ldrb	r3, [r1, r3]
 8001a76:	fa22 f303 	lsr.w	r3, r2, r3
 8001a7a:	4a09      	ldr	r2, [pc, #36]	@ (8001aa0 <HAL_RCC_ClockConfig+0x1d0>)
 8001a7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a7e:	4b09      	ldr	r3, [pc, #36]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1d4>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff f8de 	bl	8000c44 <HAL_InitTick>

  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40023c00 	.word	0x40023c00
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	0800326c 	.word	0x0800326c
 8001aa0:	20000000 	.word	0x20000000
 8001aa4:	20000004 	.word	0x20000004

08001aa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001aac:	b090      	sub	sp, #64	@ 0x40
 8001aae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ab8:	2300      	movs	r3, #0
 8001aba:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8001abc:	2300      	movs	r3, #0
 8001abe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ac0:	4b59      	ldr	r3, [pc, #356]	@ (8001c28 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f003 030c 	and.w	r3, r3, #12
 8001ac8:	2b08      	cmp	r3, #8
 8001aca:	d00d      	beq.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x40>
 8001acc:	2b08      	cmp	r3, #8
 8001ace:	f200 80a1 	bhi.w	8001c14 <HAL_RCC_GetSysClockFreq+0x16c>
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d002      	beq.n	8001adc <HAL_RCC_GetSysClockFreq+0x34>
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	d003      	beq.n	8001ae2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001ada:	e09b      	b.n	8001c14 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001adc:	4b53      	ldr	r3, [pc, #332]	@ (8001c2c <HAL_RCC_GetSysClockFreq+0x184>)
 8001ade:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ae0:	e09b      	b.n	8001c1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ae2:	4b53      	ldr	r3, [pc, #332]	@ (8001c30 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ae4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ae6:	e098      	b.n	8001c1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ae8:	4b4f      	ldr	r3, [pc, #316]	@ (8001c28 <HAL_RCC_GetSysClockFreq+0x180>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001af0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001af2:	4b4d      	ldr	r3, [pc, #308]	@ (8001c28 <HAL_RCC_GetSysClockFreq+0x180>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d028      	beq.n	8001b50 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001afe:	4b4a      	ldr	r3, [pc, #296]	@ (8001c28 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	099b      	lsrs	r3, r3, #6
 8001b04:	2200      	movs	r2, #0
 8001b06:	623b      	str	r3, [r7, #32]
 8001b08:	627a      	str	r2, [r7, #36]	@ 0x24
 8001b0a:	6a3b      	ldr	r3, [r7, #32]
 8001b0c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b10:	2100      	movs	r1, #0
 8001b12:	4b47      	ldr	r3, [pc, #284]	@ (8001c30 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b14:	fb03 f201 	mul.w	r2, r3, r1
 8001b18:	2300      	movs	r3, #0
 8001b1a:	fb00 f303 	mul.w	r3, r0, r3
 8001b1e:	4413      	add	r3, r2
 8001b20:	4a43      	ldr	r2, [pc, #268]	@ (8001c30 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b22:	fba0 1202 	umull	r1, r2, r0, r2
 8001b26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b28:	460a      	mov	r2, r1
 8001b2a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001b2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b2e:	4413      	add	r3, r2
 8001b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b34:	2200      	movs	r2, #0
 8001b36:	61bb      	str	r3, [r7, #24]
 8001b38:	61fa      	str	r2, [r7, #28]
 8001b3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b3e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001b42:	f7fe fb81 	bl	8000248 <__aeabi_uldivmod>
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b4e:	e053      	b.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b50:	4b35      	ldr	r3, [pc, #212]	@ (8001c28 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	099b      	lsrs	r3, r3, #6
 8001b56:	2200      	movs	r2, #0
 8001b58:	613b      	str	r3, [r7, #16]
 8001b5a:	617a      	str	r2, [r7, #20]
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001b62:	f04f 0b00 	mov.w	fp, #0
 8001b66:	4652      	mov	r2, sl
 8001b68:	465b      	mov	r3, fp
 8001b6a:	f04f 0000 	mov.w	r0, #0
 8001b6e:	f04f 0100 	mov.w	r1, #0
 8001b72:	0159      	lsls	r1, r3, #5
 8001b74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b78:	0150      	lsls	r0, r2, #5
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	ebb2 080a 	subs.w	r8, r2, sl
 8001b82:	eb63 090b 	sbc.w	r9, r3, fp
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	f04f 0300 	mov.w	r3, #0
 8001b8e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001b92:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001b96:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001b9a:	ebb2 0408 	subs.w	r4, r2, r8
 8001b9e:	eb63 0509 	sbc.w	r5, r3, r9
 8001ba2:	f04f 0200 	mov.w	r2, #0
 8001ba6:	f04f 0300 	mov.w	r3, #0
 8001baa:	00eb      	lsls	r3, r5, #3
 8001bac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bb0:	00e2      	lsls	r2, r4, #3
 8001bb2:	4614      	mov	r4, r2
 8001bb4:	461d      	mov	r5, r3
 8001bb6:	eb14 030a 	adds.w	r3, r4, sl
 8001bba:	603b      	str	r3, [r7, #0]
 8001bbc:	eb45 030b 	adc.w	r3, r5, fp
 8001bc0:	607b      	str	r3, [r7, #4]
 8001bc2:	f04f 0200 	mov.w	r2, #0
 8001bc6:	f04f 0300 	mov.w	r3, #0
 8001bca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bce:	4629      	mov	r1, r5
 8001bd0:	028b      	lsls	r3, r1, #10
 8001bd2:	4621      	mov	r1, r4
 8001bd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bd8:	4621      	mov	r1, r4
 8001bda:	028a      	lsls	r2, r1, #10
 8001bdc:	4610      	mov	r0, r2
 8001bde:	4619      	mov	r1, r3
 8001be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001be2:	2200      	movs	r2, #0
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	60fa      	str	r2, [r7, #12]
 8001be8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bec:	f7fe fb2c 	bl	8000248 <__aeabi_uldivmod>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c28 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	0c1b      	lsrs	r3, r3, #16
 8001bfe:	f003 0303 	and.w	r3, r3, #3
 8001c02:	3301      	adds	r3, #1
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001c08:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c10:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c12:	e002      	b.n	8001c1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c14:	4b05      	ldr	r3, [pc, #20]	@ (8001c2c <HAL_RCC_GetSysClockFreq+0x184>)
 8001c16:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3740      	adds	r7, #64	@ 0x40
 8001c20:	46bd      	mov	sp, r7
 8001c22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c26:	bf00      	nop
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	00f42400 	.word	0x00f42400
 8001c30:	017d7840 	.word	0x017d7840

08001c34 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c38:	4b03      	ldr	r3, [pc, #12]	@ (8001c48 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	20000000 	.word	0x20000000

08001c4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c50:	f7ff fff0 	bl	8001c34 <HAL_RCC_GetHCLKFreq>
 8001c54:	4602      	mov	r2, r0
 8001c56:	4b05      	ldr	r3, [pc, #20]	@ (8001c6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	0a9b      	lsrs	r3, r3, #10
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	4903      	ldr	r1, [pc, #12]	@ (8001c70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c62:	5ccb      	ldrb	r3, [r1, r3]
 8001c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	0800327c 	.word	0x0800327c

08001c74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c78:	f7ff ffdc 	bl	8001c34 <HAL_RCC_GetHCLKFreq>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	4b05      	ldr	r3, [pc, #20]	@ (8001c94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	0b5b      	lsrs	r3, r3, #13
 8001c84:	f003 0307 	and.w	r3, r3, #7
 8001c88:	4903      	ldr	r1, [pc, #12]	@ (8001c98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c8a:	5ccb      	ldrb	r3, [r1, r3]
 8001c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40023800 	.word	0x40023800
 8001c98:	0800327c 	.word	0x0800327c

08001c9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b088      	sub	sp, #32
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d012      	beq.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001cc4:	4b69      	ldr	r3, [pc, #420]	@ (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	4a68      	ldr	r2, [pc, #416]	@ (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cca:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001cce:	6093      	str	r3, [r2, #8]
 8001cd0:	4b66      	ldr	r3, [pc, #408]	@ (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cd8:	4964      	ldr	r1, [pc, #400]	@ (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d017      	beq.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001cf6:	4b5d      	ldr	r3, [pc, #372]	@ (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cfc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d04:	4959      	ldr	r1, [pc, #356]	@ (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d10:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001d14:	d101      	bne.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001d16:	2301      	movs	r3, #1
 8001d18:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001d22:	2301      	movs	r3, #1
 8001d24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d017      	beq.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d32:	4b4e      	ldr	r3, [pc, #312]	@ (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d38:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d40:	494a      	ldr	r1, [pc, #296]	@ (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d50:	d101      	bne.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001d52:	2301      	movs	r3, #1
 8001d54:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0320 	and.w	r3, r3, #32
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 808b 	beq.w	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d80:	4b3a      	ldr	r3, [pc, #232]	@ (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d84:	4a39      	ldr	r2, [pc, #228]	@ (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d8c:	4b37      	ldr	r3, [pc, #220]	@ (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d94:	60bb      	str	r3, [r7, #8]
 8001d96:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001d98:	4b35      	ldr	r3, [pc, #212]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a34      	ldr	r2, [pc, #208]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001da2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001da4:	f7fe ff92 	bl	8000ccc <HAL_GetTick>
 8001da8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001daa:	e008      	b.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dac:	f7fe ff8e 	bl	8000ccc <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b64      	cmp	r3, #100	@ 0x64
 8001db8:	d901      	bls.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e38f      	b.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001dbe:	4b2c      	ldr	r3, [pc, #176]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d0f0      	beq.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001dca:	4b28      	ldr	r3, [pc, #160]	@ (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dd2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d035      	beq.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d02e      	beq.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001de8:	4b20      	ldr	r3, [pc, #128]	@ (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001df0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001df2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001df6:	4a1d      	ldr	r2, [pc, #116]	@ (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001df8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dfc:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001dfe:	4b1b      	ldr	r3, [pc, #108]	@ (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e02:	4a1a      	ldr	r2, [pc, #104]	@ (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e08:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001e0a:	4a18      	ldr	r2, [pc, #96]	@ (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001e10:	4b16      	ldr	r3, [pc, #88]	@ (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d114      	bne.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e1c:	f7fe ff56 	bl	8000ccc <HAL_GetTick>
 8001e20:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e22:	e00a      	b.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e24:	f7fe ff52 	bl	8000ccc <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e351      	b.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d0ee      	beq.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001e52:	d111      	bne.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001e54:	4b05      	ldr	r3, [pc, #20]	@ (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e60:	4b04      	ldr	r3, [pc, #16]	@ (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001e62:	400b      	ands	r3, r1
 8001e64:	4901      	ldr	r1, [pc, #4]	@ (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	608b      	str	r3, [r1, #8]
 8001e6a:	e00b      	b.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40007000 	.word	0x40007000
 8001e74:	0ffffcff 	.word	0x0ffffcff
 8001e78:	4bac      	ldr	r3, [pc, #688]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	4aab      	ldr	r2, [pc, #684]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e7e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001e82:	6093      	str	r3, [r2, #8]
 8001e84:	4ba9      	ldr	r3, [pc, #676]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e86:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e90:	49a6      	ldr	r1, [pc, #664]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0310 	and.w	r3, r3, #16
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d010      	beq.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001ea2:	4ba2      	ldr	r3, [pc, #648]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ea4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ea8:	4aa0      	ldr	r2, [pc, #640]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eaa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001eae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001eb2:	4b9e      	ldr	r3, [pc, #632]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eb4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ebc:	499b      	ldr	r1, [pc, #620]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00a      	beq.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ed0:	4b96      	ldr	r3, [pc, #600]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ed6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ede:	4993      	ldr	r1, [pc, #588]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00a      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001ef2:	4b8e      	ldr	r3, [pc, #568]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ef8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f00:	498a      	ldr	r1, [pc, #552]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d00a      	beq.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f14:	4b85      	ldr	r3, [pc, #532]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f1a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f22:	4982      	ldr	r1, [pc, #520]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d00a      	beq.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001f36:	4b7d      	ldr	r3, [pc, #500]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f3c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f44:	4979      	ldr	r1, [pc, #484]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00a      	beq.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f58:	4b74      	ldr	r3, [pc, #464]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f5e:	f023 0203 	bic.w	r2, r3, #3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f66:	4971      	ldr	r1, [pc, #452]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00a      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f7a:	4b6c      	ldr	r3, [pc, #432]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f80:	f023 020c 	bic.w	r2, r3, #12
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f88:	4968      	ldr	r1, [pc, #416]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d00a      	beq.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f9c:	4b63      	ldr	r3, [pc, #396]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fa2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001faa:	4960      	ldr	r1, [pc, #384]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00a      	beq.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001fbe:	4b5b      	ldr	r3, [pc, #364]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fc4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fcc:	4957      	ldr	r1, [pc, #348]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00a      	beq.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001fe0:	4b52      	ldr	r3, [pc, #328]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fe6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fee:	494f      	ldr	r1, [pc, #316]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00a      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002002:	4b4a      	ldr	r3, [pc, #296]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002004:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002008:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002010:	4946      	ldr	r1, [pc, #280]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002012:	4313      	orrs	r3, r2
 8002014:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00a      	beq.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002024:	4b41      	ldr	r3, [pc, #260]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800202a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002032:	493e      	ldr	r1, [pc, #248]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002034:	4313      	orrs	r3, r2
 8002036:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00a      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002046:	4b39      	ldr	r3, [pc, #228]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002048:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800204c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002054:	4935      	ldr	r1, [pc, #212]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002056:	4313      	orrs	r3, r2
 8002058:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00a      	beq.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002068:	4b30      	ldr	r3, [pc, #192]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800206a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800206e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002076:	492d      	ldr	r1, [pc, #180]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002078:	4313      	orrs	r3, r2
 800207a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d011      	beq.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800208a:	4b28      	ldr	r3, [pc, #160]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800208c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002090:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002098:	4924      	ldr	r1, [pc, #144]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800209a:	4313      	orrs	r3, r2
 800209c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80020a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80020a8:	d101      	bne.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80020aa:	2301      	movs	r3, #1
 80020ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0308 	and.w	r3, r3, #8
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80020ba:	2301      	movs	r3, #1
 80020bc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00a      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020ca:	4b18      	ldr	r3, [pc, #96]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020d0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020d8:	4914      	ldr	r1, [pc, #80]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00b      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80020ec:	4b0f      	ldr	r3, [pc, #60]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020f2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020fc:	490b      	ldr	r1, [pc, #44]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00f      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002110:	4b06      	ldr	r3, [pc, #24]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002116:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002120:	4902      	ldr	r1, [pc, #8]	@ (800212c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002122:	4313      	orrs	r3, r2
 8002124:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002128:	e002      	b.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800212a:	bf00      	nop
 800212c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d00b      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800213c:	4b8a      	ldr	r3, [pc, #552]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800213e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002142:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800214c:	4986      	ldr	r1, [pc, #536]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800214e:	4313      	orrs	r3, r2
 8002150:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00b      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002160:	4b81      	ldr	r3, [pc, #516]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002162:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002166:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002170:	497d      	ldr	r1, [pc, #500]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002172:	4313      	orrs	r3, r2
 8002174:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d006      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	f000 80d6 	beq.w	8002338 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800218c:	4b76      	ldr	r3, [pc, #472]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a75      	ldr	r2, [pc, #468]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002192:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002196:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002198:	f7fe fd98 	bl	8000ccc <HAL_GetTick>
 800219c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800219e:	e008      	b.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80021a0:	f7fe fd94 	bl	8000ccc <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b64      	cmp	r3, #100	@ 0x64
 80021ac:	d901      	bls.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e195      	b.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80021b2:	4b6d      	ldr	r3, [pc, #436]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f0      	bne.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d021      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x572>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d11d      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80021d2:	4b65      	ldr	r3, [pc, #404]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021d8:	0c1b      	lsrs	r3, r3, #16
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80021e0:	4b61      	ldr	r3, [pc, #388]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021e6:	0e1b      	lsrs	r3, r3, #24
 80021e8:	f003 030f 	and.w	r3, r3, #15
 80021ec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	019a      	lsls	r2, r3, #6
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	041b      	lsls	r3, r3, #16
 80021f8:	431a      	orrs	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	061b      	lsls	r3, r3, #24
 80021fe:	431a      	orrs	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	071b      	lsls	r3, r3, #28
 8002206:	4958      	ldr	r1, [pc, #352]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002208:	4313      	orrs	r3, r2
 800220a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d004      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800221e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002222:	d00a      	beq.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800222c:	2b00      	cmp	r3, #0
 800222e:	d02e      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002234:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002238:	d129      	bne.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800223a:	4b4b      	ldr	r3, [pc, #300]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800223c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002240:	0c1b      	lsrs	r3, r3, #16
 8002242:	f003 0303 	and.w	r3, r3, #3
 8002246:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002248:	4b47      	ldr	r3, [pc, #284]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800224a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800224e:	0f1b      	lsrs	r3, r3, #28
 8002250:	f003 0307 	and.w	r3, r3, #7
 8002254:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	019a      	lsls	r2, r3, #6
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	041b      	lsls	r3, r3, #16
 8002260:	431a      	orrs	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	061b      	lsls	r3, r3, #24
 8002268:	431a      	orrs	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	071b      	lsls	r3, r3, #28
 800226e:	493e      	ldr	r1, [pc, #248]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002270:	4313      	orrs	r3, r2
 8002272:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002276:	4b3c      	ldr	r3, [pc, #240]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002278:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800227c:	f023 021f 	bic.w	r2, r3, #31
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002284:	3b01      	subs	r3, #1
 8002286:	4938      	ldr	r1, [pc, #224]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002288:	4313      	orrs	r3, r2
 800228a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d01d      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800229a:	4b33      	ldr	r3, [pc, #204]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800229c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022a0:	0e1b      	lsrs	r3, r3, #24
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80022a8:	4b2f      	ldr	r3, [pc, #188]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022ae:	0f1b      	lsrs	r3, r3, #28
 80022b0:	f003 0307 	and.w	r3, r3, #7
 80022b4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	019a      	lsls	r2, r3, #6
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	041b      	lsls	r3, r3, #16
 80022c2:	431a      	orrs	r2, r3
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	061b      	lsls	r3, r3, #24
 80022c8:	431a      	orrs	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	071b      	lsls	r3, r3, #28
 80022ce:	4926      	ldr	r1, [pc, #152]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d011      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	019a      	lsls	r2, r3, #6
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	041b      	lsls	r3, r3, #16
 80022ee:	431a      	orrs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	061b      	lsls	r3, r3, #24
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	071b      	lsls	r3, r3, #28
 80022fe:	491a      	ldr	r1, [pc, #104]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002300:	4313      	orrs	r3, r2
 8002302:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002306:	4b18      	ldr	r3, [pc, #96]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a17      	ldr	r2, [pc, #92]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800230c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002310:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002312:	f7fe fcdb 	bl	8000ccc <HAL_GetTick>
 8002316:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002318:	e008      	b.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800231a:	f7fe fcd7 	bl	8000ccc <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b64      	cmp	r3, #100	@ 0x64
 8002326:	d901      	bls.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e0d8      	b.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800232c:	4b0e      	ldr	r3, [pc, #56]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d0f0      	beq.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	2b01      	cmp	r3, #1
 800233c:	f040 80ce 	bne.w	80024dc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002340:	4b09      	ldr	r3, [pc, #36]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a08      	ldr	r2, [pc, #32]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002346:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800234a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800234c:	f7fe fcbe 	bl	8000ccc <HAL_GetTick>
 8002350:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002352:	e00b      	b.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002354:	f7fe fcba 	bl	8000ccc <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b64      	cmp	r3, #100	@ 0x64
 8002360:	d904      	bls.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e0bb      	b.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002366:	bf00      	nop
 8002368:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800236c:	4b5e      	ldr	r3, [pc, #376]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002374:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002378:	d0ec      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800238a:	2b00      	cmp	r3, #0
 800238c:	d009      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002396:	2b00      	cmp	r3, #0
 8002398:	d02e      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d12a      	bne.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80023a2:	4b51      	ldr	r3, [pc, #324]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023a8:	0c1b      	lsrs	r3, r3, #16
 80023aa:	f003 0303 	and.w	r3, r3, #3
 80023ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80023b0:	4b4d      	ldr	r3, [pc, #308]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023b6:	0f1b      	lsrs	r3, r3, #28
 80023b8:	f003 0307 	and.w	r3, r3, #7
 80023bc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	019a      	lsls	r2, r3, #6
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	041b      	lsls	r3, r3, #16
 80023c8:	431a      	orrs	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	061b      	lsls	r3, r3, #24
 80023d0:	431a      	orrs	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	071b      	lsls	r3, r3, #28
 80023d6:	4944      	ldr	r1, [pc, #272]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80023de:	4b42      	ldr	r3, [pc, #264]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023e4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ec:	3b01      	subs	r3, #1
 80023ee:	021b      	lsls	r3, r3, #8
 80023f0:	493d      	ldr	r1, [pc, #244]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d022      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002408:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800240c:	d11d      	bne.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800240e:	4b36      	ldr	r3, [pc, #216]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002410:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002414:	0e1b      	lsrs	r3, r3, #24
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800241c:	4b32      	ldr	r3, [pc, #200]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800241e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002422:	0f1b      	lsrs	r3, r3, #28
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	019a      	lsls	r2, r3, #6
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	041b      	lsls	r3, r3, #16
 8002436:	431a      	orrs	r2, r3
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	061b      	lsls	r3, r3, #24
 800243c:	431a      	orrs	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	071b      	lsls	r3, r3, #28
 8002442:	4929      	ldr	r1, [pc, #164]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002444:	4313      	orrs	r3, r2
 8002446:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0308 	and.w	r3, r3, #8
 8002452:	2b00      	cmp	r3, #0
 8002454:	d028      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002456:	4b24      	ldr	r3, [pc, #144]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002458:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800245c:	0e1b      	lsrs	r3, r3, #24
 800245e:	f003 030f 	and.w	r3, r3, #15
 8002462:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002464:	4b20      	ldr	r3, [pc, #128]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800246a:	0c1b      	lsrs	r3, r3, #16
 800246c:	f003 0303 	and.w	r3, r3, #3
 8002470:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	019a      	lsls	r2, r3, #6
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	041b      	lsls	r3, r3, #16
 800247c:	431a      	orrs	r2, r3
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	061b      	lsls	r3, r3, #24
 8002482:	431a      	orrs	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	69db      	ldr	r3, [r3, #28]
 8002488:	071b      	lsls	r3, r3, #28
 800248a:	4917      	ldr	r1, [pc, #92]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800248c:	4313      	orrs	r3, r2
 800248e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002492:	4b15      	ldr	r3, [pc, #84]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002494:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002498:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a0:	4911      	ldr	r1, [pc, #68]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80024a8:	4b0f      	ldr	r3, [pc, #60]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a0e      	ldr	r2, [pc, #56]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024b4:	f7fe fc0a 	bl	8000ccc <HAL_GetTick>
 80024b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80024ba:	e008      	b.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80024bc:	f7fe fc06 	bl	8000ccc <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b64      	cmp	r3, #100	@ 0x64
 80024c8:	d901      	bls.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e007      	b.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80024ce:	4b06      	ldr	r3, [pc, #24]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80024d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80024da:	d1ef      	bne.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3720      	adds	r7, #32
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40023800 	.word	0x40023800

080024ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e040      	b.n	8002580 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002502:	2b00      	cmp	r3, #0
 8002504:	d106      	bne.n	8002514 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7fe fac0 	bl	8000a94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2224      	movs	r2, #36	@ 0x24
 8002518:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 0201 	bic.w	r2, r2, #1
 8002528:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252e:	2b00      	cmp	r3, #0
 8002530:	d002      	beq.n	8002538 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 fbde 	bl	8002cf4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 f977 	bl	800282c <UART_SetConfig>
 800253e:	4603      	mov	r3, r0
 8002540:	2b01      	cmp	r3, #1
 8002542:	d101      	bne.n	8002548 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e01b      	b.n	8002580 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002556:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689a      	ldr	r2, [r3, #8]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002566:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f042 0201 	orr.w	r2, r2, #1
 8002576:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 fc5d 	bl	8002e38 <UART_CheckIdleState>
 800257e:	4603      	mov	r3, r0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b08a      	sub	sp, #40	@ 0x28
 800258c:	af02      	add	r7, sp, #8
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	603b      	str	r3, [r7, #0]
 8002594:	4613      	mov	r3, r2
 8002596:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800259c:	2b20      	cmp	r3, #32
 800259e:	d177      	bne.n	8002690 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d002      	beq.n	80025ac <HAL_UART_Transmit+0x24>
 80025a6:	88fb      	ldrh	r3, [r7, #6]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e070      	b.n	8002692 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2221      	movs	r2, #33	@ 0x21
 80025bc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025be:	f7fe fb85 	bl	8000ccc <HAL_GetTick>
 80025c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	88fa      	ldrh	r2, [r7, #6]
 80025c8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	88fa      	ldrh	r2, [r7, #6]
 80025d0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025dc:	d108      	bne.n	80025f0 <HAL_UART_Transmit+0x68>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d104      	bne.n	80025f0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80025e6:	2300      	movs	r3, #0
 80025e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	61bb      	str	r3, [r7, #24]
 80025ee:	e003      	b.n	80025f8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025f4:	2300      	movs	r3, #0
 80025f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80025f8:	e02f      	b.n	800265a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	2200      	movs	r2, #0
 8002602:	2180      	movs	r1, #128	@ 0x80
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f000 fcbf 	bl	8002f88 <UART_WaitOnFlagUntilTimeout>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d004      	beq.n	800261a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2220      	movs	r2, #32
 8002614:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e03b      	b.n	8002692 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d10b      	bne.n	8002638 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	881b      	ldrh	r3, [r3, #0]
 8002624:	461a      	mov	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800262e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	3302      	adds	r3, #2
 8002634:	61bb      	str	r3, [r7, #24]
 8002636:	e007      	b.n	8002648 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	781a      	ldrb	r2, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	3301      	adds	r3, #1
 8002646:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800264e:	b29b      	uxth	r3, r3
 8002650:	3b01      	subs	r3, #1
 8002652:	b29a      	uxth	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002660:	b29b      	uxth	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1c9      	bne.n	80025fa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	2200      	movs	r2, #0
 800266e:	2140      	movs	r1, #64	@ 0x40
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f000 fc89 	bl	8002f88 <UART_WaitOnFlagUntilTimeout>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d004      	beq.n	8002686 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2220      	movs	r2, #32
 8002680:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e005      	b.n	8002692 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2220      	movs	r2, #32
 800268a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800268c:	2300      	movs	r3, #0
 800268e:	e000      	b.n	8002692 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002690:	2302      	movs	r3, #2
  }
}
 8002692:	4618      	mov	r0, r3
 8002694:	3720      	adds	r7, #32
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b08a      	sub	sp, #40	@ 0x28
 800269e:	af02      	add	r7, sp, #8
 80026a0:	60f8      	str	r0, [r7, #12]
 80026a2:	60b9      	str	r1, [r7, #8]
 80026a4:	603b      	str	r3, [r7, #0]
 80026a6:	4613      	mov	r3, r2
 80026a8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026b0:	2b20      	cmp	r3, #32
 80026b2:	f040 80b5 	bne.w	8002820 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d002      	beq.n	80026c2 <HAL_UART_Receive+0x28>
 80026bc:	88fb      	ldrh	r3, [r7, #6]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e0ad      	b.n	8002822 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2222      	movs	r2, #34	@ 0x22
 80026d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026dc:	f7fe faf6 	bl	8000ccc <HAL_GetTick>
 80026e0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	88fa      	ldrh	r2, [r7, #6]
 80026e6:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	88fa      	ldrh	r2, [r7, #6]
 80026ee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026fa:	d10e      	bne.n	800271a <HAL_UART_Receive+0x80>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d105      	bne.n	8002710 <HAL_UART_Receive+0x76>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800270a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800270e:	e02d      	b.n	800276c <HAL_UART_Receive+0xd2>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	22ff      	movs	r2, #255	@ 0xff
 8002714:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002718:	e028      	b.n	800276c <HAL_UART_Receive+0xd2>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10d      	bne.n	800273e <HAL_UART_Receive+0xa4>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d104      	bne.n	8002734 <HAL_UART_Receive+0x9a>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	22ff      	movs	r2, #255	@ 0xff
 800272e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002732:	e01b      	b.n	800276c <HAL_UART_Receive+0xd2>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	227f      	movs	r2, #127	@ 0x7f
 8002738:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800273c:	e016      	b.n	800276c <HAL_UART_Receive+0xd2>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002746:	d10d      	bne.n	8002764 <HAL_UART_Receive+0xca>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d104      	bne.n	800275a <HAL_UART_Receive+0xc0>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	227f      	movs	r2, #127	@ 0x7f
 8002754:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002758:	e008      	b.n	800276c <HAL_UART_Receive+0xd2>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	223f      	movs	r2, #63	@ 0x3f
 800275e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002762:	e003      	b.n	800276c <HAL_UART_Receive+0xd2>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002772:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800277c:	d108      	bne.n	8002790 <HAL_UART_Receive+0xf6>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d104      	bne.n	8002790 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002786:	2300      	movs	r3, #0
 8002788:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	61bb      	str	r3, [r7, #24]
 800278e:	e003      	b.n	8002798 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002794:	2300      	movs	r3, #0
 8002796:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002798:	e036      	b.n	8002808 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	9300      	str	r3, [sp, #0]
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	2200      	movs	r2, #0
 80027a2:	2120      	movs	r1, #32
 80027a4:	68f8      	ldr	r0, [r7, #12]
 80027a6:	f000 fbef 	bl	8002f88 <UART_WaitOnFlagUntilTimeout>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d005      	beq.n	80027bc <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2220      	movs	r2, #32
 80027b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e032      	b.n	8002822 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10c      	bne.n	80027dc <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	8a7b      	ldrh	r3, [r7, #18]
 80027cc:	4013      	ands	r3, r2
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	3302      	adds	r3, #2
 80027d8:	61bb      	str	r3, [r7, #24]
 80027da:	e00c      	b.n	80027f6 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	8a7b      	ldrh	r3, [r7, #18]
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	4013      	ands	r3, r2
 80027ea:	b2da      	uxtb	r2, r3
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	3301      	adds	r3, #1
 80027f4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	3b01      	subs	r3, #1
 8002800:	b29a      	uxth	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800280e:	b29b      	uxth	r3, r3
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1c2      	bne.n	800279a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2220      	movs	r2, #32
 8002818:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800281c:	2300      	movs	r3, #0
 800281e:	e000      	b.n	8002822 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8002820:	2302      	movs	r3, #2
  }
}
 8002822:	4618      	mov	r0, r3
 8002824:	3720      	adds	r7, #32
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
	...

0800282c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b088      	sub	sp, #32
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002834:	2300      	movs	r3, #0
 8002836:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	431a      	orrs	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	4313      	orrs	r3, r2
 800284e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	4ba6      	ldr	r3, [pc, #664]	@ (8002af0 <UART_SetConfig+0x2c4>)
 8002858:	4013      	ands	r3, r2
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	6812      	ldr	r2, [r2, #0]
 800285e:	6979      	ldr	r1, [r7, #20]
 8002860:	430b      	orrs	r3, r1
 8002862:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	68da      	ldr	r2, [r3, #12]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	430a      	orrs	r2, r1
 8002878:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	4313      	orrs	r3, r2
 8002888:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	430a      	orrs	r2, r1
 800289c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a94      	ldr	r2, [pc, #592]	@ (8002af4 <UART_SetConfig+0x2c8>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d120      	bne.n	80028ea <UART_SetConfig+0xbe>
 80028a8:	4b93      	ldr	r3, [pc, #588]	@ (8002af8 <UART_SetConfig+0x2cc>)
 80028aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028ae:	f003 0303 	and.w	r3, r3, #3
 80028b2:	2b03      	cmp	r3, #3
 80028b4:	d816      	bhi.n	80028e4 <UART_SetConfig+0xb8>
 80028b6:	a201      	add	r2, pc, #4	@ (adr r2, 80028bc <UART_SetConfig+0x90>)
 80028b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028bc:	080028cd 	.word	0x080028cd
 80028c0:	080028d9 	.word	0x080028d9
 80028c4:	080028d3 	.word	0x080028d3
 80028c8:	080028df 	.word	0x080028df
 80028cc:	2301      	movs	r3, #1
 80028ce:	77fb      	strb	r3, [r7, #31]
 80028d0:	e150      	b.n	8002b74 <UART_SetConfig+0x348>
 80028d2:	2302      	movs	r3, #2
 80028d4:	77fb      	strb	r3, [r7, #31]
 80028d6:	e14d      	b.n	8002b74 <UART_SetConfig+0x348>
 80028d8:	2304      	movs	r3, #4
 80028da:	77fb      	strb	r3, [r7, #31]
 80028dc:	e14a      	b.n	8002b74 <UART_SetConfig+0x348>
 80028de:	2308      	movs	r3, #8
 80028e0:	77fb      	strb	r3, [r7, #31]
 80028e2:	e147      	b.n	8002b74 <UART_SetConfig+0x348>
 80028e4:	2310      	movs	r3, #16
 80028e6:	77fb      	strb	r3, [r7, #31]
 80028e8:	e144      	b.n	8002b74 <UART_SetConfig+0x348>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a83      	ldr	r2, [pc, #524]	@ (8002afc <UART_SetConfig+0x2d0>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d132      	bne.n	800295a <UART_SetConfig+0x12e>
 80028f4:	4b80      	ldr	r3, [pc, #512]	@ (8002af8 <UART_SetConfig+0x2cc>)
 80028f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028fa:	f003 030c 	and.w	r3, r3, #12
 80028fe:	2b0c      	cmp	r3, #12
 8002900:	d828      	bhi.n	8002954 <UART_SetConfig+0x128>
 8002902:	a201      	add	r2, pc, #4	@ (adr r2, 8002908 <UART_SetConfig+0xdc>)
 8002904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002908:	0800293d 	.word	0x0800293d
 800290c:	08002955 	.word	0x08002955
 8002910:	08002955 	.word	0x08002955
 8002914:	08002955 	.word	0x08002955
 8002918:	08002949 	.word	0x08002949
 800291c:	08002955 	.word	0x08002955
 8002920:	08002955 	.word	0x08002955
 8002924:	08002955 	.word	0x08002955
 8002928:	08002943 	.word	0x08002943
 800292c:	08002955 	.word	0x08002955
 8002930:	08002955 	.word	0x08002955
 8002934:	08002955 	.word	0x08002955
 8002938:	0800294f 	.word	0x0800294f
 800293c:	2300      	movs	r3, #0
 800293e:	77fb      	strb	r3, [r7, #31]
 8002940:	e118      	b.n	8002b74 <UART_SetConfig+0x348>
 8002942:	2302      	movs	r3, #2
 8002944:	77fb      	strb	r3, [r7, #31]
 8002946:	e115      	b.n	8002b74 <UART_SetConfig+0x348>
 8002948:	2304      	movs	r3, #4
 800294a:	77fb      	strb	r3, [r7, #31]
 800294c:	e112      	b.n	8002b74 <UART_SetConfig+0x348>
 800294e:	2308      	movs	r3, #8
 8002950:	77fb      	strb	r3, [r7, #31]
 8002952:	e10f      	b.n	8002b74 <UART_SetConfig+0x348>
 8002954:	2310      	movs	r3, #16
 8002956:	77fb      	strb	r3, [r7, #31]
 8002958:	e10c      	b.n	8002b74 <UART_SetConfig+0x348>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a68      	ldr	r2, [pc, #416]	@ (8002b00 <UART_SetConfig+0x2d4>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d120      	bne.n	80029a6 <UART_SetConfig+0x17a>
 8002964:	4b64      	ldr	r3, [pc, #400]	@ (8002af8 <UART_SetConfig+0x2cc>)
 8002966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800296a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800296e:	2b30      	cmp	r3, #48	@ 0x30
 8002970:	d013      	beq.n	800299a <UART_SetConfig+0x16e>
 8002972:	2b30      	cmp	r3, #48	@ 0x30
 8002974:	d814      	bhi.n	80029a0 <UART_SetConfig+0x174>
 8002976:	2b20      	cmp	r3, #32
 8002978:	d009      	beq.n	800298e <UART_SetConfig+0x162>
 800297a:	2b20      	cmp	r3, #32
 800297c:	d810      	bhi.n	80029a0 <UART_SetConfig+0x174>
 800297e:	2b00      	cmp	r3, #0
 8002980:	d002      	beq.n	8002988 <UART_SetConfig+0x15c>
 8002982:	2b10      	cmp	r3, #16
 8002984:	d006      	beq.n	8002994 <UART_SetConfig+0x168>
 8002986:	e00b      	b.n	80029a0 <UART_SetConfig+0x174>
 8002988:	2300      	movs	r3, #0
 800298a:	77fb      	strb	r3, [r7, #31]
 800298c:	e0f2      	b.n	8002b74 <UART_SetConfig+0x348>
 800298e:	2302      	movs	r3, #2
 8002990:	77fb      	strb	r3, [r7, #31]
 8002992:	e0ef      	b.n	8002b74 <UART_SetConfig+0x348>
 8002994:	2304      	movs	r3, #4
 8002996:	77fb      	strb	r3, [r7, #31]
 8002998:	e0ec      	b.n	8002b74 <UART_SetConfig+0x348>
 800299a:	2308      	movs	r3, #8
 800299c:	77fb      	strb	r3, [r7, #31]
 800299e:	e0e9      	b.n	8002b74 <UART_SetConfig+0x348>
 80029a0:	2310      	movs	r3, #16
 80029a2:	77fb      	strb	r3, [r7, #31]
 80029a4:	e0e6      	b.n	8002b74 <UART_SetConfig+0x348>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a56      	ldr	r2, [pc, #344]	@ (8002b04 <UART_SetConfig+0x2d8>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d120      	bne.n	80029f2 <UART_SetConfig+0x1c6>
 80029b0:	4b51      	ldr	r3, [pc, #324]	@ (8002af8 <UART_SetConfig+0x2cc>)
 80029b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029b6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80029ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80029bc:	d013      	beq.n	80029e6 <UART_SetConfig+0x1ba>
 80029be:	2bc0      	cmp	r3, #192	@ 0xc0
 80029c0:	d814      	bhi.n	80029ec <UART_SetConfig+0x1c0>
 80029c2:	2b80      	cmp	r3, #128	@ 0x80
 80029c4:	d009      	beq.n	80029da <UART_SetConfig+0x1ae>
 80029c6:	2b80      	cmp	r3, #128	@ 0x80
 80029c8:	d810      	bhi.n	80029ec <UART_SetConfig+0x1c0>
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d002      	beq.n	80029d4 <UART_SetConfig+0x1a8>
 80029ce:	2b40      	cmp	r3, #64	@ 0x40
 80029d0:	d006      	beq.n	80029e0 <UART_SetConfig+0x1b4>
 80029d2:	e00b      	b.n	80029ec <UART_SetConfig+0x1c0>
 80029d4:	2300      	movs	r3, #0
 80029d6:	77fb      	strb	r3, [r7, #31]
 80029d8:	e0cc      	b.n	8002b74 <UART_SetConfig+0x348>
 80029da:	2302      	movs	r3, #2
 80029dc:	77fb      	strb	r3, [r7, #31]
 80029de:	e0c9      	b.n	8002b74 <UART_SetConfig+0x348>
 80029e0:	2304      	movs	r3, #4
 80029e2:	77fb      	strb	r3, [r7, #31]
 80029e4:	e0c6      	b.n	8002b74 <UART_SetConfig+0x348>
 80029e6:	2308      	movs	r3, #8
 80029e8:	77fb      	strb	r3, [r7, #31]
 80029ea:	e0c3      	b.n	8002b74 <UART_SetConfig+0x348>
 80029ec:	2310      	movs	r3, #16
 80029ee:	77fb      	strb	r3, [r7, #31]
 80029f0:	e0c0      	b.n	8002b74 <UART_SetConfig+0x348>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a44      	ldr	r2, [pc, #272]	@ (8002b08 <UART_SetConfig+0x2dc>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d125      	bne.n	8002a48 <UART_SetConfig+0x21c>
 80029fc:	4b3e      	ldr	r3, [pc, #248]	@ (8002af8 <UART_SetConfig+0x2cc>)
 80029fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a0a:	d017      	beq.n	8002a3c <UART_SetConfig+0x210>
 8002a0c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a10:	d817      	bhi.n	8002a42 <UART_SetConfig+0x216>
 8002a12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a16:	d00b      	beq.n	8002a30 <UART_SetConfig+0x204>
 8002a18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a1c:	d811      	bhi.n	8002a42 <UART_SetConfig+0x216>
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <UART_SetConfig+0x1fe>
 8002a22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a26:	d006      	beq.n	8002a36 <UART_SetConfig+0x20a>
 8002a28:	e00b      	b.n	8002a42 <UART_SetConfig+0x216>
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	77fb      	strb	r3, [r7, #31]
 8002a2e:	e0a1      	b.n	8002b74 <UART_SetConfig+0x348>
 8002a30:	2302      	movs	r3, #2
 8002a32:	77fb      	strb	r3, [r7, #31]
 8002a34:	e09e      	b.n	8002b74 <UART_SetConfig+0x348>
 8002a36:	2304      	movs	r3, #4
 8002a38:	77fb      	strb	r3, [r7, #31]
 8002a3a:	e09b      	b.n	8002b74 <UART_SetConfig+0x348>
 8002a3c:	2308      	movs	r3, #8
 8002a3e:	77fb      	strb	r3, [r7, #31]
 8002a40:	e098      	b.n	8002b74 <UART_SetConfig+0x348>
 8002a42:	2310      	movs	r3, #16
 8002a44:	77fb      	strb	r3, [r7, #31]
 8002a46:	e095      	b.n	8002b74 <UART_SetConfig+0x348>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a2f      	ldr	r2, [pc, #188]	@ (8002b0c <UART_SetConfig+0x2e0>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d125      	bne.n	8002a9e <UART_SetConfig+0x272>
 8002a52:	4b29      	ldr	r3, [pc, #164]	@ (8002af8 <UART_SetConfig+0x2cc>)
 8002a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a58:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002a5c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002a60:	d017      	beq.n	8002a92 <UART_SetConfig+0x266>
 8002a62:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002a66:	d817      	bhi.n	8002a98 <UART_SetConfig+0x26c>
 8002a68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a6c:	d00b      	beq.n	8002a86 <UART_SetConfig+0x25a>
 8002a6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a72:	d811      	bhi.n	8002a98 <UART_SetConfig+0x26c>
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d003      	beq.n	8002a80 <UART_SetConfig+0x254>
 8002a78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a7c:	d006      	beq.n	8002a8c <UART_SetConfig+0x260>
 8002a7e:	e00b      	b.n	8002a98 <UART_SetConfig+0x26c>
 8002a80:	2301      	movs	r3, #1
 8002a82:	77fb      	strb	r3, [r7, #31]
 8002a84:	e076      	b.n	8002b74 <UART_SetConfig+0x348>
 8002a86:	2302      	movs	r3, #2
 8002a88:	77fb      	strb	r3, [r7, #31]
 8002a8a:	e073      	b.n	8002b74 <UART_SetConfig+0x348>
 8002a8c:	2304      	movs	r3, #4
 8002a8e:	77fb      	strb	r3, [r7, #31]
 8002a90:	e070      	b.n	8002b74 <UART_SetConfig+0x348>
 8002a92:	2308      	movs	r3, #8
 8002a94:	77fb      	strb	r3, [r7, #31]
 8002a96:	e06d      	b.n	8002b74 <UART_SetConfig+0x348>
 8002a98:	2310      	movs	r3, #16
 8002a9a:	77fb      	strb	r3, [r7, #31]
 8002a9c:	e06a      	b.n	8002b74 <UART_SetConfig+0x348>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a1b      	ldr	r2, [pc, #108]	@ (8002b10 <UART_SetConfig+0x2e4>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d138      	bne.n	8002b1a <UART_SetConfig+0x2ee>
 8002aa8:	4b13      	ldr	r3, [pc, #76]	@ (8002af8 <UART_SetConfig+0x2cc>)
 8002aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aae:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002ab2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002ab6:	d017      	beq.n	8002ae8 <UART_SetConfig+0x2bc>
 8002ab8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002abc:	d82a      	bhi.n	8002b14 <UART_SetConfig+0x2e8>
 8002abe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ac2:	d00b      	beq.n	8002adc <UART_SetConfig+0x2b0>
 8002ac4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ac8:	d824      	bhi.n	8002b14 <UART_SetConfig+0x2e8>
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <UART_SetConfig+0x2aa>
 8002ace:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ad2:	d006      	beq.n	8002ae2 <UART_SetConfig+0x2b6>
 8002ad4:	e01e      	b.n	8002b14 <UART_SetConfig+0x2e8>
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	77fb      	strb	r3, [r7, #31]
 8002ada:	e04b      	b.n	8002b74 <UART_SetConfig+0x348>
 8002adc:	2302      	movs	r3, #2
 8002ade:	77fb      	strb	r3, [r7, #31]
 8002ae0:	e048      	b.n	8002b74 <UART_SetConfig+0x348>
 8002ae2:	2304      	movs	r3, #4
 8002ae4:	77fb      	strb	r3, [r7, #31]
 8002ae6:	e045      	b.n	8002b74 <UART_SetConfig+0x348>
 8002ae8:	2308      	movs	r3, #8
 8002aea:	77fb      	strb	r3, [r7, #31]
 8002aec:	e042      	b.n	8002b74 <UART_SetConfig+0x348>
 8002aee:	bf00      	nop
 8002af0:	efff69f3 	.word	0xefff69f3
 8002af4:	40011000 	.word	0x40011000
 8002af8:	40023800 	.word	0x40023800
 8002afc:	40004400 	.word	0x40004400
 8002b00:	40004800 	.word	0x40004800
 8002b04:	40004c00 	.word	0x40004c00
 8002b08:	40005000 	.word	0x40005000
 8002b0c:	40011400 	.word	0x40011400
 8002b10:	40007800 	.word	0x40007800
 8002b14:	2310      	movs	r3, #16
 8002b16:	77fb      	strb	r3, [r7, #31]
 8002b18:	e02c      	b.n	8002b74 <UART_SetConfig+0x348>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a72      	ldr	r2, [pc, #456]	@ (8002ce8 <UART_SetConfig+0x4bc>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d125      	bne.n	8002b70 <UART_SetConfig+0x344>
 8002b24:	4b71      	ldr	r3, [pc, #452]	@ (8002cec <UART_SetConfig+0x4c0>)
 8002b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b2a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002b2e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002b32:	d017      	beq.n	8002b64 <UART_SetConfig+0x338>
 8002b34:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002b38:	d817      	bhi.n	8002b6a <UART_SetConfig+0x33e>
 8002b3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b3e:	d00b      	beq.n	8002b58 <UART_SetConfig+0x32c>
 8002b40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b44:	d811      	bhi.n	8002b6a <UART_SetConfig+0x33e>
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <UART_SetConfig+0x326>
 8002b4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b4e:	d006      	beq.n	8002b5e <UART_SetConfig+0x332>
 8002b50:	e00b      	b.n	8002b6a <UART_SetConfig+0x33e>
 8002b52:	2300      	movs	r3, #0
 8002b54:	77fb      	strb	r3, [r7, #31]
 8002b56:	e00d      	b.n	8002b74 <UART_SetConfig+0x348>
 8002b58:	2302      	movs	r3, #2
 8002b5a:	77fb      	strb	r3, [r7, #31]
 8002b5c:	e00a      	b.n	8002b74 <UART_SetConfig+0x348>
 8002b5e:	2304      	movs	r3, #4
 8002b60:	77fb      	strb	r3, [r7, #31]
 8002b62:	e007      	b.n	8002b74 <UART_SetConfig+0x348>
 8002b64:	2308      	movs	r3, #8
 8002b66:	77fb      	strb	r3, [r7, #31]
 8002b68:	e004      	b.n	8002b74 <UART_SetConfig+0x348>
 8002b6a:	2310      	movs	r3, #16
 8002b6c:	77fb      	strb	r3, [r7, #31]
 8002b6e:	e001      	b.n	8002b74 <UART_SetConfig+0x348>
 8002b70:	2310      	movs	r3, #16
 8002b72:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	69db      	ldr	r3, [r3, #28]
 8002b78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b7c:	d15b      	bne.n	8002c36 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002b7e:	7ffb      	ldrb	r3, [r7, #31]
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	d828      	bhi.n	8002bd6 <UART_SetConfig+0x3aa>
 8002b84:	a201      	add	r2, pc, #4	@ (adr r2, 8002b8c <UART_SetConfig+0x360>)
 8002b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b8a:	bf00      	nop
 8002b8c:	08002bb1 	.word	0x08002bb1
 8002b90:	08002bb9 	.word	0x08002bb9
 8002b94:	08002bc1 	.word	0x08002bc1
 8002b98:	08002bd7 	.word	0x08002bd7
 8002b9c:	08002bc7 	.word	0x08002bc7
 8002ba0:	08002bd7 	.word	0x08002bd7
 8002ba4:	08002bd7 	.word	0x08002bd7
 8002ba8:	08002bd7 	.word	0x08002bd7
 8002bac:	08002bcf 	.word	0x08002bcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bb0:	f7ff f84c 	bl	8001c4c <HAL_RCC_GetPCLK1Freq>
 8002bb4:	61b8      	str	r0, [r7, #24]
        break;
 8002bb6:	e013      	b.n	8002be0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002bb8:	f7ff f85c 	bl	8001c74 <HAL_RCC_GetPCLK2Freq>
 8002bbc:	61b8      	str	r0, [r7, #24]
        break;
 8002bbe:	e00f      	b.n	8002be0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bc0:	4b4b      	ldr	r3, [pc, #300]	@ (8002cf0 <UART_SetConfig+0x4c4>)
 8002bc2:	61bb      	str	r3, [r7, #24]
        break;
 8002bc4:	e00c      	b.n	8002be0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bc6:	f7fe ff6f 	bl	8001aa8 <HAL_RCC_GetSysClockFreq>
 8002bca:	61b8      	str	r0, [r7, #24]
        break;
 8002bcc:	e008      	b.n	8002be0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002bd2:	61bb      	str	r3, [r7, #24]
        break;
 8002bd4:	e004      	b.n	8002be0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	77bb      	strb	r3, [r7, #30]
        break;
 8002bde:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d074      	beq.n	8002cd0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	005a      	lsls	r2, r3, #1
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	085b      	lsrs	r3, r3, #1
 8002bf0:	441a      	add	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	2b0f      	cmp	r3, #15
 8002c00:	d916      	bls.n	8002c30 <UART_SetConfig+0x404>
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c08:	d212      	bcs.n	8002c30 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	f023 030f 	bic.w	r3, r3, #15
 8002c12:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	085b      	lsrs	r3, r3, #1
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	89fb      	ldrh	r3, [r7, #14]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	89fa      	ldrh	r2, [r7, #14]
 8002c2c:	60da      	str	r2, [r3, #12]
 8002c2e:	e04f      	b.n	8002cd0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	77bb      	strb	r3, [r7, #30]
 8002c34:	e04c      	b.n	8002cd0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002c36:	7ffb      	ldrb	r3, [r7, #31]
 8002c38:	2b08      	cmp	r3, #8
 8002c3a:	d828      	bhi.n	8002c8e <UART_SetConfig+0x462>
 8002c3c:	a201      	add	r2, pc, #4	@ (adr r2, 8002c44 <UART_SetConfig+0x418>)
 8002c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c42:	bf00      	nop
 8002c44:	08002c69 	.word	0x08002c69
 8002c48:	08002c71 	.word	0x08002c71
 8002c4c:	08002c79 	.word	0x08002c79
 8002c50:	08002c8f 	.word	0x08002c8f
 8002c54:	08002c7f 	.word	0x08002c7f
 8002c58:	08002c8f 	.word	0x08002c8f
 8002c5c:	08002c8f 	.word	0x08002c8f
 8002c60:	08002c8f 	.word	0x08002c8f
 8002c64:	08002c87 	.word	0x08002c87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c68:	f7fe fff0 	bl	8001c4c <HAL_RCC_GetPCLK1Freq>
 8002c6c:	61b8      	str	r0, [r7, #24]
        break;
 8002c6e:	e013      	b.n	8002c98 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c70:	f7ff f800 	bl	8001c74 <HAL_RCC_GetPCLK2Freq>
 8002c74:	61b8      	str	r0, [r7, #24]
        break;
 8002c76:	e00f      	b.n	8002c98 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c78:	4b1d      	ldr	r3, [pc, #116]	@ (8002cf0 <UART_SetConfig+0x4c4>)
 8002c7a:	61bb      	str	r3, [r7, #24]
        break;
 8002c7c:	e00c      	b.n	8002c98 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c7e:	f7fe ff13 	bl	8001aa8 <HAL_RCC_GetSysClockFreq>
 8002c82:	61b8      	str	r0, [r7, #24]
        break;
 8002c84:	e008      	b.n	8002c98 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c8a:	61bb      	str	r3, [r7, #24]
        break;
 8002c8c:	e004      	b.n	8002c98 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	77bb      	strb	r3, [r7, #30]
        break;
 8002c96:	bf00      	nop
    }

    if (pclk != 0U)
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d018      	beq.n	8002cd0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	085a      	lsrs	r2, r3, #1
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	441a      	add	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	2b0f      	cmp	r3, #15
 8002cb6:	d909      	bls.n	8002ccc <UART_SetConfig+0x4a0>
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cbe:	d205      	bcs.n	8002ccc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	60da      	str	r2, [r3, #12]
 8002cca:	e001      	b.n	8002cd0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002cdc:	7fbb      	ldrb	r3, [r7, #30]
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3720      	adds	r7, #32
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40007c00 	.word	0x40007c00
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	00f42400 	.word	0x00f42400

08002cf4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d00:	f003 0308 	and.w	r3, r3, #8
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00a      	beq.n	8002d1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00a      	beq.n	8002d40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00a      	beq.n	8002d62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d66:	f003 0304 	and.w	r3, r3, #4
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00a      	beq.n	8002d84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	430a      	orrs	r2, r1
 8002d82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d88:	f003 0310 	and.w	r3, r3, #16
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00a      	beq.n	8002da6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002daa:	f003 0320 	and.w	r3, r3, #32
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00a      	beq.n	8002dc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d01a      	beq.n	8002e0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002df2:	d10a      	bne.n	8002e0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00a      	beq.n	8002e2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	605a      	str	r2, [r3, #4]
  }
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b098      	sub	sp, #96	@ 0x60
 8002e3c:	af02      	add	r7, sp, #8
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e48:	f7fd ff40 	bl	8000ccc <HAL_GetTick>
 8002e4c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0308 	and.w	r3, r3, #8
 8002e58:	2b08      	cmp	r3, #8
 8002e5a:	d12e      	bne.n	8002eba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e5c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e64:	2200      	movs	r2, #0
 8002e66:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 f88c 	bl	8002f88 <UART_WaitOnFlagUntilTimeout>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d021      	beq.n	8002eba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e7e:	e853 3f00 	ldrex	r3, [r3]
 8002e82:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002e84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	461a      	mov	r2, r3
 8002e92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e94:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e96:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002e9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e9c:	e841 2300 	strex	r3, r2, [r1]
 8002ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002ea2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1e6      	bne.n	8002e76 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2220      	movs	r2, #32
 8002eac:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e062      	b.n	8002f80 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0304 	and.w	r3, r3, #4
 8002ec4:	2b04      	cmp	r3, #4
 8002ec6:	d149      	bne.n	8002f5c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ec8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 f856 	bl	8002f88 <UART_WaitOnFlagUntilTimeout>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d03c      	beq.n	8002f5c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eea:	e853 3f00 	ldrex	r3, [r3]
 8002eee:	623b      	str	r3, [r7, #32]
   return(result);
 8002ef0:	6a3b      	ldr	r3, [r7, #32]
 8002ef2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002ef6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	461a      	mov	r2, r3
 8002efe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f00:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f02:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f08:	e841 2300 	strex	r3, r2, [r1]
 8002f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1e6      	bne.n	8002ee2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	3308      	adds	r3, #8
 8002f1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	e853 3f00 	ldrex	r3, [r3]
 8002f22:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f023 0301 	bic.w	r3, r3, #1
 8002f2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	3308      	adds	r3, #8
 8002f32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f34:	61fa      	str	r2, [r7, #28]
 8002f36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f38:	69b9      	ldr	r1, [r7, #24]
 8002f3a:	69fa      	ldr	r2, [r7, #28]
 8002f3c:	e841 2300 	strex	r3, r2, [r1]
 8002f40:	617b      	str	r3, [r7, #20]
   return(result);
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1e5      	bne.n	8002f14 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e011      	b.n	8002f80 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2220      	movs	r2, #32
 8002f66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3758      	adds	r7, #88	@ 0x58
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	603b      	str	r3, [r7, #0]
 8002f94:	4613      	mov	r3, r2
 8002f96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f98:	e04f      	b.n	800303a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa0:	d04b      	beq.n	800303a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fa2:	f7fd fe93 	bl	8000ccc <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d302      	bcc.n	8002fb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d101      	bne.n	8002fbc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e04e      	b.n	800305a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0304 	and.w	r3, r3, #4
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d037      	beq.n	800303a <UART_WaitOnFlagUntilTimeout+0xb2>
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	2b80      	cmp	r3, #128	@ 0x80
 8002fce:	d034      	beq.n	800303a <UART_WaitOnFlagUntilTimeout+0xb2>
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	2b40      	cmp	r3, #64	@ 0x40
 8002fd4:	d031      	beq.n	800303a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	69db      	ldr	r3, [r3, #28]
 8002fdc:	f003 0308 	and.w	r3, r3, #8
 8002fe0:	2b08      	cmp	r3, #8
 8002fe2:	d110      	bne.n	8003006 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2208      	movs	r2, #8
 8002fea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002fec:	68f8      	ldr	r0, [r7, #12]
 8002fee:	f000 f838 	bl	8003062 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2208      	movs	r2, #8
 8002ff6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e029      	b.n	800305a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	69db      	ldr	r3, [r3, #28]
 800300c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003010:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003014:	d111      	bne.n	800303a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800301e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f000 f81e 	bl	8003062 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2220      	movs	r2, #32
 800302a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e00f      	b.n	800305a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	69da      	ldr	r2, [r3, #28]
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	4013      	ands	r3, r2
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	429a      	cmp	r2, r3
 8003048:	bf0c      	ite	eq
 800304a:	2301      	moveq	r3, #1
 800304c:	2300      	movne	r3, #0
 800304e:	b2db      	uxtb	r3, r3
 8003050:	461a      	mov	r2, r3
 8003052:	79fb      	ldrb	r3, [r7, #7]
 8003054:	429a      	cmp	r2, r3
 8003056:	d0a0      	beq.n	8002f9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003062:	b480      	push	{r7}
 8003064:	b095      	sub	sp, #84	@ 0x54
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003072:	e853 3f00 	ldrex	r3, [r3]
 8003076:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800307a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800307e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	461a      	mov	r2, r3
 8003086:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003088:	643b      	str	r3, [r7, #64]	@ 0x40
 800308a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800308c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800308e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003090:	e841 2300 	strex	r3, r2, [r1]
 8003094:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1e6      	bne.n	800306a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	3308      	adds	r3, #8
 80030a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	e853 3f00 	ldrex	r3, [r3]
 80030aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	f023 0301 	bic.w	r3, r3, #1
 80030b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	3308      	adds	r3, #8
 80030ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80030bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030c4:	e841 2300 	strex	r3, r2, [r1]
 80030c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80030ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1e5      	bne.n	800309c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d118      	bne.n	800310a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	e853 3f00 	ldrex	r3, [r3]
 80030e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	f023 0310 	bic.w	r3, r3, #16
 80030ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	461a      	mov	r2, r3
 80030f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030f6:	61bb      	str	r3, [r7, #24]
 80030f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030fa:	6979      	ldr	r1, [r7, #20]
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	e841 2300 	strex	r3, r2, [r1]
 8003102:	613b      	str	r3, [r7, #16]
   return(result);
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1e6      	bne.n	80030d8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2220      	movs	r2, #32
 800310e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800311e:	bf00      	nop
 8003120:	3754      	adds	r7, #84	@ 0x54
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr

0800312a <memset>:
 800312a:	4402      	add	r2, r0
 800312c:	4603      	mov	r3, r0
 800312e:	4293      	cmp	r3, r2
 8003130:	d100      	bne.n	8003134 <memset+0xa>
 8003132:	4770      	bx	lr
 8003134:	f803 1b01 	strb.w	r1, [r3], #1
 8003138:	e7f9      	b.n	800312e <memset+0x4>
	...

0800313c <__libc_init_array>:
 800313c:	b570      	push	{r4, r5, r6, lr}
 800313e:	4d0d      	ldr	r5, [pc, #52]	@ (8003174 <__libc_init_array+0x38>)
 8003140:	4c0d      	ldr	r4, [pc, #52]	@ (8003178 <__libc_init_array+0x3c>)
 8003142:	1b64      	subs	r4, r4, r5
 8003144:	10a4      	asrs	r4, r4, #2
 8003146:	2600      	movs	r6, #0
 8003148:	42a6      	cmp	r6, r4
 800314a:	d109      	bne.n	8003160 <__libc_init_array+0x24>
 800314c:	4d0b      	ldr	r5, [pc, #44]	@ (800317c <__libc_init_array+0x40>)
 800314e:	4c0c      	ldr	r4, [pc, #48]	@ (8003180 <__libc_init_array+0x44>)
 8003150:	f000 f826 	bl	80031a0 <_init>
 8003154:	1b64      	subs	r4, r4, r5
 8003156:	10a4      	asrs	r4, r4, #2
 8003158:	2600      	movs	r6, #0
 800315a:	42a6      	cmp	r6, r4
 800315c:	d105      	bne.n	800316a <__libc_init_array+0x2e>
 800315e:	bd70      	pop	{r4, r5, r6, pc}
 8003160:	f855 3b04 	ldr.w	r3, [r5], #4
 8003164:	4798      	blx	r3
 8003166:	3601      	adds	r6, #1
 8003168:	e7ee      	b.n	8003148 <__libc_init_array+0xc>
 800316a:	f855 3b04 	ldr.w	r3, [r5], #4
 800316e:	4798      	blx	r3
 8003170:	3601      	adds	r6, #1
 8003172:	e7f2      	b.n	800315a <__libc_init_array+0x1e>
 8003174:	0800328c 	.word	0x0800328c
 8003178:	0800328c 	.word	0x0800328c
 800317c:	0800328c 	.word	0x0800328c
 8003180:	08003290 	.word	0x08003290

08003184 <memcpy>:
 8003184:	440a      	add	r2, r1
 8003186:	4291      	cmp	r1, r2
 8003188:	f100 33ff 	add.w	r3, r0, #4294967295
 800318c:	d100      	bne.n	8003190 <memcpy+0xc>
 800318e:	4770      	bx	lr
 8003190:	b510      	push	{r4, lr}
 8003192:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003196:	f803 4f01 	strb.w	r4, [r3, #1]!
 800319a:	4291      	cmp	r1, r2
 800319c:	d1f9      	bne.n	8003192 <memcpy+0xe>
 800319e:	bd10      	pop	{r4, pc}

080031a0 <_init>:
 80031a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031a2:	bf00      	nop
 80031a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031a6:	bc08      	pop	{r3}
 80031a8:	469e      	mov	lr, r3
 80031aa:	4770      	bx	lr

080031ac <_fini>:
 80031ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ae:	bf00      	nop
 80031b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031b2:	bc08      	pop	{r3}
 80031b4:	469e      	mov	lr, r3
 80031b6:	4770      	bx	lr
